; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\drvtimer.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\drvtimer.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\BSP_lib\Inc\Driver -I.\CMSIS\CMOSupport -I.\CMSIS\NUC1xxSupport -I.\User\inc -I.\modbus\include -I.\modbus\MBport -I.\modbus\rtu -I"D:\Program Files\keil\ARM\RV31\INC" -I"D:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"D:\Program Files\keil\ARM\Inc\Nuvoton\NUC1xx" --omf_browse=.\obj\drvtimer.crf BSP_lib\Src\Driver\DrvTIMER.c]
                          THUMB

                          AREA ||i.CalTimerInitValue||, CODE, READONLY, ALIGN=1

                  CalTimerInitValue PROC
;;;128    /*---------------------------------------------------------------------------------------------------------*/
;;;129    static uint32_t CalTimerInitValue(uint32_t u32ClockValue, uint32_t u32TicksPerSec)
000000  b5f8              PUSH     {r3-r7,lr}
;;;130    {
000002  4607              MOV      r7,r0
000004  460e              MOV      r6,r1
;;;131        uint32_t u32PreScale;
;;;132        uint32_t u32TCMPRValue;
;;;133    
;;;134        if ((u32ClockValue < 2) || (u32TicksPerSec == 0))
000006  2f02              CMP      r7,#2
000008  d301              BCC      |L1.14|
00000a  2e00              CMP      r6,#0
00000c  d102              BNE      |L1.20|
                  |L1.14|
;;;135            return (uint32_t)-1;
00000e  2000              MOVS     r0,#0
000010  43c0              MVNS     r0,r0
                  |L1.18|
;;;136    
;;;137        for (u32PreScale=1; u32PreScale<256; u32PreScale++)
;;;138        {
;;;139            u32TCMPRValue = u32ClockValue / (u32TicksPerSec * u32PreScale);
;;;140    
;;;141            /* The TCMPR value must > 1 */
;;;142            if ((u32TCMPRValue > 1) && (u32TCMPRValue < 0x1000000))
;;;143                return (((u32PreScale-1) << 24) | u32TCMPRValue);
;;;144        }
;;;145        
;;;146        return (uint32_t)-1;
;;;147    }
000012  bdf8              POP      {r3-r7,pc}
                  |L1.20|
000014  2401              MOVS     r4,#1                 ;137
000016  e011              B        |L1.60|
                  |L1.24|
000018  4630              MOV      r0,r6                 ;139
00001a  4360              MULS     r0,r4,r0              ;139
00001c  4601              MOV      r1,r0                 ;139
00001e  4638              MOV      r0,r7                 ;139
000020  f7fffffe          BL       __aeabi_uidivmod
000024  4605              MOV      r5,r0                 ;139
000026  2d01              CMP      r5,#1                 ;142
000028  d907              BLS      |L1.58|
00002a  2001              MOVS     r0,#1                 ;142
00002c  0600              LSLS     r0,r0,#24             ;142
00002e  4285              CMP      r5,r0                 ;142
000030  d203              BCS      |L1.58|
000032  1e60              SUBS     r0,r4,#1              ;143
000034  0600              LSLS     r0,r0,#24             ;143
000036  4328              ORRS     r0,r0,r5              ;143
000038  e7eb              B        |L1.18|
                  |L1.58|
00003a  1c64              ADDS     r4,r4,#1              ;137
                  |L1.60|
00003c  2cff              CMP      r4,#0xff              ;137
00003e  d9eb              BLS      |L1.24|
000040  2000              MOVS     r0,#0                 ;146
000042  43c0              MVNS     r0,r0                 ;146
000044  e7e5              B        |L1.18|
;;;148    
                          ENDP


                          AREA ||i.DrvTIMER_ClearCaptureIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearCaptureIntFlag PROC
;;;1631   /*---------------------------------------------------------------------------------------------------------*/
;;;1632   int32_t DrvTIMER_ClearCaptureIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1633   {
;;;1634   	TIMER_T * tTMR;
;;;1635   
;;;1636      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L2.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L2.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L2.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L2.50|
000012  e002              B        |L2.26|
                  |L2.20|
;;;1637       {
;;;1638           case E_TMR0:
;;;1639           case E_TMR1:
000014  bf00              NOP      
                  |L2.22|
;;;1640           case E_TMR2:
000016  bf00              NOP      
                  |L2.24|
;;;1641   		case E_TMR3:
000018  bf00              NOP      
                  |L2.26|
;;;1642           {
;;;1643           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L2.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L2.60|
000022  18c2              ADDS     r2,r0,r3
;;;1644               tTMR->TEXISR.TEXIF = 1;
000024  6990              LDR      r0,[r2,#0x18]
000026  0840              LSRS     r0,r0,#1
000028  0040              LSLS     r0,r0,#1
00002a  1c40              ADDS     r0,r0,#1
00002c  6190              STR      r0,[r2,#0x18]
;;;1645               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L2.48|
;;;1646           }
;;;1647   
;;;1648           default:
;;;1649           {
;;;1650               return E_DRVTIMER_CHANNEL ; 
;;;1651           }
;;;1652       }
;;;1653   }
000030  4770              BX       lr
                  |L2.50|
000032  4803              LDR      r0,|L2.64|
000034  e7fc              B        |L2.48|
;;;1654   
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
                          DCD      CH_OFFSET
                  |L2.60|
                          DCD      0x40010000
                  |L2.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearIntFlag PROC
;;;842    /*---------------------------------------------------------------------------------------------------------*/
;;;843    int32_t DrvTIMER_ClearIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;844    {
;;;845        if (ch == E_TMR0 )
000002  2900              CMP      r1,#0
000004  d107              BNE      |L3.22|
;;;846            TIMER0->TISR.TIF = 1;
000006  4814              LDR      r0,|L3.88|
000008  6880              LDR      r0,[r0,#8]
00000a  0840              LSRS     r0,r0,#1
00000c  0040              LSLS     r0,r0,#1
00000e  1c40              ADDS     r0,r0,#1
000010  4a11              LDR      r2,|L3.88|
000012  6090              STR      r0,[r2,#8]
000014  e01e              B        |L3.84|
                  |L3.22|
;;;847        else if(ch == E_TMR1 )                                   
000016  2901              CMP      r1,#1
000018  d106              BNE      |L3.40|
;;;848            TIMER1->TISR.TIF = 1;
00001a  480f              LDR      r0,|L3.88|
00001c  6a80              LDR      r0,[r0,#0x28]
00001e  4388              BICS     r0,r0,r1
000020  1c40              ADDS     r0,r0,#1
000022  4a0d              LDR      r2,|L3.88|
000024  6290              STR      r0,[r2,#0x28]
000026  e015              B        |L3.84|
                  |L3.40|
;;;849        else if(ch == E_TMR2 )
000028  2902              CMP      r1,#2
00002a  d107              BNE      |L3.60|
;;;850            TIMER2->TISR.TIF = 1;
00002c  480b              LDR      r0,|L3.92|
00002e  6880              LDR      r0,[r0,#8]
000030  0840              LSRS     r0,r0,#1
000032  0040              LSLS     r0,r0,#1
000034  1c40              ADDS     r0,r0,#1
000036  4a09              LDR      r2,|L3.92|
000038  6090              STR      r0,[r2,#8]
00003a  e00b              B        |L3.84|
                  |L3.60|
;;;851        else if(ch == E_TMR3 )
00003c  2903              CMP      r1,#3
00003e  d107              BNE      |L3.80|
;;;852            TIMER3->TISR.TIF = 1;
000040  4806              LDR      r0,|L3.92|
000042  6a80              LDR      r0,[r0,#0x28]
000044  0840              LSRS     r0,r0,#1
000046  0040              LSLS     r0,r0,#1
000048  1c40              ADDS     r0,r0,#1
00004a  4a04              LDR      r2,|L3.92|
00004c  6290              STR      r0,[r2,#0x28]
00004e  e001              B        |L3.84|
                  |L3.80|
;;;853        else 
;;;854            return E_DRVTIMER_CHANNEL;
000050  4803              LDR      r0,|L3.96|
                  |L3.82|
;;;855    
;;;856        return E_SUCCESS;
;;;857    }
000052  4770              BX       lr
                  |L3.84|
000054  2000              MOVS     r0,#0                 ;856
000056  e7fc              B        |L3.82|
;;;858    
                          ENDP

                  |L3.88|
                          DCD      0x40010000
                  |L3.92|
                          DCD      0x40110000
                  |L3.96|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_ClearTimerEvent||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ClearTimerEvent PROC
;;;676    /*---------------------------------------------------------------------------------------------------------*/
;;;677    void DrvTIMER_ClearTimerEvent(E_TIMER_CHANNEL ch, uint32_t uTimerEventNo)
000000  b510              PUSH     {r4,lr}
;;;678    {
;;;679        switch (ch)
000002  2800              CMP      r0,#0
000004  d006              BEQ      |L4.20|
000006  2801              CMP      r0,#1
000008  d015              BEQ      |L4.54|
00000a  2802              CMP      r0,#2
00000c  d024              BEQ      |L4.88|
00000e  2803              CMP      r0,#3
000010  d144              BNE      |L4.156|
000012  e032              B        |L4.122|
                  |L4.20|
;;;680        {
;;;681            case E_TMR0:
;;;682            {
;;;683                tTime0Event[uTimerEventNo].active = FALSE;
000014  2300              MOVS     r3,#0
000016  2214              MOVS     r2,#0x14
000018  434a              MULS     r2,r1,r2
00001a  4c22              LDR      r4,|L4.164|
00001c  50a3              STR      r3,[r4,r2]
;;;684                uTime0EventCount--;
00001e  4a22              LDR      r2,|L4.168|
000020  6812              LDR      r2,[r2,#0]  ; uTime0EventCount
000022  1e52              SUBS     r2,r2,#1
000024  4b20              LDR      r3,|L4.168|
000026  601a              STR      r2,[r3,#0]  ; uTime0EventCount
;;;685                if (uTime0EventCount == 0)
000028  461a              MOV      r2,r3
00002a  6812              LDR      r2,[r2,#0]  ; uTime0EventCount
00002c  2a00              CMP      r2,#0
00002e  d101              BNE      |L4.52|
;;;686                {
;;;687                    bIsSetTime0Event = FALSE;
000030  4b1e              LDR      r3,|L4.172|
000032  601a              STR      r2,[r3,#0]  ; bIsSetTime0Event
                  |L4.52|
;;;688                }
;;;689                break;
000034  e033              B        |L4.158|
                  |L4.54|
;;;690            }
;;;691    
;;;692            case E_TMR1:
;;;693            {
;;;694                tTime1Event[uTimerEventNo].active = FALSE;
000036  2300              MOVS     r3,#0
000038  2214              MOVS     r2,#0x14
00003a  434a              MULS     r2,r1,r2
00003c  4c1c              LDR      r4,|L4.176|
00003e  50a3              STR      r3,[r4,r2]
;;;695                uTime1EventCount--;
000040  4a1c              LDR      r2,|L4.180|
000042  6812              LDR      r2,[r2,#0]  ; uTime1EventCount
000044  1e52              SUBS     r2,r2,#1
000046  4b1b              LDR      r3,|L4.180|
000048  601a              STR      r2,[r3,#0]  ; uTime1EventCount
;;;696                if (uTime1EventCount == 0)
00004a  461a              MOV      r2,r3
00004c  6812              LDR      r2,[r2,#0]  ; uTime1EventCount
00004e  2a00              CMP      r2,#0
000050  d101              BNE      |L4.86|
;;;697                {
;;;698                    bIsSetTime1Event = FALSE;
000052  4b19              LDR      r3,|L4.184|
000054  601a              STR      r2,[r3,#0]  ; bIsSetTime1Event
                  |L4.86|
;;;699                }
;;;700                break;
000056  e022              B        |L4.158|
                  |L4.88|
;;;701            }
;;;702    
;;;703            case E_TMR2:
;;;704            {
;;;705                tTime2Event[uTimerEventNo].active = FALSE;
000058  2300              MOVS     r3,#0
00005a  2214              MOVS     r2,#0x14
00005c  434a              MULS     r2,r1,r2
00005e  4c17              LDR      r4,|L4.188|
000060  50a3              STR      r3,[r4,r2]
;;;706                uTime2EventCount--;
000062  4a17              LDR      r2,|L4.192|
000064  6812              LDR      r2,[r2,#0]  ; uTime2EventCount
000066  1e52              SUBS     r2,r2,#1
000068  4b15              LDR      r3,|L4.192|
00006a  601a              STR      r2,[r3,#0]  ; uTime2EventCount
;;;707                if (uTime2EventCount == 0)
00006c  461a              MOV      r2,r3
00006e  6812              LDR      r2,[r2,#0]  ; uTime2EventCount
000070  2a00              CMP      r2,#0
000072  d101              BNE      |L4.120|
;;;708                {
;;;709                    bIsSetTime2Event = FALSE;
000074  4b13              LDR      r3,|L4.196|
000076  601a              STR      r2,[r3,#0]  ; bIsSetTime2Event
                  |L4.120|
;;;710                }
;;;711                break;
000078  e011              B        |L4.158|
                  |L4.122|
;;;712            }
;;;713    
;;;714            case E_TMR3:
;;;715            {
;;;716                tTime3Event[uTimerEventNo].active = FALSE;
00007a  2300              MOVS     r3,#0
00007c  2214              MOVS     r2,#0x14
00007e  434a              MULS     r2,r1,r2
000080  4c11              LDR      r4,|L4.200|
000082  50a3              STR      r3,[r4,r2]
;;;717                uTime3EventCount--;
000084  4a11              LDR      r2,|L4.204|
000086  6812              LDR      r2,[r2,#0]  ; uTime3EventCount
000088  1e52              SUBS     r2,r2,#1
00008a  4b10              LDR      r3,|L4.204|
00008c  601a              STR      r2,[r3,#0]  ; uTime3EventCount
;;;718                if (uTime3EventCount == 0)
00008e  461a              MOV      r2,r3
000090  6812              LDR      r2,[r2,#0]  ; uTime3EventCount
000092  2a00              CMP      r2,#0
000094  d101              BNE      |L4.154|
;;;719                {
;;;720                    bIsSetTime3Event = FALSE;
000096  4b0e              LDR      r3,|L4.208|
000098  601a              STR      r2,[r3,#0]  ; bIsSetTime3Event
                  |L4.154|
;;;721                }
;;;722                break;
00009a  e000              B        |L4.158|
                  |L4.156|
;;;723            }
;;;724    
;;;725            default:
;;;726            {
;;;727                break;
00009c  bf00              NOP      
                  |L4.158|
00009e  bf00              NOP                            ;689
;;;728            }
;;;729        }
;;;730    }
0000a0  bd10              POP      {r4,pc}
;;;731    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L4.164|
                          DCD      tTime0Event
                  |L4.168|
                          DCD      uTime0EventCount
                  |L4.172|
                          DCD      bIsSetTime0Event
                  |L4.176|
                          DCD      tTime1Event
                  |L4.180|
                          DCD      uTime1EventCount
                  |L4.184|
                          DCD      bIsSetTime1Event
                  |L4.188|
                          DCD      tTime2Event
                  |L4.192|
                          DCD      uTime2EventCount
                  |L4.196|
                          DCD      bIsSetTime2Event
                  |L4.200|
                          DCD      tTime3Event
                  |L4.204|
                          DCD      uTime3EventCount
                  |L4.208|
                          DCD      bIsSetTime3Event

                          AREA ||i.DrvTIMER_Close||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Close PROC
;;;486    /*---------------------------------------------------------------------------------------------------------*/
;;;487    int32_t DrvTIMER_Close(E_TIMER_CHANNEL ch)
000000  b510              PUSH     {r4,lr}
;;;488    {
000002  4604              MOV      r4,r0
;;;489        switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L5.22|
000008  2c01              CMP      r4,#1
00000a  d015              BEQ      |L5.56|
00000c  2c02              CMP      r4,#2
00000e  d024              BEQ      |L5.90|
000010  2c03              CMP      r4,#3
000012  d144              BNE      |L5.158|
000014  e032              B        |L5.124|
                  |L5.22|
;;;490        {
;;;491            case E_TMR0:
;;;492            {
;;;493                DrvTIMER_DisableInt(E_TMR0);
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       DrvTIMER_DisableInt
;;;494                TIMER0->TCSR.CRST   = 1;
00001c  4822              LDR      r0,|L5.168|
00001e  6800              LDR      r0,[r0,#0]
000020  2101              MOVS     r1,#1
000022  0689              LSLS     r1,r1,#26
000024  4388              BICS     r0,r0,r1
000026  1840              ADDS     r0,r0,r1
000028  491f              LDR      r1,|L5.168|
00002a  6008              STR      r0,[r1,#0]
;;;495                bIsTimer0Used       = FALSE;
00002c  2000              MOVS     r0,#0
00002e  491f              LDR      r1,|L5.172|
000030  6008              STR      r0,[r1,#0]  ; bIsTimer0Used
;;;496                bIsSetTime0Event    = FALSE;
000032  491f              LDR      r1,|L5.176|
000034  6008              STR      r0,[r1,#0]  ; bIsSetTime0Event
;;;497                break;
000036  e034              B        |L5.162|
                  |L5.56|
;;;498            }
;;;499    
;;;500            case E_TMR1:
;;;501            {
;;;502                DrvTIMER_DisableInt(E_TMR1);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       DrvTIMER_DisableInt
;;;503                TIMER1->TCSR.CRST   = 1;
00003e  481a              LDR      r0,|L5.168|
000040  6a00              LDR      r0,[r0,#0x20]
000042  2101              MOVS     r1,#1
000044  0689              LSLS     r1,r1,#26
000046  4388              BICS     r0,r0,r1
000048  1840              ADDS     r0,r0,r1
00004a  4917              LDR      r1,|L5.168|
00004c  6208              STR      r0,[r1,#0x20]
;;;504                bIsTimer1Used       = FALSE;
00004e  2000              MOVS     r0,#0
000050  4918              LDR      r1,|L5.180|
000052  6008              STR      r0,[r1,#0]  ; bIsTimer1Used
;;;505                bIsSetTime1Event    = FALSE;
000054  4918              LDR      r1,|L5.184|
000056  6008              STR      r0,[r1,#0]  ; bIsSetTime1Event
;;;506                break;
000058  e023              B        |L5.162|
                  |L5.90|
;;;507            }
;;;508    
;;;509            case E_TMR2:
;;;510            {
;;;511                DrvTIMER_DisableInt(E_TMR2);
00005a  2002              MOVS     r0,#2
00005c  f7fffffe          BL       DrvTIMER_DisableInt
;;;512                TIMER2->TCSR.CRST   = 1;
000060  4816              LDR      r0,|L5.188|
000062  6800              LDR      r0,[r0,#0]
000064  2101              MOVS     r1,#1
000066  0689              LSLS     r1,r1,#26
000068  4388              BICS     r0,r0,r1
00006a  1840              ADDS     r0,r0,r1
00006c  4913              LDR      r1,|L5.188|
00006e  6008              STR      r0,[r1,#0]
;;;513                bIsTimer2Used       = FALSE;
000070  2000              MOVS     r0,#0
000072  4913              LDR      r1,|L5.192|
000074  6008              STR      r0,[r1,#0]  ; bIsTimer2Used
;;;514                bIsSetTime2Event    = FALSE;
000076  4913              LDR      r1,|L5.196|
000078  6008              STR      r0,[r1,#0]  ; bIsSetTime2Event
;;;515                break;
00007a  e012              B        |L5.162|
                  |L5.124|
;;;516            }
;;;517    
;;;518            case E_TMR3:
;;;519            {
;;;520                DrvTIMER_DisableInt(E_TMR3);
00007c  2003              MOVS     r0,#3
00007e  f7fffffe          BL       DrvTIMER_DisableInt
;;;521                TIMER3->TCSR.CRST   = 1;
000082  480e              LDR      r0,|L5.188|
000084  6a00              LDR      r0,[r0,#0x20]
000086  2101              MOVS     r1,#1
000088  0689              LSLS     r1,r1,#26
00008a  4388              BICS     r0,r0,r1
00008c  1840              ADDS     r0,r0,r1
00008e  490b              LDR      r1,|L5.188|
000090  6208              STR      r0,[r1,#0x20]
;;;522                bIsTimer3Used       = FALSE;
000092  2000              MOVS     r0,#0
000094  490c              LDR      r1,|L5.200|
000096  6008              STR      r0,[r1,#0]  ; bIsTimer3Used
;;;523                bIsSetTime3Event    = FALSE;
000098  490c              LDR      r1,|L5.204|
00009a  6008              STR      r0,[r1,#0]  ; bIsSetTime3Event
;;;524                break;
00009c  e001              B        |L5.162|
                  |L5.158|
;;;525            }
;;;526    
;;;527            default:
;;;528            {
;;;529                return E_DRVTIMER_CHANNEL ;
00009e  480c              LDR      r0,|L5.208|
                  |L5.160|
;;;530            }
;;;531        }
;;;532    
;;;533        return E_SUCCESS;
;;;534    }
0000a0  bd10              POP      {r4,pc}
                  |L5.162|
0000a2  bf00              NOP                            ;497
0000a4  2000              MOVS     r0,#0                 ;533
0000a6  e7fb              B        |L5.160|
;;;535    
                          ENDP

                  |L5.168|
                          DCD      0x40010000
                  |L5.172|
                          DCD      bIsTimer0Used
                  |L5.176|
                          DCD      bIsSetTime0Event
                  |L5.180|
                          DCD      bIsTimer1Used
                  |L5.184|
                          DCD      bIsSetTime1Event
                  |L5.188|
                          DCD      0x40110000
                  |L5.192|
                          DCD      bIsTimer2Used
                  |L5.196|
                          DCD      bIsSetTime2Event
                  |L5.200|
                          DCD      bIsTimer3Used
                  |L5.204|
                          DCD      bIsSetTime3Event
                  |L5.208|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_CloseCapture||, CODE, READONLY, ALIGN=2

                  DrvTIMER_CloseCapture PROC
;;;1297   /*---------------------------------------------------------------------------------------------------------*/
;;;1298   int32_t DrvTIMER_CloseCapture(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1299   {
;;;1300   	TIMER_T * tTMR;
;;;1301   
;;;1302      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L6.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L6.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L6.24|
00000e  2903              CMP      r1,#3
000010  d10b              BNE      |L6.42|
000012  e002              B        |L6.26|
                  |L6.20|
;;;1303       {
;;;1304           case E_TMR0:
;;;1305           case E_TMR1:
000014  bf00              NOP      
                  |L6.22|
;;;1306           case E_TMR2:
000016  bf00              NOP      
                  |L6.24|
;;;1307   		case E_TMR3:
000018  bf00              NOP      
                  |L6.26|
;;;1308           {
;;;1309           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b04              LDR      r3,|L6.48|
00001e  5818              LDR      r0,[r3,r0]
000020  4b04              LDR      r3,|L6.52|
000022  18c2              ADDS     r2,r0,r3
;;;1310   			outpw((uint32_t)&tTMR->TEXCON ,0 );	
000024  2000              MOVS     r0,#0
000026  6150              STR      r0,[r2,#0x14]
                  |L6.40|
;;;1311               return E_SUCCESS;
;;;1312           }
;;;1313   
;;;1314           default:
;;;1315           {
;;;1316               return E_DRVTIMER_CHANNEL ; 
;;;1317           }
;;;1318       }
;;;1319   }
000028  4770              BX       lr
                  |L6.42|
00002a  4803              LDR      r0,|L6.56|
00002c  e7fc              B        |L6.40|
;;;1320   
                          ENDP

00002e  0000              DCW      0x0000
                  |L6.48|
                          DCD      CH_OFFSET
                  |L6.52|
                          DCD      0x40010000
                  |L6.56|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_Delay||, CODE, READONLY, ALIGN=1

                  DrvTIMER_Delay PROC
;;;1001   /*---------------------------------------------------------------------------------------------------------*/
;;;1002   void DrvTIMER_Delay(E_TIMER_CHANNEL ch, uint32_t uIntTicks)
000000  b508              PUSH     {r3,lr}
;;;1003   {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;1004       uint32_t volatile btime;
;;;1005   
;;;1006       btime = DrvTIMER_GetIntTicks(ch);
000006  4618              MOV      r0,r3
000008  f7fffffe          BL       DrvTIMER_GetIntTicks
00000c  9000              STR      r0,[sp,#0]
;;;1007       
;;;1008       while (1)
00000e  e007              B        |L7.32|
                  |L7.16|
;;;1009       {
;;;1010           if ((DrvTIMER_GetIntTicks(ch) - btime) > uIntTicks)
000010  4618              MOV      r0,r3
000012  f7fffffe          BL       DrvTIMER_GetIntTicks
000016  9900              LDR      r1,[sp,#0]
000018  1a40              SUBS     r0,r0,r1
00001a  4290              CMP      r0,r2
00001c  d900              BLS      |L7.32|
;;;1011           {
;;;1012               break;
00001e  e000              B        |L7.34|
                  |L7.32|
000020  e7f6              B        |L7.16|
                  |L7.34|
000022  bf00              NOP      
;;;1013           }
;;;1014       }
;;;1015   }
000024  bd08              POP      {r3,pc}
;;;1016   
                          ENDP


                          AREA ||i.DrvTIMER_DisableCapture||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableCapture PROC
;;;1524   /*---------------------------------------------------------------------------------------------------------*/
;;;1525   int32_t DrvTIMER_DisableCapture(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1526   {
;;;1527   	TIMER_T * tTMR;
;;;1528   
;;;1529      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L8.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L8.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L8.24|
00000e  2903              CMP      r1,#3
000010  d10e              BNE      |L8.48|
000012  e002              B        |L8.26|
                  |L8.20|
;;;1530       {
;;;1531           case E_TMR0:
;;;1532           case E_TMR1:
000014  bf00              NOP      
                  |L8.22|
;;;1533           case E_TMR2:
000016  bf00              NOP      
                  |L8.24|
;;;1534   		case E_TMR3:
000018  bf00              NOP      
                  |L8.26|
;;;1535           {
;;;1536           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b05              LDR      r3,|L8.52|
00001e  5818              LDR      r0,[r3,r0]
000020  4b05              LDR      r3,|L8.56|
000022  18c2              ADDS     r2,r0,r3
;;;1537               tTMR->TEXCON.TEXEN = 0;
000024  6950              LDR      r0,[r2,#0x14]
000026  2308              MOVS     r3,#8
000028  4398              BICS     r0,r0,r3
00002a  6150              STR      r0,[r2,#0x14]
;;;1538               return E_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L8.46|
;;;1539           }
;;;1540   
;;;1541           default:
;;;1542           {
;;;1543               return E_DRVTIMER_CHANNEL ; 
;;;1544           }
;;;1545       }
;;;1546   }
00002e  4770              BX       lr
                  |L8.48|
000030  4802              LDR      r0,|L8.60|
000032  e7fc              B        |L8.46|
;;;1547   
                          ENDP

                  |L8.52|
                          DCD      CH_OFFSET
                  |L8.56|
                          DCD      0x40010000
                  |L8.60|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_DisableCaptureDebounce||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableCaptureDebounce PROC
;;;1703   /*---------------------------------------------------------------------------------------------------------*/
;;;1704   int32_t DrvTIMER_DisableCaptureDebounce(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1705   {
;;;1706   	TIMER_T * tTMR;
;;;1707   
;;;1708      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L9.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L9.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L9.24|
00000e  2903              CMP      r1,#3
000010  d10e              BNE      |L9.48|
000012  e002              B        |L9.26|
                  |L9.20|
;;;1709       {
;;;1710           case E_TMR0:
;;;1711           case E_TMR1:
000014  bf00              NOP      
                  |L9.22|
;;;1712           case E_TMR2:
000016  bf00              NOP      
                  |L9.24|
;;;1713   		case E_TMR3:
000018  bf00              NOP      
                  |L9.26|
;;;1714           {
;;;1715           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b05              LDR      r3,|L9.52|
00001e  5818              LDR      r0,[r3,r0]
000020  4b05              LDR      r3,|L9.56|
000022  18c2              ADDS     r2,r0,r3
;;;1716               tTMR->TEXCON.TEXDB = 0;
000024  6950              LDR      r0,[r2,#0x14]
000026  2340              MOVS     r3,#0x40
000028  4398              BICS     r0,r0,r3
00002a  6150              STR      r0,[r2,#0x14]
;;;1717               return E_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L9.46|
;;;1718           }
;;;1719   
;;;1720           default:
;;;1721           {
;;;1722               return E_DRVTIMER_CHANNEL ; 
;;;1723           }
;;;1724       }
;;;1725   }
00002e  4770              BX       lr
                  |L9.48|
000030  4802              LDR      r0,|L9.60|
000032  e7fc              B        |L9.46|
;;;1726   
                          ENDP

                  |L9.52|
                          DCD      CH_OFFSET
                  |L9.56|
                          DCD      0x40010000
                  |L9.60|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_DisableCaptureInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableCaptureInt PROC
;;;1452   /*---------------------------------------------------------------------------------------------------------*/
;;;1453   int32_t DrvTIMER_DisableCaptureInt(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1454   {
;;;1455   	TIMER_T * tTMR;
;;;1456   
;;;1457      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L10.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L10.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L10.24|
00000e  2903              CMP      r1,#3
000010  d10e              BNE      |L10.48|
000012  e002              B        |L10.26|
                  |L10.20|
;;;1458       {
;;;1459           case E_TMR0:
;;;1460           case E_TMR1:
000014  bf00              NOP      
                  |L10.22|
;;;1461           case E_TMR2:
000016  bf00              NOP      
                  |L10.24|
;;;1462   		case E_TMR3:
000018  bf00              NOP      
                  |L10.26|
;;;1463           {
;;;1464           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b05              LDR      r3,|L10.52|
00001e  5818              LDR      r0,[r3,r0]
000020  4b05              LDR      r3,|L10.56|
000022  18c2              ADDS     r2,r0,r3
;;;1465               tTMR->TEXCON.TEXIEN = 0;
000024  6950              LDR      r0,[r2,#0x14]
000026  2320              MOVS     r3,#0x20
000028  4398              BICS     r0,r0,r3
00002a  6150              STR      r0,[r2,#0x14]
;;;1466               return E_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L10.46|
;;;1467           }
;;;1468   
;;;1469           default:
;;;1470           {
;;;1471               return E_DRVTIMER_CHANNEL ; 
;;;1472           }
;;;1473       }
;;;1474   }
00002e  4770              BX       lr
                  |L10.48|
000030  4802              LDR      r0,|L10.60|
000032  e7fc              B        |L10.46|
;;;1475   
                          ENDP

                  |L10.52|
                          DCD      CH_OFFSET
                  |L10.56|
                          DCD      0x40010000
                  |L10.60|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_DisableCounterDebounce||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableCounterDebounce PROC
;;;1775   /*---------------------------------------------------------------------------------------------------------*/
;;;1776   int32_t DrvTIMER_DisableCounterDebounce(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1777   {
;;;1778   	TIMER_T * tTMR;
;;;1779   
;;;1780      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L11.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L11.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L11.24|
00000e  2903              CMP      r1,#3
000010  d10e              BNE      |L11.48|
000012  e002              B        |L11.26|
                  |L11.20|
;;;1781       {
;;;1782           case E_TMR0:
;;;1783           case E_TMR1:
000014  bf00              NOP      
                  |L11.22|
;;;1784           case E_TMR2:
000016  bf00              NOP      
                  |L11.24|
;;;1785   		case E_TMR3:
000018  bf00              NOP      
                  |L11.26|
;;;1786           {
;;;1787           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b05              LDR      r3,|L11.52|
00001e  5818              LDR      r0,[r3,r0]
000020  4b05              LDR      r3,|L11.56|
000022  18c2              ADDS     r2,r0,r3
;;;1788               tTMR->TEXCON.TCDB = 0;
000024  6950              LDR      r0,[r2,#0x14]
000026  2380              MOVS     r3,#0x80
000028  4398              BICS     r0,r0,r3
00002a  6150              STR      r0,[r2,#0x14]
;;;1789               return E_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L11.46|
;;;1790           }
;;;1791   
;;;1792           default:
;;;1793           {
;;;1794               return E_DRVTIMER_CHANNEL ; 
;;;1795           }
;;;1796       }
;;;1797   }
00002e  4770              BX       lr
                  |L11.48|
000030  4802              LDR      r0,|L11.60|
000032  e7fc              B        |L11.46|
;;;1798   
                          ENDP

                  |L11.52|
                          DCD      CH_OFFSET
                  |L11.56|
                          DCD      0x40010000
                  |L11.60|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_DisableInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_DisableInt PROC
;;;780    /*---------------------------------------------------------------------------------------------------------*/
;;;781    int32_t DrvTIMER_DisableInt(E_TIMER_CHANNEL ch)
000000  b570              PUSH     {r4-r6,lr}
;;;782    {
000002  4604              MOV      r4,r0
;;;783    	TIMER_T * tTMR;
;;;784    
;;;785       	switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L12.22|
000008  2c01              CMP      r4,#1
00000a  d005              BEQ      |L12.24|
00000c  2c02              CMP      r4,#2
00000e  d004              BEQ      |L12.26|
000010  2c03              CMP      r4,#3
000012  d113              BNE      |L12.60|
000014  e002              B        |L12.28|
                  |L12.22|
;;;786        {
;;;787            case E_TMR0:
;;;788            case E_TMR1:
000016  bf00              NOP      
                  |L12.24|
;;;789            case E_TMR2:
000018  bf00              NOP      
                  |L12.26|
;;;790    		case E_TMR3:
00001a  bf00              NOP      
                  |L12.28|
;;;791            {
;;;792            	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001c  00a0              LSLS     r0,r4,#2
00001e  4908              LDR      r1,|L12.64|
000020  5808              LDR      r0,[r1,r0]
000022  4908              LDR      r1,|L12.68|
000024  1845              ADDS     r5,r0,r1
;;;793                tTMR->TCSR.IE = 0;
000026  6828              LDR      r0,[r5,#0]
000028  0349              LSLS     r1,r1,#13
00002a  4388              BICS     r0,r0,r1
00002c  6028              STR      r0,[r5,#0]
;;;794    			NVIC_DisableIRQ((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch)); 
00002e  4621              MOV      r1,r4
000030  3108              ADDS     r1,r1,#8
000032  b248              SXTB     r0,r1
000034  f7fffffe          BL       NVIC_DisableIRQ
;;;795                return E_SUCCESS ;
000038  2000              MOVS     r0,#0
                  |L12.58|
;;;796            }
;;;797    
;;;798            default:
;;;799            {
;;;800                return E_DRVTIMER_CHANNEL ; 
;;;801            }
;;;802        }
;;;803    }
00003a  bd70              POP      {r4-r6,pc}
                  |L12.60|
00003c  4802              LDR      r0,|L12.72|
00003e  e7fc              B        |L12.58|
;;;804    
                          ENDP

                  |L12.64|
                          DCD      CH_OFFSET
                  |L12.68|
                          DCD      0x40010000
                  |L12.72|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableCapture||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableCapture PROC
;;;1488   /*---------------------------------------------------------------------------------------------------------*/
;;;1489   int32_t DrvTIMER_EnableCapture(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1490   {
;;;1491   	TIMER_T * tTMR;
;;;1492   
;;;1493      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L13.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L13.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L13.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L13.50|
000012  e002              B        |L13.26|
                  |L13.20|
;;;1494       {
;;;1495           case E_TMR0:
;;;1496           case E_TMR1:
000014  bf00              NOP      
                  |L13.22|
;;;1497           case E_TMR2:
000016  bf00              NOP      
                  |L13.24|
;;;1498   		case E_TMR3:
000018  bf00              NOP      
                  |L13.26|
;;;1499           {
;;;1500           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L13.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L13.60|
000022  18c2              ADDS     r2,r0,r3
;;;1501               tTMR->TEXCON.TEXEN = 1;
000024  6950              LDR      r0,[r2,#0x14]
000026  2308              MOVS     r3,#8
000028  4398              BICS     r0,r0,r3
00002a  3008              ADDS     r0,r0,#8
00002c  6150              STR      r0,[r2,#0x14]
;;;1502               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L13.48|
;;;1503           }
;;;1504   
;;;1505           default:
;;;1506           {
;;;1507               return E_DRVTIMER_CHANNEL ; 
;;;1508           }
;;;1509       }
;;;1510   }
000030  4770              BX       lr
                  |L13.50|
000032  4803              LDR      r0,|L13.64|
000034  e7fc              B        |L13.48|
;;;1511   
                          ENDP

000036  0000              DCW      0x0000
                  |L13.56|
                          DCD      CH_OFFSET
                  |L13.60|
                          DCD      0x40010000
                  |L13.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableCaptureDebounce||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableCaptureDebounce PROC
;;;1667   /*---------------------------------------------------------------------------------------------------------*/
;;;1668   int32_t DrvTIMER_EnableCaptureDebounce(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1669   {
;;;1670   	TIMER_T * tTMR;
;;;1671   
;;;1672      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L14.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L14.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L14.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L14.50|
000012  e002              B        |L14.26|
                  |L14.20|
;;;1673       {
;;;1674           case E_TMR0:
;;;1675           case E_TMR1:
000014  bf00              NOP      
                  |L14.22|
;;;1676           case E_TMR2:
000016  bf00              NOP      
                  |L14.24|
;;;1677   		case E_TMR3:
000018  bf00              NOP      
                  |L14.26|
;;;1678           {
;;;1679           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L14.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L14.60|
000022  18c2              ADDS     r2,r0,r3
;;;1680               tTMR->TEXCON.TEXDB = 1;
000024  6950              LDR      r0,[r2,#0x14]
000026  2340              MOVS     r3,#0x40
000028  4398              BICS     r0,r0,r3
00002a  3040              ADDS     r0,r0,#0x40
00002c  6150              STR      r0,[r2,#0x14]
;;;1681               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L14.48|
;;;1682           }
;;;1683   
;;;1684           default:
;;;1685           {
;;;1686               return E_DRVTIMER_CHANNEL ; 
;;;1687           }
;;;1688       }
;;;1689   }
000030  4770              BX       lr
                  |L14.50|
000032  4803              LDR      r0,|L14.64|
000034  e7fc              B        |L14.48|
;;;1690   
                          ENDP

000036  0000              DCW      0x0000
                  |L14.56|
                          DCD      CH_OFFSET
                  |L14.60|
                          DCD      0x40010000
                  |L14.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableCaptureInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableCaptureInt PROC
;;;1416   /*---------------------------------------------------------------------------------------------------------*/
;;;1417   int32_t DrvTIMER_EnableCaptureInt(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1418   {
;;;1419   	TIMER_T * tTMR;
;;;1420   
;;;1421      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L15.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L15.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L15.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L15.50|
000012  e002              B        |L15.26|
                  |L15.20|
;;;1422       {
;;;1423           case E_TMR0:
;;;1424           case E_TMR1:
000014  bf00              NOP      
                  |L15.22|
;;;1425           case E_TMR2:
000016  bf00              NOP      
                  |L15.24|
;;;1426   		case E_TMR3:
000018  bf00              NOP      
                  |L15.26|
;;;1427           {
;;;1428           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L15.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L15.60|
000022  18c2              ADDS     r2,r0,r3
;;;1429               tTMR->TEXCON.TEXIEN = 1;
000024  6950              LDR      r0,[r2,#0x14]
000026  2320              MOVS     r3,#0x20
000028  4398              BICS     r0,r0,r3
00002a  3020              ADDS     r0,r0,#0x20
00002c  6150              STR      r0,[r2,#0x14]
;;;1430               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L15.48|
;;;1431           }
;;;1432   
;;;1433           default:
;;;1434           {
;;;1435               return E_DRVTIMER_CHANNEL ; 
;;;1436           }
;;;1437       }
;;;1438   }
000030  4770              BX       lr
                  |L15.50|
000032  4803              LDR      r0,|L15.64|
000034  e7fc              B        |L15.48|
;;;1439   
                          ENDP

000036  0000              DCW      0x0000
                  |L15.56|
                          DCD      CH_OFFSET
                  |L15.60|
                          DCD      0x40010000
                  |L15.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableCounterDebounce||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableCounterDebounce PROC
;;;1739   /*---------------------------------------------------------------------------------------------------------*/
;;;1740   int32_t DrvTIMER_EnableCounterDebounce(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1741   {
;;;1742   	TIMER_T * tTMR;
;;;1743   
;;;1744      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L16.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L16.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L16.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L16.50|
000012  e002              B        |L16.26|
                  |L16.20|
;;;1745       {
;;;1746           case E_TMR0:
;;;1747           case E_TMR1:
000014  bf00              NOP      
                  |L16.22|
;;;1748           case E_TMR2:
000016  bf00              NOP      
                  |L16.24|
;;;1749   		case E_TMR3:
000018  bf00              NOP      
                  |L16.26|
;;;1750           {
;;;1751           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L16.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L16.60|
000022  18c2              ADDS     r2,r0,r3
;;;1752               tTMR->TEXCON.TCDB = 1;
000024  6950              LDR      r0,[r2,#0x14]
000026  2380              MOVS     r3,#0x80
000028  4398              BICS     r0,r0,r3
00002a  3080              ADDS     r0,r0,#0x80
00002c  6150              STR      r0,[r2,#0x14]
;;;1753               return E_SUCCESS;
00002e  2000              MOVS     r0,#0
                  |L16.48|
;;;1754           }
;;;1755   
;;;1756           default:
;;;1757           {
;;;1758               return E_DRVTIMER_CHANNEL ; 
;;;1759           }
;;;1760       }
;;;1761   }
000030  4770              BX       lr
                  |L16.50|
000032  4803              LDR      r0,|L16.64|
000034  e7fc              B        |L16.48|
;;;1762   
                          ENDP

000036  0000              DCW      0x0000
                  |L16.56|
                          DCD      CH_OFFSET
                  |L16.60|
                          DCD      0x40010000
                  |L16.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_EnableInt||, CODE, READONLY, ALIGN=2

                  DrvTIMER_EnableInt PROC
;;;743    /*---------------------------------------------------------------------------------------------------------*/
;;;744    int32_t DrvTIMER_EnableInt(E_TIMER_CHANNEL ch)
000000  b570              PUSH     {r4-r6,lr}
;;;745    {
000002  4604              MOV      r4,r0
;;;746    	TIMER_T * tTMR;
;;;747    
;;;748       	switch (ch)
000004  2c00              CMP      r4,#0
000006  d006              BEQ      |L17.22|
000008  2c01              CMP      r4,#1
00000a  d005              BEQ      |L17.24|
00000c  2c02              CMP      r4,#2
00000e  d004              BEQ      |L17.26|
000010  2c03              CMP      r4,#3
000012  d11a              BNE      |L17.74|
000014  e002              B        |L17.28|
                  |L17.22|
;;;749        {
;;;750            case E_TMR0:
;;;751            case E_TMR1:
000016  bf00              NOP      
                  |L17.24|
;;;752            case E_TMR2:
000018  bf00              NOP      
                  |L17.26|
;;;753    		case E_TMR3:
00001a  bf00              NOP      
                  |L17.28|
;;;754            {
;;;755            	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001c  00a0              LSLS     r0,r4,#2
00001e  490c              LDR      r1,|L17.80|
000020  5808              LDR      r0,[r1,r0]
000022  490c              LDR      r1,|L17.84|
000024  1845              ADDS     r5,r0,r1
;;;756                tTMR->TCSR.IE = 1;
000026  6828              LDR      r0,[r5,#0]
000028  0349              LSLS     r1,r1,#13
00002a  4388              BICS     r0,r0,r1
00002c  1840              ADDS     r0,r0,r1
00002e  6028              STR      r0,[r5,#0]
;;;757                NVIC_SetPriority((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch), (1<<__NVIC_PRIO_BITS) - 2);
000030  4621              MOV      r1,r4
000032  3108              ADDS     r1,r1,#8
000034  b248              SXTB     r0,r1
000036  2102              MOVS     r1,#2
000038  f7fffffe          BL       NVIC_SetPriority
;;;758    			NVIC_EnableIRQ((IRQn_Type)((uint32_t)TMR0_IRQn + (uint32_t)ch)); 
00003c  4621              MOV      r1,r4
00003e  3108              ADDS     r1,r1,#8
000040  b248              SXTB     r0,r1
000042  f7fffffe          BL       NVIC_EnableIRQ
;;;759                return E_SUCCESS ;
000046  2000              MOVS     r0,#0
                  |L17.72|
;;;760            }
;;;761    
;;;762            default:
;;;763            {
;;;764                return E_DRVTIMER_CHANNEL ; 
;;;765            }
;;;766        }
;;;767    }
000048  bd70              POP      {r4-r6,pc}
                  |L17.74|
00004a  4803              LDR      r0,|L17.88|
00004c  e7fc              B        |L17.72|
;;;768    
                          ENDP

00004e  0000              DCW      0x0000
                  |L17.80|
                          DCD      CH_OFFSET
                  |L17.84|
                          DCD      0x40010000
                  |L17.88|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetCaptureData||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetCaptureData PROC
;;;1561   /*---------------------------------------------------------------------------------------------------------*/
;;;1562   uint32_t DrvTIMER_GetCaptureData(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1563   {
;;;1564   	TIMER_T * tTMR;
;;;1565   
;;;1566      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L18.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L18.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L18.24|
00000e  2903              CMP      r1,#3
000010  d10a              BNE      |L18.40|
000012  e002              B        |L18.26|
                  |L18.20|
;;;1567       {
;;;1568           case E_TMR0:
;;;1569           case E_TMR1:
000014  bf00              NOP      
                  |L18.22|
;;;1570           case E_TMR2:
000016  bf00              NOP      
                  |L18.24|
;;;1571   		case E_TMR3:
000018  bf00              NOP      
                  |L18.26|
;;;1572           {
;;;1573           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b03              LDR      r3,|L18.44|
00001e  5818              LDR      r0,[r3,r0]
000020  4b03              LDR      r3,|L18.48|
000022  18c2              ADDS     r2,r0,r3
;;;1574               return tTMR->TCAP;
000024  6910              LDR      r0,[r2,#0x10]
                  |L18.38|
;;;1575           }
;;;1576   
;;;1577           default:
;;;1578           {
;;;1579               return E_DRVTIMER_CHANNEL ; 
;;;1580           }
;;;1581       }
;;;1582   }
000026  4770              BX       lr
                  |L18.40|
000028  4802              LDR      r0,|L18.52|
00002a  e7fc              B        |L18.38|
;;;1583   
                          ENDP

                  |L18.44|
                          DCD      CH_OFFSET
                  |L18.48|
                          DCD      0x40010000
                  |L18.52|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetCaptureIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetCaptureIntFlag PROC
;;;1596   /*---------------------------------------------------------------------------------------------------------*/
;;;1597   int32_t DrvTIMER_GetCaptureIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1598   {
;;;1599   	TIMER_T * tTMR;
;;;1600   
;;;1601      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L19.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L19.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L19.24|
00000e  2903              CMP      r1,#3
000010  d10c              BNE      |L19.44|
000012  e002              B        |L19.26|
                  |L19.20|
;;;1602       {
;;;1603           case E_TMR0:
;;;1604           case E_TMR1:
000014  bf00              NOP      
                  |L19.22|
;;;1605           case E_TMR2:
000016  bf00              NOP      
                  |L19.24|
;;;1606   		case E_TMR3:
000018  bf00              NOP      
                  |L19.26|
;;;1607           {
;;;1608           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b04              LDR      r3,|L19.48|
00001e  5818              LDR      r0,[r3,r0]
000020  4b04              LDR      r3,|L19.52|
000022  18c2              ADDS     r2,r0,r3
;;;1609               return tTMR->TEXISR.TEXIF;
000024  6990              LDR      r0,[r2,#0x18]
000026  07c0              LSLS     r0,r0,#31
000028  0fc0              LSRS     r0,r0,#31
                  |L19.42|
;;;1610           }
;;;1611   
;;;1612           default:
;;;1613           {
;;;1614               return E_DRVTIMER_CHANNEL ; 
;;;1615           }
;;;1616       }
;;;1617   }
00002a  4770              BX       lr
                  |L19.44|
00002c  4802              LDR      r0,|L19.56|
00002e  e7fc              B        |L19.42|
;;;1618   
                          ENDP

                  |L19.48|
                          DCD      CH_OFFSET
                  |L19.52|
                          DCD      0x40010000
                  |L19.56|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetCounters||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetCounters PROC
;;;1216   /*---------------------------------------------------------------------------------------------------------*/
;;;1217   uint32_t DrvTIMER_GetCounters(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;1218   {
;;;1219   	TIMER_T * tTMR;
;;;1220   
;;;1221      	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L20.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L20.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L20.24|
00000e  2903              CMP      r1,#3
000010  d10a              BNE      |L20.40|
000012  e002              B        |L20.26|
                  |L20.20|
;;;1222       {
;;;1223           case E_TMR0:
;;;1224           case E_TMR1:
000014  bf00              NOP      
                  |L20.22|
;;;1225           case E_TMR2:
000016  bf00              NOP      
                  |L20.24|
;;;1226   		case E_TMR3:
000018  bf00              NOP      
                  |L20.26|
;;;1227           {
;;;1228           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b03              LDR      r3,|L20.44|
00001e  5818              LDR      r0,[r3,r0]
000020  4b03              LDR      r3,|L20.48|
000022  18c2              ADDS     r2,r0,r3
;;;1229               return tTMR->TDR;
000024  68d0              LDR      r0,[r2,#0xc]
                  |L20.38|
;;;1230           }
;;;1231   
;;;1232           default:
;;;1233           {
;;;1234               return E_DRVTIMER_CHANNEL ; 
;;;1235           }
;;;1236       }
;;;1237   }
000026  4770              BX       lr
                  |L20.40|
000028  4802              LDR      r0,|L20.52|
00002a  e7fc              B        |L20.38|
;;;1238   
                          ENDP

                  |L20.44|
                          DCD      CH_OFFSET
                  |L20.48|
                          DCD      0x40010000
                  |L20.52|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetIntFlag||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetIntFlag PROC
;;;816    /*---------------------------------------------------------------------------------------------------------*/
;;;817    int32_t DrvTIMER_GetIntFlag(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;818    {
;;;819    	if (ch == E_TMR0 )
000002  2900              CMP      r1,#0
000004  d104              BNE      |L21.16|
;;;820    		return TIMER0->TISR.TIF;
000006  480d              LDR      r0,|L21.60|
000008  6880              LDR      r0,[r0,#8]
00000a  07c0              LSLS     r0,r0,#31
00000c  0fc0              LSRS     r0,r0,#31
                  |L21.14|
;;;821    	else if(ch == E_TMR1 ) 
;;;822    		return TIMER1->TISR.TIF;
;;;823    	else if(ch == E_TMR2 )
;;;824    		return TIMER2->TISR.TIF;
;;;825    	else if(ch == E_TMR3 )
;;;826    		return TIMER3->TISR.TIF;
;;;827    	else 
;;;828        	return E_DRVTIMER_CHANNEL;
;;;829    }
00000e  4770              BX       lr
                  |L21.16|
000010  2901              CMP      r1,#1                 ;821
000012  d103              BNE      |L21.28|
000014  4809              LDR      r0,|L21.60|
000016  6a80              LDR      r0,[r0,#0x28]         ;822
000018  4008              ANDS     r0,r0,r1              ;822
00001a  e7f8              B        |L21.14|
                  |L21.28|
00001c  2902              CMP      r1,#2                 ;823
00001e  d104              BNE      |L21.42|
000020  4807              LDR      r0,|L21.64|
000022  6880              LDR      r0,[r0,#8]            ;824
000024  07c0              LSLS     r0,r0,#31             ;824
000026  0fc0              LSRS     r0,r0,#31             ;824
000028  e7f1              B        |L21.14|
                  |L21.42|
00002a  2903              CMP      r1,#3                 ;825
00002c  d104              BNE      |L21.56|
00002e  4804              LDR      r0,|L21.64|
000030  6a80              LDR      r0,[r0,#0x28]         ;826
000032  07c0              LSLS     r0,r0,#31             ;826
000034  0fc0              LSRS     r0,r0,#31             ;826
000036  e7ea              B        |L21.14|
                  |L21.56|
000038  4802              LDR      r0,|L21.68|
00003a  e7e8              B        |L21.14|
;;;830    
                          ENDP

                  |L21.60|
                          DCD      0x40010000
                  |L21.64|
                          DCD      0x40110000
                  |L21.68|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetIntTicks||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetIntTicks PROC
;;;907    /*---------------------------------------------------------------------------------------------------------*/
;;;908    uint32_t DrvTIMER_GetIntTicks(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;909    {
;;;910        switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L22.20|
000006  2901              CMP      r1,#1
000008  d007              BEQ      |L22.26|
00000a  2902              CMP      r1,#2
00000c  d008              BEQ      |L22.32|
00000e  2903              CMP      r1,#3
000010  d10c              BNE      |L22.44|
000012  e008              B        |L22.38|
                  |L22.20|
;;;911        {
;;;912            case E_TMR0:
;;;913            {
;;;914                return uTimer0Tick;  
000014  4806              LDR      r0,|L22.48|
000016  6800              LDR      r0,[r0,#0]  ; uTimer0Tick
                  |L22.24|
;;;915            }
;;;916    
;;;917            case E_TMR1:
;;;918            {
;;;919                return uTimer1Tick;
;;;920            }   
;;;921    
;;;922            case E_TMR2:
;;;923            {
;;;924                return uTimer2Tick;
;;;925            }
;;;926    
;;;927            case E_TMR3:
;;;928            {
;;;929                return uTimer3Tick;
;;;930            }
;;;931    
;;;932            default:
;;;933            {
;;;934                return E_DRVTIMER_CHANNEL;
;;;935            }
;;;936        }
;;;937    }
000018  4770              BX       lr
                  |L22.26|
00001a  4806              LDR      r0,|L22.52|
00001c  6800              LDR      r0,[r0,#0]            ;919  ; uTimer1Tick
00001e  e7fb              B        |L22.24|
                  |L22.32|
000020  4805              LDR      r0,|L22.56|
000022  6800              LDR      r0,[r0,#0]            ;924  ; uTimer2Tick
000024  e7f8              B        |L22.24|
                  |L22.38|
000026  4805              LDR      r0,|L22.60|
000028  6800              LDR      r0,[r0,#0]            ;929  ; uTimer3Tick
00002a  e7f5              B        |L22.24|
                  |L22.44|
00002c  4804              LDR      r0,|L22.64|
00002e  e7f3              B        |L22.24|
;;;938    
                          ENDP

                  |L22.48|
                          DCD      uTimer0Tick
                  |L22.52|
                          DCD      uTimer1Tick
                  |L22.56|
                          DCD      uTimer2Tick
                  |L22.60|
                          DCD      uTimer3Tick
                  |L22.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_GetVersion||, CODE, READONLY, ALIGN=2

                  DrvTIMER_GetVersion PROC
;;;1848   /*---------------------------------------------------------------------------------------------------------*/
;;;1849   uint32_t DrvTIMER_GetVersion(void)
000000  4800              LDR      r0,|L23.4|
;;;1850   {
;;;1851       return DRVTIMER_VERSION_NUM;
;;;1852   }
000002  4770              BX       lr
;;;1853   
                          ENDP

                  |L23.4|
                          DCD      0x00010405

                          AREA ||i.DrvTIMER_Init||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Init PROC
;;;286    /*---------------------------------------------------------------------------------------------------------*/
;;;287    void DrvTIMER_Init(void)
000000  2001              MOVS     r0,#1
;;;288    {
;;;289        bIsTimer0Initial    = TRUE;
000002  4904              LDR      r1,|L24.20|
000004  6008              STR      r0,[r1,#0]  ; bIsTimer0Initial
;;;290        bIsTimer1Initial    = TRUE;
000006  4904              LDR      r1,|L24.24|
000008  6008              STR      r0,[r1,#0]  ; bIsTimer1Initial
;;;291        bIsTimer2Initial    = TRUE;
00000a  4904              LDR      r1,|L24.28|
00000c  6008              STR      r0,[r1,#0]  ; bIsTimer2Initial
;;;292        bIsTimer3Initial    = TRUE;
00000e  4904              LDR      r1,|L24.32|
000010  6008              STR      r0,[r1,#0]  ; bIsTimer3Initial
;;;293    }
000012  4770              BX       lr
;;;294    
                          ENDP

                  |L24.20|
                          DCD      bIsTimer0Initial
                  |L24.24|
                          DCD      bIsTimer1Initial
                  |L24.28|
                          DCD      bIsTimer2Initial
                  |L24.32|
                          DCD      bIsTimer3Initial

                          AREA ||i.DrvTIMER_Open||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Open PROC
;;;311    /*---------------------------------------------------------------------------------------------------------*/
;;;312    int32_t DrvTIMER_Open(E_TIMER_CHANNEL ch, uint32_t uTicksPerSecond, E_TIMER_OPMODE op_mode)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;313    {
000002  b082              SUB      sp,sp,#8
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;314        uint32_t i;
;;;315        uint32_t uRegTcmpr, uRegTcr = 0x0;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;316    
;;;317        switch (ch)
00000c  9802              LDR      r0,[sp,#8]
00000e  2800              CMP      r0,#0
000010  d006              BEQ      |L25.32|
000012  2801              CMP      r0,#1
000014  d04b              BEQ      |L25.174|
000016  2802              CMP      r0,#2
000018  d07e              BEQ      |L25.280|
00001a  2803              CMP      r0,#3
00001c  d17d              BNE      |L25.282|
00001e  e0d5              B        |L25.460|
                  |L25.32|
;;;318        {
;;;319            case E_TMR0:
;;;320            {
;;;321                if ((bIsTimer0Initial != TRUE) || (bIsTimer0Used != FALSE))
000020  489c              LDR      r0,|L25.660|
000022  6800              LDR      r0,[r0,#0]  ; bIsTimer0Initial
000024  2801              CMP      r0,#1
000026  d103              BNE      |L25.48|
000028  489b              LDR      r0,|L25.664|
00002a  6800              LDR      r0,[r0,#0]  ; bIsTimer0Used
00002c  2800              CMP      r0,#0
00002e  d002              BEQ      |L25.54|
                  |L25.48|
;;;322                    return E_DRVTIMER_EIO;
000030  489a              LDR      r0,|L25.668|
                  |L25.50|
;;;323                
;;;324                bIsTimer0Used = TRUE;
;;;325               
;;;326                SYSCLK->APBCLK.TMR0_EN = 1;
;;;327                                                                  
;;;328                outpw((uint32_t)&TIMER0->TCSR, 0);                  /* disable timer */
;;;329               
;;;330                TIMER0->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;331                                   
;;;332                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;333                {
;;;334                    tTime0Event[i].active = FALSE;
;;;335                }
;;;336    
;;;337                uTimer0Tick = 0;            
;;;338                _sys_uTimer0TickPerSecond = uTicksPerSecond;
;;;339                        
;;;340                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR0), uTicksPerSecond); 
;;;341                if (uRegTcmpr == (uint32_t)-1)      
;;;342                {
;;;343                    return E_DRVTIMER_CLOCK_RATE;           
;;;344                }
;;;345    
;;;346                TIMER0->TCMPR = (uRegTcmpr << 8) >> 8;
;;;347                outpw((uint32_t)&TIMER0->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));               
;;;348                break;
;;;349            }
;;;350    
;;;351            case E_TMR1:
;;;352            {
;;;353                if ((bIsTimer1Initial != TRUE) || (bIsTimer1Used != FALSE))
;;;354                    return E_DRVTIMER_EIO;
;;;355    
;;;356                bIsTimer1Used = TRUE;
;;;357    
;;;358                SYSCLK->APBCLK.TMR1_EN = 1;
;;;359                
;;;360                outpw((uint32_t)&TIMER1->TCSR, 0);                  /* disable timer */
;;;361                
;;;362                TIMER1->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;363    
;;;364                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;365                {
;;;366                    tTime1Event[i].active = FALSE;
;;;367                }
;;;368    
;;;369                uTimer1Tick = 0;
;;;370                _sys_uTimer1TickPerSecond = uTicksPerSecond;
;;;371    
;;;372                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR1), uTicksPerSecond); 
;;;373                if(uRegTcmpr == (uint32_t)-1)       
;;;374                {
;;;375                    return E_DRVTIMER_CLOCK_RATE;           
;;;376                }
;;;377    
;;;378                TIMER1->TCMPR = (uRegTcmpr << 8) >> 8;
;;;379                outpw((uint32_t)&TIMER1->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   
;;;380                break;
;;;381            }
;;;382    
;;;383            case E_TMR2:
;;;384            {
;;;385                if ((bIsTimer2Initial != TRUE) || (bIsTimer2Used != FALSE))
;;;386                    return E_DRVTIMER_EIO;    
;;;387    
;;;388                bIsTimer2Used = TRUE;
;;;389    
;;;390                SYSCLK->APBCLK.TMR2_EN =1;
;;;391                
;;;392                outpw((uint32_t)&TIMER2->TCSR, 0);                  /* disable timer */
;;;393    
;;;394                TIMER2->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;395    
;;;396                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;397                {
;;;398                    tTime2Event[i].active = FALSE;
;;;399                }
;;;400    
;;;401                uTimer2Tick = 0;
;;;402                _sys_uTimer2TickPerSecond = uTicksPerSecond;
;;;403    
;;;404                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR2), uTicksPerSecond); 
;;;405                if(uRegTcmpr == (uint32_t)-1)       
;;;406                {
;;;407                    return E_DRVTIMER_CLOCK_RATE;           
;;;408                }
;;;409    
;;;410                TIMER2->TCMPR = (uRegTcmpr << 8) >> 8;  
;;;411                outpw((uint32_t)&TIMER2->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));   
;;;412                break;
;;;413            }
;;;414    
;;;415            case E_TMR3:
;;;416            {
;;;417                if ((bIsTimer3Initial != TRUE) || (bIsTimer3Used != FALSE))
;;;418                    return E_DRVTIMER_EIO;
;;;419    
;;;420                bIsTimer3Used = TRUE;
;;;421    
;;;422                SYSCLK->APBCLK.TMR3_EN = 1;
;;;423    
;;;424                outpw((uint32_t)&TIMER3->TCSR, 0);                  /* disable timer */
;;;425    
;;;426                TIMER3->TISR.TIF = 1;                               /* write 1 to clear for safty */
;;;427    
;;;428                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;429                {
;;;430                    tTime3Event[i].active = FALSE;
;;;431                }
;;;432    
;;;433                uTimer3Tick = 0;
;;;434                _sys_uTimer3TickPerSecond = uTicksPerSecond;
;;;435                
;;;436                uRegTcmpr = CalTimerInitValue(GetTimerClock(E_TMR3), uTicksPerSecond); 
;;;437                if(uRegTcmpr == (uint32_t)-1)       
;;;438                {
;;;439                    return E_DRVTIMER_CLOCK_RATE;           
;;;440                }
;;;441    
;;;442                TIMER3->TCMPR = (uRegTcmpr << 8) >> 8;
;;;443                outpw((uint32_t)&TIMER3->TCSR,  (uRegTcr|(uRegTcmpr>>24))|(op_mode<<27));    
;;;444                break;
;;;445            }
;;;446    
;;;447            default:
;;;448            {
;;;449                return E_DRVTIMER_CHANNEL ;
;;;450            }
;;;451        }
;;;452    
;;;453       	if (op_mode == E_TOGGLE_MODE)
;;;454        {
;;;455            switch (ch)
;;;456            {
;;;457                case E_TMR0:
;;;458                case E_TMR1:
;;;459                case E_TMR2:
;;;460        		case E_TMR3:
;;;461                {
;;;462    		    	DrvGPIO_InitFunction((E_DRVGPIO_FUNC)((uint32_t)E_FUNC_TMR0 + (uint32_t)ch));	
;;;463                }
;;;464        
;;;465                default:
;;;466                {
;;;467                    return E_DRVTIMER_CHANNEL ; 
;;;468                }
;;;469            }
;;;470        }
;;;471    
;;;472        return E_SUCCESS;
;;;473    }
000032  b005              ADD      sp,sp,#0x14
000034  bdf0              POP      {r4-r7,pc}
                  |L25.54|
000036  2001              MOVS     r0,#1                 ;324
000038  4997              LDR      r1,|L25.664|
00003a  6008              STR      r0,[r1,#0]            ;324  ; bIsTimer0Used
00003c  4898              LDR      r0,|L25.672|
00003e  6880              LDR      r0,[r0,#8]            ;326
000040  2104              MOVS     r1,#4                 ;326
000042  4388              BICS     r0,r0,r1              ;326
000044  1d00              ADDS     r0,r0,#4              ;326
000046  4996              LDR      r1,|L25.672|
000048  6088              STR      r0,[r1,#8]            ;326
00004a  2000              MOVS     r0,#0                 ;328
00004c  4995              LDR      r1,|L25.676|
00004e  6008              STR      r0,[r1,#0]            ;328
000050  4608              MOV      r0,r1                 ;330
000052  6880              LDR      r0,[r0,#8]            ;330
000054  0840              LSRS     r0,r0,#1              ;330
000056  0040              LSLS     r0,r0,#1              ;330
000058  1c40              ADDS     r0,r0,#1              ;330
00005a  6088              STR      r0,[r1,#8]            ;330
00005c  2500              MOVS     r5,#0                 ;332
00005e  e005              B        |L25.108|
                  |L25.96|
000060  2100              MOVS     r1,#0                 ;334
000062  2014              MOVS     r0,#0x14              ;334
000064  4368              MULS     r0,r5,r0              ;334
000066  4a90              LDR      r2,|L25.680|
000068  5011              STR      r1,[r2,r0]            ;334
00006a  1c6d              ADDS     r5,r5,#1              ;332
                  |L25.108|
00006c  2d00              CMP      r5,#0                 ;332
00006e  d0f7              BEQ      |L25.96|
000070  2000              MOVS     r0,#0                 ;337
000072  498e              LDR      r1,|L25.684|
000074  6008              STR      r0,[r1,#0]            ;337  ; uTimer0Tick
000076  488e              LDR      r0,|L25.688|
000078  6007              STR      r7,[r0,#0]            ;338  ; _sys_uTimer0TickPerSecond
00007a  2000              MOVS     r0,#0                 ;340
00007c  f7fffffe          BL       GetTimerClock
000080  4639              MOV      r1,r7                 ;340
000082  9000              STR      r0,[sp,#0]            ;340
000084  f7fffffe          BL       CalTimerInitValue
000088  4604              MOV      r4,r0                 ;340
00008a  1c60              ADDS     r0,r4,#1              ;341
00008c  2800              CMP      r0,#0                 ;341
00008e  d102              BNE      |L25.150|
000090  4882              LDR      r0,|L25.668|
000092  1e40              SUBS     r0,r0,#1              ;343
000094  e7cd              B        |L25.50|
                  |L25.150|
000096  0220              LSLS     r0,r4,#8              ;346
000098  0a00              LSRS     r0,r0,#8              ;346
00009a  4982              LDR      r1,|L25.676|
00009c  6048              STR      r0,[r1,#4]            ;346
00009e  0e20              LSRS     r0,r4,#24             ;347
0000a0  9901              LDR      r1,[sp,#4]            ;347
0000a2  4308              ORRS     r0,r0,r1              ;347
0000a4  06f1              LSLS     r1,r6,#27             ;347
0000a6  4308              ORRS     r0,r0,r1              ;347
0000a8  497e              LDR      r1,|L25.676|
0000aa  6008              STR      r0,[r1,#0]            ;347
0000ac  e0d7              B        |L25.606|
                  |L25.174|
0000ae  4881              LDR      r0,|L25.692|
0000b0  6800              LDR      r0,[r0,#0]            ;353  ; bIsTimer1Initial
0000b2  2801              CMP      r0,#1                 ;353
0000b4  d103              BNE      |L25.190|
0000b6  4880              LDR      r0,|L25.696|
0000b8  6800              LDR      r0,[r0,#0]            ;353  ; bIsTimer1Used
0000ba  2800              CMP      r0,#0                 ;353
0000bc  d001              BEQ      |L25.194|
                  |L25.190|
0000be  4877              LDR      r0,|L25.668|
0000c0  e7b7              B        |L25.50|
                  |L25.194|
0000c2  2001              MOVS     r0,#1                 ;356
0000c4  497c              LDR      r1,|L25.696|
0000c6  6008              STR      r0,[r1,#0]            ;356  ; bIsTimer1Used
0000c8  4875              LDR      r0,|L25.672|
0000ca  6880              LDR      r0,[r0,#8]            ;358
0000cc  2108              MOVS     r1,#8                 ;358
0000ce  4388              BICS     r0,r0,r1              ;358
0000d0  3008              ADDS     r0,r0,#8              ;358
0000d2  4973              LDR      r1,|L25.672|
0000d4  6088              STR      r0,[r1,#8]            ;358
0000d6  2000              MOVS     r0,#0                 ;360
0000d8  4972              LDR      r1,|L25.676|
0000da  6208              STR      r0,[r1,#0x20]         ;360
0000dc  4608              MOV      r0,r1                 ;362
0000de  6a80              LDR      r0,[r0,#0x28]         ;362
0000e0  0840              LSRS     r0,r0,#1              ;362
0000e2  0040              LSLS     r0,r0,#1              ;362
0000e4  1c40              ADDS     r0,r0,#1              ;362
0000e6  6288              STR      r0,[r1,#0x28]         ;362
0000e8  2500              MOVS     r5,#0                 ;364
0000ea  e005              B        |L25.248|
                  |L25.236|
0000ec  2100              MOVS     r1,#0                 ;366
0000ee  2014              MOVS     r0,#0x14              ;366
0000f0  4368              MULS     r0,r5,r0              ;366
0000f2  4a72              LDR      r2,|L25.700|
0000f4  5011              STR      r1,[r2,r0]            ;366
0000f6  1c6d              ADDS     r5,r5,#1              ;364
                  |L25.248|
0000f8  2d00              CMP      r5,#0                 ;364
0000fa  d0f7              BEQ      |L25.236|
0000fc  2000              MOVS     r0,#0                 ;369
0000fe  4970              LDR      r1,|L25.704|
000100  6008              STR      r0,[r1,#0]            ;369  ; uTimer1Tick
000102  4870              LDR      r0,|L25.708|
000104  6007              STR      r7,[r0,#0]            ;370  ; _sys_uTimer1TickPerSecond
000106  2001              MOVS     r0,#1                 ;372
000108  f7fffffe          BL       GetTimerClock
00010c  4639              MOV      r1,r7                 ;372
00010e  9000              STR      r0,[sp,#0]            ;372
000110  f7fffffe          BL       CalTimerInitValue
000114  4604              MOV      r4,r0                 ;372
000116  e001              B        |L25.284|
                  |L25.280|
000118  e012              B        |L25.320|
                  |L25.282|
00011a  e09d              B        |L25.600|
                  |L25.284|
00011c  1c60              ADDS     r0,r4,#1              ;373
00011e  2800              CMP      r0,#0                 ;373
000120  d102              BNE      |L25.296|
000122  485e              LDR      r0,|L25.668|
000124  1e40              SUBS     r0,r0,#1              ;375
000126  e784              B        |L25.50|
                  |L25.296|
000128  0220              LSLS     r0,r4,#8              ;378
00012a  0a00              LSRS     r0,r0,#8              ;378
00012c  495d              LDR      r1,|L25.676|
00012e  6248              STR      r0,[r1,#0x24]         ;378
000130  0e20              LSRS     r0,r4,#24             ;379
000132  9901              LDR      r1,[sp,#4]            ;379
000134  4308              ORRS     r0,r0,r1              ;379
000136  06f1              LSLS     r1,r6,#27             ;379
000138  4308              ORRS     r0,r0,r1              ;379
00013a  495a              LDR      r1,|L25.676|
00013c  6208              STR      r0,[r1,#0x20]         ;379
00013e  e08e              B        |L25.606|
                  |L25.320|
000140  4861              LDR      r0,|L25.712|
000142  6800              LDR      r0,[r0,#0]            ;385  ; bIsTimer2Initial
000144  2801              CMP      r0,#1                 ;385
000146  d103              BNE      |L25.336|
000148  4860              LDR      r0,|L25.716|
00014a  6800              LDR      r0,[r0,#0]            ;385  ; bIsTimer2Used
00014c  2800              CMP      r0,#0                 ;385
00014e  d001              BEQ      |L25.340|
                  |L25.336|
000150  4852              LDR      r0,|L25.668|
000152  e76e              B        |L25.50|
                  |L25.340|
000154  2001              MOVS     r0,#1                 ;388
000156  495d              LDR      r1,|L25.716|
000158  6008              STR      r0,[r1,#0]            ;388  ; bIsTimer2Used
00015a  4851              LDR      r0,|L25.672|
00015c  6880              LDR      r0,[r0,#8]            ;390
00015e  2110              MOVS     r1,#0x10              ;390
000160  4388              BICS     r0,r0,r1              ;390
000162  3010              ADDS     r0,r0,#0x10           ;390
000164  494e              LDR      r1,|L25.672|
000166  6088              STR      r0,[r1,#8]            ;390
000168  2000              MOVS     r0,#0                 ;392
00016a  4959              LDR      r1,|L25.720|
00016c  6008              STR      r0,[r1,#0]            ;392
00016e  4608              MOV      r0,r1                 ;394
000170  6880              LDR      r0,[r0,#8]            ;394
000172  0840              LSRS     r0,r0,#1              ;394
000174  0040              LSLS     r0,r0,#1              ;394
000176  1c40              ADDS     r0,r0,#1              ;394
000178  6088              STR      r0,[r1,#8]            ;394
00017a  2500              MOVS     r5,#0                 ;396
00017c  e005              B        |L25.394|
                  |L25.382|
00017e  2100              MOVS     r1,#0                 ;398
000180  2014              MOVS     r0,#0x14              ;398
000182  4368              MULS     r0,r5,r0              ;398
000184  4a53              LDR      r2,|L25.724|
000186  5011              STR      r1,[r2,r0]            ;398
000188  1c6d              ADDS     r5,r5,#1              ;396
                  |L25.394|
00018a  2d00              CMP      r5,#0                 ;396
00018c  d0f7              BEQ      |L25.382|
00018e  2000              MOVS     r0,#0                 ;401
000190  4951              LDR      r1,|L25.728|
000192  6008              STR      r0,[r1,#0]            ;401  ; uTimer2Tick
000194  4851              LDR      r0,|L25.732|
000196  6007              STR      r7,[r0,#0]            ;402  ; _sys_uTimer2TickPerSecond
000198  2002              MOVS     r0,#2                 ;404
00019a  f7fffffe          BL       GetTimerClock
00019e  4639              MOV      r1,r7                 ;404
0001a0  9000              STR      r0,[sp,#0]            ;404
0001a2  f7fffffe          BL       CalTimerInitValue
0001a6  4604              MOV      r4,r0                 ;404
0001a8  1c60              ADDS     r0,r4,#1              ;405
0001aa  2800              CMP      r0,#0                 ;405
0001ac  d102              BNE      |L25.436|
0001ae  483b              LDR      r0,|L25.668|
0001b0  1e40              SUBS     r0,r0,#1              ;407
0001b2  e73e              B        |L25.50|
                  |L25.436|
0001b4  0220              LSLS     r0,r4,#8              ;410
0001b6  0a00              LSRS     r0,r0,#8              ;410
0001b8  4945              LDR      r1,|L25.720|
0001ba  6048              STR      r0,[r1,#4]            ;410
0001bc  0e20              LSRS     r0,r4,#24             ;411
0001be  9901              LDR      r1,[sp,#4]            ;411
0001c0  4308              ORRS     r0,r0,r1              ;411
0001c2  06f1              LSLS     r1,r6,#27             ;411
0001c4  4308              ORRS     r0,r0,r1              ;411
0001c6  4942              LDR      r1,|L25.720|
0001c8  6008              STR      r0,[r1,#0]            ;411
0001ca  e048              B        |L25.606|
                  |L25.460|
0001cc  4844              LDR      r0,|L25.736|
0001ce  6800              LDR      r0,[r0,#0]            ;417  ; bIsTimer3Initial
0001d0  2801              CMP      r0,#1                 ;417
0001d2  d103              BNE      |L25.476|
0001d4  4843              LDR      r0,|L25.740|
0001d6  6800              LDR      r0,[r0,#0]            ;417  ; bIsTimer3Used
0001d8  2800              CMP      r0,#0                 ;417
0001da  d001              BEQ      |L25.480|
                  |L25.476|
0001dc  482f              LDR      r0,|L25.668|
0001de  e728              B        |L25.50|
                  |L25.480|
0001e0  2001              MOVS     r0,#1                 ;420
0001e2  4940              LDR      r1,|L25.740|
0001e4  6008              STR      r0,[r1,#0]            ;420  ; bIsTimer3Used
0001e6  482e              LDR      r0,|L25.672|
0001e8  6880              LDR      r0,[r0,#8]            ;422
0001ea  2120              MOVS     r1,#0x20              ;422
0001ec  4388              BICS     r0,r0,r1              ;422
0001ee  3020              ADDS     r0,r0,#0x20           ;422
0001f0  492b              LDR      r1,|L25.672|
0001f2  6088              STR      r0,[r1,#8]            ;422
0001f4  2000              MOVS     r0,#0                 ;424
0001f6  4936              LDR      r1,|L25.720|
0001f8  6208              STR      r0,[r1,#0x20]         ;424
0001fa  4608              MOV      r0,r1                 ;426
0001fc  6a80              LDR      r0,[r0,#0x28]         ;426
0001fe  0840              LSRS     r0,r0,#1              ;426
000200  0040              LSLS     r0,r0,#1              ;426
000202  1c40              ADDS     r0,r0,#1              ;426
000204  6288              STR      r0,[r1,#0x28]         ;426
000206  2500              MOVS     r5,#0                 ;428
000208  e005              B        |L25.534|
                  |L25.522|
00020a  2100              MOVS     r1,#0                 ;430
00020c  2014              MOVS     r0,#0x14              ;430
00020e  4368              MULS     r0,r5,r0              ;430
000210  4a35              LDR      r2,|L25.744|
000212  5011              STR      r1,[r2,r0]            ;430
000214  1c6d              ADDS     r5,r5,#1              ;428
                  |L25.534|
000216  2d00              CMP      r5,#0                 ;428
000218  d0f7              BEQ      |L25.522|
00021a  2000              MOVS     r0,#0                 ;433
00021c  4933              LDR      r1,|L25.748|
00021e  6008              STR      r0,[r1,#0]            ;433  ; uTimer3Tick
000220  4833              LDR      r0,|L25.752|
000222  6007              STR      r7,[r0,#0]            ;434  ; _sys_uTimer3TickPerSecond
000224  2003              MOVS     r0,#3                 ;436
000226  f7fffffe          BL       GetTimerClock
00022a  4639              MOV      r1,r7                 ;436
00022c  9000              STR      r0,[sp,#0]            ;436
00022e  f7fffffe          BL       CalTimerInitValue
000232  4604              MOV      r4,r0                 ;436
000234  1c60              ADDS     r0,r4,#1              ;437
000236  2800              CMP      r0,#0                 ;437
000238  d102              BNE      |L25.576|
00023a  4818              LDR      r0,|L25.668|
00023c  1e40              SUBS     r0,r0,#1              ;439
00023e  e6f8              B        |L25.50|
                  |L25.576|
000240  0220              LSLS     r0,r4,#8              ;442
000242  0a00              LSRS     r0,r0,#8              ;442
000244  4922              LDR      r1,|L25.720|
000246  6248              STR      r0,[r1,#0x24]         ;442
000248  0e20              LSRS     r0,r4,#24             ;443
00024a  9901              LDR      r1,[sp,#4]            ;443
00024c  4308              ORRS     r0,r0,r1              ;443
00024e  06f1              LSLS     r1,r6,#27             ;443
000250  4308              ORRS     r0,r0,r1              ;443
000252  491f              LDR      r1,|L25.720|
000254  6208              STR      r0,[r1,#0x20]         ;443
000256  e002              B        |L25.606|
                  |L25.600|
000258  4810              LDR      r0,|L25.668|
00025a  1e80              SUBS     r0,r0,#2              ;449
00025c  e6e9              B        |L25.50|
                  |L25.606|
00025e  bf00              NOP                            ;348
000260  2e02              CMP      r6,#2                 ;453
000262  d115              BNE      |L25.656|
000264  9802              LDR      r0,[sp,#8]            ;455
000266  2800              CMP      r0,#0                 ;455
000268  d006              BEQ      |L25.632|
00026a  2801              CMP      r0,#1                 ;455
00026c  d005              BEQ      |L25.634|
00026e  2802              CMP      r0,#2                 ;455
000270  d004              BEQ      |L25.636|
000272  2803              CMP      r0,#3                 ;455
000274  d109              BNE      |L25.650|
000276  e002              B        |L25.638|
                  |L25.632|
000278  bf00              NOP                            ;458
                  |L25.634|
00027a  bf00              NOP                            ;459
                  |L25.636|
00027c  bf00              NOP                            ;460
                  |L25.638|
00027e  9902              LDR      r1,[sp,#8]            ;462
000280  3121              ADDS     r1,r1,#0x21           ;462
000282  b2c8              UXTB     r0,r1                 ;462
000284  f7fffffe          BL       DrvGPIO_InitFunction
000288  bf00              NOP                            ;465
                  |L25.650|
00028a  4804              LDR      r0,|L25.668|
00028c  1e80              SUBS     r0,r0,#2              ;467
00028e  e6d0              B        |L25.50|
                  |L25.656|
000290  2000              MOVS     r0,#0                 ;472
000292  e6ce              B        |L25.50|
;;;474    
                          ENDP

                  |L25.660|
                          DCD      bIsTimer0Initial
                  |L25.664|
                          DCD      bIsTimer0Used
                  |L25.668|
                          DCD      0xffff9703
                  |L25.672|
                          DCD      0x50000200
                  |L25.676|
                          DCD      0x40010000
                  |L25.680|
                          DCD      tTime0Event
                  |L25.684|
                          DCD      uTimer0Tick
                  |L25.688|
                          DCD      _sys_uTimer0TickPerSecond
                  |L25.692|
                          DCD      bIsTimer1Initial
                  |L25.696|
                          DCD      bIsTimer1Used
                  |L25.700|
                          DCD      tTime1Event
                  |L25.704|
                          DCD      uTimer1Tick
                  |L25.708|
                          DCD      _sys_uTimer1TickPerSecond
                  |L25.712|
                          DCD      bIsTimer2Initial
                  |L25.716|
                          DCD      bIsTimer2Used
                  |L25.720|
                          DCD      0x40110000
                  |L25.724|
                          DCD      tTime2Event
                  |L25.728|
                          DCD      uTimer2Tick
                  |L25.732|
                          DCD      _sys_uTimer2TickPerSecond
                  |L25.736|
                          DCD      bIsTimer3Initial
                  |L25.740|
                          DCD      bIsTimer3Used
                  |L25.744|
                          DCD      tTime3Event
                  |L25.748|
                          DCD      uTimer3Tick
                  |L25.752|
                          DCD      _sys_uTimer3TickPerSecond

                          AREA ||i.DrvTIMER_OpenCapture||, CODE, READONLY, ALIGN=2

                  DrvTIMER_OpenCapture PROC
;;;1257   /*---------------------------------------------------------------------------------------------------------*/
;;;1258   int32_t DrvTIMER_OpenCapture(E_TIMER_CHANNEL ch, E_TIMER_RSTCAP_MODE mode)
000000  b570              PUSH     {r4-r6,lr}
;;;1259   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;1260   	TIMER_T * tTMR;
;;;1261   
;;;1262      	switch (ch)
000006  2c00              CMP      r4,#0
000008  d006              BEQ      |L26.24|
00000a  2c01              CMP      r4,#1
00000c  d005              BEQ      |L26.26|
00000e  2c02              CMP      r4,#2
000010  d004              BEQ      |L26.28|
000012  2c03              CMP      r4,#3
000014  d11c              BNE      |L26.80|
000016  e002              B        |L26.30|
                  |L26.24|
;;;1263       {
;;;1264           case E_TMR0:
;;;1265           case E_TMR1:
000018  bf00              NOP      
                  |L26.26|
;;;1266           case E_TMR2:
00001a  bf00              NOP      
                  |L26.28|
;;;1267   		case E_TMR3:
00001c  bf00              NOP      
                  |L26.30|
;;;1268           {
;;;1269               /* TIMER clock source should be set as HCLK */
;;;1270               DrvSYS_SelectIPClockSource((E_SYS_IP_CLKSRC)((uint32_t)E_SYS_TMR0_CLKSRC+(uint32_t)ch), 2);  
00001e  1ca1              ADDS     r1,r4,#2
000020  b2c8              UXTB     r0,r1
000022  2102              MOVS     r1,#2
000024  f7fffffe          BL       DrvSYS_SelectIPClockSource
;;;1271   
;;;1272               DrvGPIO_InitFunction((E_DRVGPIO_FUNC)((uint32_t)E_FUNC_T0EX + (uint32_t)ch));
000028  4621              MOV      r1,r4
00002a  3125              ADDS     r1,r1,#0x25
00002c  b2c8              UXTB     r0,r1
00002e  f7fffffe          BL       DrvGPIO_InitFunction
;;;1273           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
000032  00a0              LSLS     r0,r4,#2
000034  4907              LDR      r1,|L26.84|
000036  5808              LDR      r0,[r1,r0]
000038  4907              LDR      r1,|L26.88|
00003a  1845              ADDS     r5,r0,r1
;;;1274               tTMR->TEXCON.RSTCAPSEL = mode;
00003c  6968              LDR      r0,[r5,#0x14]
00003e  2110              MOVS     r1,#0x10
000040  4388              BICS     r0,r0,r1
000042  0131              LSLS     r1,r6,#4
000044  2210              MOVS     r2,#0x10
000046  4011              ANDS     r1,r1,r2
000048  4308              ORRS     r0,r0,r1
00004a  6168              STR      r0,[r5,#0x14]
;;;1275               return E_SUCCESS;
00004c  2000              MOVS     r0,#0
                  |L26.78|
;;;1276           }
;;;1277   
;;;1278           default:
;;;1279           {
;;;1280               return E_DRVTIMER_CHANNEL ; 
;;;1281           }
;;;1282       }
;;;1283   }
00004e  bd70              POP      {r4-r6,pc}
                  |L26.80|
000050  4802              LDR      r0,|L26.92|
000052  e7fc              B        |L26.78|
;;;1284   
                          ENDP

                  |L26.84|
                          DCD      CH_OFFSET
                  |L26.88|
                          DCD      0x40010000
                  |L26.92|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_OpenCounter||, CODE, READONLY, ALIGN=2

                  DrvTIMER_OpenCounter PROC
;;;1038   /*---------------------------------------------------------------------------------------------------------*/
;;;1039   int32_t DrvTIMER_OpenCounter(E_TIMER_CHANNEL ch, uint32_t uCounterBoundary, E_TIMER_OPMODE op_mode)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1040   {
000002  4606              MOV      r6,r0
000004  4617              MOV      r7,r2
;;;1041       uint32_t i;
;;;1042   	TIMER_T * tTMR;
;;;1043   
;;;1044       if ((bIsTimer0Initial == FALSE) || (bIsTimer1Initial == FALSE) || 
000006  4876              LDR      r0,|L27.480|
000008  6800              LDR      r0,[r0,#0]  ; bIsTimer0Initial
00000a  2800              CMP      r0,#0
00000c  d00b              BEQ      |L27.38|
00000e  4875              LDR      r0,|L27.484|
000010  6800              LDR      r0,[r0,#0]  ; bIsTimer1Initial
000012  2800              CMP      r0,#0
000014  d007              BEQ      |L27.38|
;;;1045           (bIsTimer2Initial == FALSE) || (bIsTimer3Initial == FALSE))
000016  4874              LDR      r0,|L27.488|
000018  6800              LDR      r0,[r0,#0]  ; bIsTimer2Initial
00001a  2800              CMP      r0,#0
00001c  d003              BEQ      |L27.38|
00001e  4873              LDR      r0,|L27.492|
000020  6800              LDR      r0,[r0,#0]  ; bIsTimer3Initial
000022  2800              CMP      r0,#0
000024  d101              BNE      |L27.42|
                  |L27.38|
;;;1046       {
;;;1047           return E_DRVTIMER_EIO;
000026  4872              LDR      r0,|L27.496|
                  |L27.40|
;;;1048       }
;;;1049   
;;;1050   	if (op_mode == E_TOGGLE_MODE)
;;;1051           return E_DRVTIMER_CHANNEL;
;;;1052   	switch (ch)
;;;1053       {
;;;1054           case E_TMR0:
;;;1055           {
;;;1056               if (bIsTimer0Used != FALSE)
;;;1057                   return E_DRVTIMER_EIO;
;;;1058               
;;;1059               bIsTimer0Used = TRUE;
;;;1060              
;;;1061    		   	SYSCLK->APBCLK.TMR0_EN = 1;
;;;1062   
;;;1063   			outpw((uint32_t)&TIMER0->TCSR ,0 );	/* Disable timer */
;;;1064   			
;;;1065              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1066               {
;;;1067                   tTime0Event[i].active = FALSE;
;;;1068               }
;;;1069               uTimer0Tick = 0;
;;;1070               break;
;;;1071           }
;;;1072   
;;;1073           case E_TMR1:
;;;1074           {
;;;1075               if (bIsTimer1Used != FALSE)
;;;1076                   return E_DRVTIMER_EIO;
;;;1077               				           
;;;1078               bIsTimer1Used = TRUE;
;;;1079              
;;;1080    		   	SYSCLK->APBCLK.TMR1_EN = 1;
;;;1081   
;;;1082   			outpw((uint32_t)&TIMER1->TCSR ,0 );	/* Disable timer */
;;;1083   
;;;1084              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1085               {
;;;1086                   tTime1Event[i].active = FALSE;
;;;1087               }
;;;1088               uTimer1Tick = 0;
;;;1089               break;
;;;1090           }
;;;1091   
;;;1092           case E_TMR2:
;;;1093           {
;;;1094               if (bIsTimer2Used != FALSE)
;;;1095                   return E_DRVTIMER_EIO;
;;;1096               					           
;;;1097               bIsTimer2Used = TRUE;
;;;1098              
;;;1099    		   	SYSCLK->APBCLK.TMR2_EN = 1;
;;;1100   
;;;1101   			outpw((uint32_t)&TIMER2->TCSR ,0 );	/* Disable timer */
;;;1102   
;;;1103              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1104               {
;;;1105                   tTime2Event[i].active = FALSE;
;;;1106               }
;;;1107               uTimer2Tick = 0;
;;;1108               break;
;;;1109           }
;;;1110   
;;;1111   		case E_TMR3:
;;;1112           {
;;;1113               if (bIsTimer3Used != FALSE)
;;;1114                   return E_DRVTIMER_EIO;
;;;1115               						           
;;;1116               bIsTimer3Used = TRUE;
;;;1117              
;;;1118    		   	SYSCLK->APBCLK.TMR3_EN = 1;
;;;1119   
;;;1120   			outpw((uint32_t)&TIMER3->TCSR ,0 );	/* Disable timer */
;;;1121   
;;;1122              	for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;1123               {
;;;1124                   tTime3Event[i].active = FALSE;
;;;1125               }
;;;1126         		uTimer3Tick = 0;
;;;1127               break;
;;;1128           }
;;;1129   
;;;1130           default:
;;;1131           {
;;;1132               return E_DRVTIMER_CHANNEL ; 
;;;1133           }
;;;1134       }
;;;1135   
;;;1136      	switch (ch)
;;;1137       {
;;;1138           case E_TMR0:
;;;1139           case E_TMR1:
;;;1140           case E_TMR2:
;;;1141           case E_TMR3:
;;;1142           {
;;;1143               /* TIMER clock source should be set as HCLK */
;;;1144               DrvSYS_SelectIPClockSource((E_SYS_IP_CLKSRC)((uint32_t)E_SYS_TMR0_CLKSRC+(uint32_t)ch), 2);  
;;;1145   
;;;1146   			DrvGPIO_InitFunction((E_DRVGPIO_FUNC)((uint32_t)E_FUNC_TMR0 + (uint32_t)ch));	/* Open external Timer Counter source */
;;;1147   
;;;1148   			tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);   
;;;1149   			tTMR->TISR.TIF      = 1;        /* Write 1 to clear for safty */			
;;;1150    			tTMR->TCSR.MODE     = op_mode;	/* Set operation mode */
;;;1151   			tTMR->TCMPR         = uCounterBoundary;
;;;1152   			tTMR->TCSR.PRESCALE = 0;
;;;1153   			tTMR->TCSR.TDR_EN 	= 1;	
;;;1154   			tTMR->TCSR.IE       = 0;	
;;;1155   			tTMR->TCSR.CTB      = 1;
;;;1156               break;			 
;;;1157           }
;;;1158       }
;;;1159   
;;;1160       return E_SUCCESS;
;;;1161   }
000028  bdfe              POP      {r1-r7,pc}
                  |L27.42|
00002a  2f02              CMP      r7,#2                 ;1050
00002c  d102              BNE      |L27.52|
00002e  4870              LDR      r0,|L27.496|
000030  1e80              SUBS     r0,r0,#2              ;1051
000032  e7f9              B        |L27.40|
                  |L27.52|
000034  2e00              CMP      r6,#0                 ;1052
000036  d006              BEQ      |L27.70|
000038  2e01              CMP      r6,#1                 ;1052
00003a  d025              BEQ      |L27.136|
00003c  2e02              CMP      r6,#2                 ;1052
00003e  d044              BEQ      |L27.202|
000040  2e03              CMP      r6,#3                 ;1052
000042  d178              BNE      |L27.310|
000044  e062              B        |L27.268|
                  |L27.70|
000046  486b              LDR      r0,|L27.500|
000048  6800              LDR      r0,[r0,#0]            ;1056  ; bIsTimer0Used
00004a  2800              CMP      r0,#0                 ;1056
00004c  d001              BEQ      |L27.82|
00004e  4868              LDR      r0,|L27.496|
000050  e7ea              B        |L27.40|
                  |L27.82|
000052  2001              MOVS     r0,#1                 ;1059
000054  4967              LDR      r1,|L27.500|
000056  6008              STR      r0,[r1,#0]            ;1059  ; bIsTimer0Used
000058  4867              LDR      r0,|L27.504|
00005a  6880              LDR      r0,[r0,#8]            ;1061
00005c  2104              MOVS     r1,#4                 ;1061
00005e  4388              BICS     r0,r0,r1              ;1061
000060  1d00              ADDS     r0,r0,#4              ;1061
000062  4965              LDR      r1,|L27.504|
000064  6088              STR      r0,[r1,#8]            ;1061
000066  2000              MOVS     r0,#0                 ;1063
000068  4964              LDR      r1,|L27.508|
00006a  6008              STR      r0,[r1,#0]            ;1063
00006c  2400              MOVS     r4,#0                 ;1065
00006e  e005              B        |L27.124|
                  |L27.112|
000070  2100              MOVS     r1,#0                 ;1067
000072  2014              MOVS     r0,#0x14              ;1067
000074  4360              MULS     r0,r4,r0              ;1067
000076  4a62              LDR      r2,|L27.512|
000078  5011              STR      r1,[r2,r0]            ;1067
00007a  1c64              ADDS     r4,r4,#1              ;1065
                  |L27.124|
00007c  2c00              CMP      r4,#0                 ;1065
00007e  d0f7              BEQ      |L27.112|
000080  2000              MOVS     r0,#0                 ;1069
000082  4960              LDR      r1,|L27.516|
000084  6008              STR      r0,[r1,#0]            ;1069  ; uTimer0Tick
000086  e066              B        |L27.342|
                  |L27.136|
000088  485f              LDR      r0,|L27.520|
00008a  6800              LDR      r0,[r0,#0]            ;1075  ; bIsTimer1Used
00008c  2800              CMP      r0,#0                 ;1075
00008e  d001              BEQ      |L27.148|
000090  4857              LDR      r0,|L27.496|
000092  e7c9              B        |L27.40|
                  |L27.148|
000094  2001              MOVS     r0,#1                 ;1078
000096  495c              LDR      r1,|L27.520|
000098  6008              STR      r0,[r1,#0]            ;1078  ; bIsTimer1Used
00009a  4857              LDR      r0,|L27.504|
00009c  6880              LDR      r0,[r0,#8]            ;1080
00009e  2108              MOVS     r1,#8                 ;1080
0000a0  4388              BICS     r0,r0,r1              ;1080
0000a2  3008              ADDS     r0,r0,#8              ;1080
0000a4  4954              LDR      r1,|L27.504|
0000a6  6088              STR      r0,[r1,#8]            ;1080
0000a8  2000              MOVS     r0,#0                 ;1082
0000aa  4954              LDR      r1,|L27.508|
0000ac  6208              STR      r0,[r1,#0x20]         ;1082
0000ae  2400              MOVS     r4,#0                 ;1084
0000b0  e005              B        |L27.190|
                  |L27.178|
0000b2  2100              MOVS     r1,#0                 ;1086
0000b4  2014              MOVS     r0,#0x14              ;1086
0000b6  4360              MULS     r0,r4,r0              ;1086
0000b8  4a54              LDR      r2,|L27.524|
0000ba  5011              STR      r1,[r2,r0]            ;1086
0000bc  1c64              ADDS     r4,r4,#1              ;1084
                  |L27.190|
0000be  2c00              CMP      r4,#0                 ;1084
0000c0  d0f7              BEQ      |L27.178|
0000c2  2000              MOVS     r0,#0                 ;1088
0000c4  4952              LDR      r1,|L27.528|
0000c6  6008              STR      r0,[r1,#0]            ;1088  ; uTimer1Tick
0000c8  e045              B        |L27.342|
                  |L27.202|
0000ca  4852              LDR      r0,|L27.532|
0000cc  6800              LDR      r0,[r0,#0]            ;1094  ; bIsTimer2Used
0000ce  2800              CMP      r0,#0                 ;1094
0000d0  d001              BEQ      |L27.214|
0000d2  4847              LDR      r0,|L27.496|
0000d4  e7a8              B        |L27.40|
                  |L27.214|
0000d6  2001              MOVS     r0,#1                 ;1097
0000d8  494e              LDR      r1,|L27.532|
0000da  6008              STR      r0,[r1,#0]            ;1097  ; bIsTimer2Used
0000dc  4846              LDR      r0,|L27.504|
0000de  6880              LDR      r0,[r0,#8]            ;1099
0000e0  2110              MOVS     r1,#0x10              ;1099
0000e2  4388              BICS     r0,r0,r1              ;1099
0000e4  3010              ADDS     r0,r0,#0x10           ;1099
0000e6  4944              LDR      r1,|L27.504|
0000e8  6088              STR      r0,[r1,#8]            ;1099
0000ea  2000              MOVS     r0,#0                 ;1101
0000ec  494a              LDR      r1,|L27.536|
0000ee  6008              STR      r0,[r1,#0]            ;1101
0000f0  2400              MOVS     r4,#0                 ;1103
0000f2  e005              B        |L27.256|
                  |L27.244|
0000f4  2100              MOVS     r1,#0                 ;1105
0000f6  2014              MOVS     r0,#0x14              ;1105
0000f8  4360              MULS     r0,r4,r0              ;1105
0000fa  4a48              LDR      r2,|L27.540|
0000fc  5011              STR      r1,[r2,r0]            ;1105
0000fe  1c64              ADDS     r4,r4,#1              ;1103
                  |L27.256|
000100  2c00              CMP      r4,#0                 ;1103
000102  d0f7              BEQ      |L27.244|
000104  2000              MOVS     r0,#0                 ;1107
000106  4946              LDR      r1,|L27.544|
000108  6008              STR      r0,[r1,#0]            ;1107  ; uTimer2Tick
00010a  e024              B        |L27.342|
                  |L27.268|
00010c  4845              LDR      r0,|L27.548|
00010e  6800              LDR      r0,[r0,#0]            ;1113  ; bIsTimer3Used
000110  2800              CMP      r0,#0                 ;1113
000112  d001              BEQ      |L27.280|
000114  4836              LDR      r0,|L27.496|
000116  e787              B        |L27.40|
                  |L27.280|
000118  2001              MOVS     r0,#1                 ;1116
00011a  4942              LDR      r1,|L27.548|
00011c  6008              STR      r0,[r1,#0]            ;1116  ; bIsTimer3Used
00011e  4836              LDR      r0,|L27.504|
000120  6880              LDR      r0,[r0,#8]            ;1118
000122  2120              MOVS     r1,#0x20              ;1118
000124  4388              BICS     r0,r0,r1              ;1118
000126  3020              ADDS     r0,r0,#0x20           ;1118
000128  4933              LDR      r1,|L27.504|
00012a  6088              STR      r0,[r1,#8]            ;1118
00012c  2000              MOVS     r0,#0                 ;1120
00012e  493a              LDR      r1,|L27.536|
000130  6208              STR      r0,[r1,#0x20]         ;1120
000132  2400              MOVS     r4,#0                 ;1122
000134  e006              B        |L27.324|
                  |L27.310|
000136  e00b              B        |L27.336|
                  |L27.312|
000138  2100              MOVS     r1,#0                 ;1124
00013a  2014              MOVS     r0,#0x14              ;1124
00013c  4360              MULS     r0,r4,r0              ;1124
00013e  4a3a              LDR      r2,|L27.552|
000140  5011              STR      r1,[r2,r0]            ;1124
000142  1c64              ADDS     r4,r4,#1              ;1122
                  |L27.324|
000144  2c00              CMP      r4,#0                 ;1122
000146  d0f7              BEQ      |L27.312|
000148  2000              MOVS     r0,#0                 ;1126
00014a  4938              LDR      r1,|L27.556|
00014c  6008              STR      r0,[r1,#0]            ;1126  ; uTimer3Tick
00014e  e002              B        |L27.342|
                  |L27.336|
000150  4827              LDR      r0,|L27.496|
000152  1e80              SUBS     r0,r0,#2              ;1132
000154  e768              B        |L27.40|
                  |L27.342|
000156  bf00              NOP                            ;1070
000158  2e00              CMP      r6,#0                 ;1136
00015a  d006              BEQ      |L27.362|
00015c  2e01              CMP      r6,#1                 ;1136
00015e  d005              BEQ      |L27.364|
000160  2e02              CMP      r6,#2                 ;1136
000162  d004              BEQ      |L27.366|
000164  2e03              CMP      r6,#3                 ;1136
000166  d137              BNE      |L27.472|
000168  e002              B        |L27.368|
                  |L27.362|
00016a  bf00              NOP                            ;1139
                  |L27.364|
00016c  bf00              NOP                            ;1140
                  |L27.366|
00016e  bf00              NOP                            ;1141
                  |L27.368|
000170  1cb1              ADDS     r1,r6,#2              ;1144
000172  b2c8              UXTB     r0,r1                 ;1144
000174  2102              MOVS     r1,#2                 ;1144
000176  f7fffffe          BL       DrvSYS_SelectIPClockSource
00017a  4631              MOV      r1,r6                 ;1146
00017c  3121              ADDS     r1,r1,#0x21           ;1146
00017e  b2c8              UXTB     r0,r1                 ;1146
000180  f7fffffe          BL       DrvGPIO_InitFunction
000184  00b0              LSLS     r0,r6,#2              ;1148
000186  492a              LDR      r1,|L27.560|
000188  5808              LDR      r0,[r1,r0]            ;1148
00018a  491c              LDR      r1,|L27.508|
00018c  1845              ADDS     r5,r0,r1              ;1148
00018e  68a8              LDR      r0,[r5,#8]            ;1149
000190  0840              LSRS     r0,r0,#1              ;1149
000192  0040              LSLS     r0,r0,#1              ;1149
000194  1c40              ADDS     r0,r0,#1              ;1149
000196  60a8              STR      r0,[r5,#8]            ;1149
000198  6828              LDR      r0,[r5,#0]            ;1150
00019a  2103              MOVS     r1,#3                 ;1150
00019c  06c9              LSLS     r1,r1,#27             ;1150
00019e  4388              BICS     r0,r0,r1              ;1150
0001a0  06f9              LSLS     r1,r7,#27             ;1150
0001a2  2203              MOVS     r2,#3                 ;1150
0001a4  06d2              LSLS     r2,r2,#27             ;1150
0001a6  4011              ANDS     r1,r1,r2              ;1150
0001a8  4308              ORRS     r0,r0,r1              ;1150
0001aa  6028              STR      r0,[r5,#0]            ;1150
0001ac  9801              LDR      r0,[sp,#4]            ;1151
0001ae  6068              STR      r0,[r5,#4]            ;1151
0001b0  6828              LDR      r0,[r5,#0]            ;1152
0001b2  0a00              LSRS     r0,r0,#8              ;1152
0001b4  0200              LSLS     r0,r0,#8              ;1152
0001b6  6028              STR      r0,[r5,#0]            ;1152
0001b8  6828              LDR      r0,[r5,#0]            ;1153
0001ba  2101              MOVS     r1,#1                 ;1153
0001bc  0409              LSLS     r1,r1,#16             ;1153
0001be  4388              BICS     r0,r0,r1              ;1153
0001c0  1840              ADDS     r0,r0,r1              ;1153
0001c2  6028              STR      r0,[r5,#0]            ;1153
0001c4  6828              LDR      r0,[r5,#0]            ;1154
0001c6  0349              LSLS     r1,r1,#13             ;1154
0001c8  4388              BICS     r0,r0,r1              ;1154
0001ca  6028              STR      r0,[r5,#0]            ;1154
0001cc  6828              LDR      r0,[r5,#0]            ;1155
0001ce  1149              ASRS     r1,r1,#5              ;1155
0001d0  4388              BICS     r0,r0,r1              ;1155
0001d2  1840              ADDS     r0,r0,r1              ;1155
0001d4  6028              STR      r0,[r5,#0]            ;1155
0001d6  bf00              NOP                            ;1156
                  |L27.472|
0001d8  bf00              NOP                            ;1156
0001da  2000              MOVS     r0,#0                 ;1160
0001dc  e724              B        |L27.40|
;;;1162   
                          ENDP

0001de  0000              DCW      0x0000
                  |L27.480|
                          DCD      bIsTimer0Initial
                  |L27.484|
                          DCD      bIsTimer1Initial
                  |L27.488|
                          DCD      bIsTimer2Initial
                  |L27.492|
                          DCD      bIsTimer3Initial
                  |L27.496|
                          DCD      0xffff9703
                  |L27.500|
                          DCD      bIsTimer0Used
                  |L27.504|
                          DCD      0x50000200
                  |L27.508|
                          DCD      0x40010000
                  |L27.512|
                          DCD      tTime0Event
                  |L27.516|
                          DCD      uTimer0Tick
                  |L27.520|
                          DCD      bIsTimer1Used
                  |L27.524|
                          DCD      tTime1Event
                  |L27.528|
                          DCD      uTimer1Tick
                  |L27.532|
                          DCD      bIsTimer2Used
                  |L27.536|
                          DCD      0x40110000
                  |L27.540|
                          DCD      tTime2Event
                  |L27.544|
                          DCD      uTimer2Tick
                  |L27.548|
                          DCD      bIsTimer3Used
                  |L27.552|
                          DCD      tTime3Event
                  |L27.556|
                          DCD      uTimer3Tick
                  |L27.560|
                          DCD      CH_OFFSET

                          AREA ||i.DrvTIMER_ResetIntTicks||, CODE, READONLY, ALIGN=2

                  DrvTIMER_ResetIntTicks PROC
;;;950    /*---------------------------------------------------------------------------------------------------------*/
;;;951    int32_t DrvTIMER_ResetIntTicks(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;952    {
;;;953        switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L28.20|
000006  2901              CMP      r1,#1
000008  d008              BEQ      |L28.28|
00000a  2902              CMP      r1,#2
00000c  d00a              BEQ      |L28.36|
00000e  2903              CMP      r1,#3
000010  d110              BNE      |L28.52|
000012  e00b              B        |L28.44|
                  |L28.20|
;;;954        {
;;;955            case E_TMR0:
;;;956            {
;;;957                uTimer0Tick = 0;
000014  2000              MOVS     r0,#0
000016  4a0a              LDR      r2,|L28.64|
000018  6010              STR      r0,[r2,#0]  ; uTimer0Tick
;;;958                break;
00001a  e00d              B        |L28.56|
                  |L28.28|
;;;959            }
;;;960    
;;;961            case E_TMR1:
;;;962            {
;;;963                uTimer1Tick = 0;
00001c  2000              MOVS     r0,#0
00001e  4a09              LDR      r2,|L28.68|
000020  6010              STR      r0,[r2,#0]  ; uTimer1Tick
;;;964                break;
000022  e009              B        |L28.56|
                  |L28.36|
;;;965            }
;;;966    
;;;967            case E_TMR2:
;;;968            {
;;;969                uTimer2Tick = 0;
000024  2000              MOVS     r0,#0
000026  4a08              LDR      r2,|L28.72|
000028  6010              STR      r0,[r2,#0]  ; uTimer2Tick
;;;970                break;
00002a  e005              B        |L28.56|
                  |L28.44|
;;;971            }
;;;972    
;;;973            case E_TMR3:
;;;974            {
;;;975                uTimer3Tick = 0;
00002c  2000              MOVS     r0,#0
00002e  4a07              LDR      r2,|L28.76|
000030  6010              STR      r0,[r2,#0]  ; uTimer3Tick
;;;976                break;
000032  e001              B        |L28.56|
                  |L28.52|
;;;977            }
;;;978    
;;;979            default:
;;;980            {
;;;981                return E_DRVTIMER_CHANNEL;
000034  4806              LDR      r0,|L28.80|
                  |L28.54|
;;;982            }
;;;983        }
;;;984    
;;;985        return E_SUCCESS;
;;;986    }
000036  4770              BX       lr
                  |L28.56|
000038  bf00              NOP                            ;958
00003a  2000              MOVS     r0,#0                 ;985
00003c  e7fb              B        |L28.54|
;;;987    
                          ENDP

00003e  0000              DCW      0x0000
                  |L28.64|
                          DCD      uTimer0Tick
                  |L28.68|
                          DCD      uTimer1Tick
                  |L28.72|
                          DCD      uTimer2Tick
                  |L28.76|
                          DCD      uTimer3Tick
                  |L28.80|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SelectCaptureEdge||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SelectCaptureEdge PROC
;;;1378   /*---------------------------------------------------------------------------------------------------------*/
;;;1379   int32_t DrvTIMER_SelectCaptureEdge(E_TIMER_CHANNEL ch, E_TIMER_TEX_EDGE edge)
000000  b530              PUSH     {r4,r5,lr}
;;;1380   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1381   	TIMER_T * tTMR;
;;;1382   
;;;1383      	switch (ch)
000006  2a00              CMP      r2,#0
000008  d006              BEQ      |L29.24|
00000a  2a01              CMP      r2,#1
00000c  d005              BEQ      |L29.26|
00000e  2a02              CMP      r2,#2
000010  d004              BEQ      |L29.28|
000012  2a03              CMP      r2,#3
000014  d112              BNE      |L29.60|
000016  e002              B        |L29.30|
                  |L29.24|
;;;1384       {
;;;1385           case E_TMR0:
;;;1386           case E_TMR1:
000018  bf00              NOP      
                  |L29.26|
;;;1387           case E_TMR2:
00001a  bf00              NOP      
                  |L29.28|
;;;1388   		case E_TMR3:
00001c  bf00              NOP      
                  |L29.30|
;;;1389           {
;;;1390           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001e  0090              LSLS     r0,r2,#2
000020  4c07              LDR      r4,|L29.64|
000022  5820              LDR      r0,[r4,r0]
000024  4c07              LDR      r4,|L29.68|
000026  1901              ADDS     r1,r0,r4
;;;1391               tTMR->TEXCON.TEX_EDGE = edge;
000028  6948              LDR      r0,[r1,#0x14]
00002a  2406              MOVS     r4,#6
00002c  43a0              BICS     r0,r0,r4
00002e  005c              LSLS     r4,r3,#1
000030  2506              MOVS     r5,#6
000032  402c              ANDS     r4,r4,r5
000034  4320              ORRS     r0,r0,r4
000036  6148              STR      r0,[r1,#0x14]
;;;1392               return E_SUCCESS;
000038  2000              MOVS     r0,#0
                  |L29.58|
;;;1393           }
;;;1394   
;;;1395           default:
;;;1396           {
;;;1397               return E_DRVTIMER_CHANNEL ; 
;;;1398           }
;;;1399       }
;;;1400   }
00003a  bd30              POP      {r4,r5,pc}
                  |L29.60|
00003c  4802              LDR      r0,|L29.72|
00003e  e7fc              B        |L29.58|
;;;1401   
                          ENDP

                  |L29.64|
                          DCD      CH_OFFSET
                  |L29.68|
                          DCD      0x40010000
                  |L29.72|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SelectCounterDetectPhase||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SelectCounterDetectPhase PROC
;;;1815   /*---------------------------------------------------------------------------------------------------------*/
;;;1816   int32_t DrvTIMER_SelectCounterDetectPhase(E_TIMER_CHANNEL ch, E_TIMER_TX_PHASE phase)
000000  b510              PUSH     {r4,lr}
;;;1817   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1818   	TIMER_T * tTMR;
;;;1819   
;;;1820      	switch (ch)
000006  2a00              CMP      r2,#0
000008  d006              BEQ      |L30.24|
00000a  2a01              CMP      r2,#1
00000c  d005              BEQ      |L30.26|
00000e  2a02              CMP      r2,#2
000010  d004              BEQ      |L30.28|
000012  2a03              CMP      r2,#3
000014  d111              BNE      |L30.58|
000016  e002              B        |L30.30|
                  |L30.24|
;;;1821       {
;;;1822           case E_TMR0:
;;;1823           case E_TMR1:
000018  bf00              NOP      
                  |L30.26|
;;;1824           case E_TMR2:
00001a  bf00              NOP      
                  |L30.28|
;;;1825   		case E_TMR3:
00001c  bf00              NOP      
                  |L30.30|
;;;1826           {
;;;1827           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001e  0090              LSLS     r0,r2,#2
000020  4c07              LDR      r4,|L30.64|
000022  5820              LDR      r0,[r4,r0]
000024  4c07              LDR      r4,|L30.68|
000026  1901              ADDS     r1,r0,r4
;;;1828               tTMR->TEXCON.TX_PHASE = phase;
000028  6948              LDR      r0,[r1,#0x14]
00002a  0840              LSRS     r0,r0,#1
00002c  0040              LSLS     r0,r0,#1
00002e  07dc              LSLS     r4,r3,#31
000030  0fe4              LSRS     r4,r4,#31
000032  4320              ORRS     r0,r0,r4
000034  6148              STR      r0,[r1,#0x14]
;;;1829               return E_SUCCESS;
000036  2000              MOVS     r0,#0
                  |L30.56|
;;;1830           }
;;;1831   
;;;1832           default:
;;;1833           {
;;;1834               return E_DRVTIMER_CHANNEL ; 
;;;1835           }
;;;1836       }
;;;1837   }
000038  bd10              POP      {r4,pc}
                  |L30.58|
00003a  4803              LDR      r0,|L30.72|
00003c  e7fc              B        |L30.56|
;;;1838   
                          ENDP

00003e  0000              DCW      0x0000
                  |L30.64|
                          DCD      CH_OFFSET
                  |L30.68|
                          DCD      0x40010000
                  |L30.72|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SelectExternalMode||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SelectExternalMode PROC
;;;1337   /*---------------------------------------------------------------------------------------------------------*/
;;;1338   int32_t DrvTIMER_SelectExternalMode(E_TIMER_CHANNEL ch, E_TIMER_RSTCAP_MODE mode)
000000  b530              PUSH     {r4,r5,lr}
;;;1339   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1340   	TIMER_T * tTMR;
;;;1341   
;;;1342      	switch (ch)
000006  2a00              CMP      r2,#0
000008  d006              BEQ      |L31.24|
00000a  2a01              CMP      r2,#1
00000c  d005              BEQ      |L31.26|
00000e  2a02              CMP      r2,#2
000010  d004              BEQ      |L31.28|
000012  2a03              CMP      r2,#3
000014  d112              BNE      |L31.60|
000016  e002              B        |L31.30|
                  |L31.24|
;;;1343       {
;;;1344           case E_TMR0:
;;;1345           case E_TMR1:
000018  bf00              NOP      
                  |L31.26|
;;;1346           case E_TMR2:
00001a  bf00              NOP      
                  |L31.28|
;;;1347   		case E_TMR3:
00001c  bf00              NOP      
                  |L31.30|
;;;1348           {
;;;1349           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001e  0090              LSLS     r0,r2,#2
000020  4c07              LDR      r4,|L31.64|
000022  5820              LDR      r0,[r4,r0]
000024  4c07              LDR      r4,|L31.68|
000026  1901              ADDS     r1,r0,r4
;;;1350               tTMR->TEXCON.RSTCAPSEL = mode;
000028  6948              LDR      r0,[r1,#0x14]
00002a  2410              MOVS     r4,#0x10
00002c  43a0              BICS     r0,r0,r4
00002e  011c              LSLS     r4,r3,#4
000030  2510              MOVS     r5,#0x10
000032  402c              ANDS     r4,r4,r5
000034  4320              ORRS     r0,r0,r4
000036  6148              STR      r0,[r1,#0x14]
;;;1351               return E_SUCCESS;
000038  2000              MOVS     r0,#0
                  |L31.58|
;;;1352           }
;;;1353   
;;;1354           default:
;;;1355           {
;;;1356               return E_DRVTIMER_CHANNEL ; 
;;;1357           }
;;;1358       }
;;;1359   }
00003a  bd30              POP      {r4,r5,pc}
                  |L31.60|
00003c  4802              LDR      r0,|L31.72|
00003e  e7fc              B        |L31.58|
;;;1360   
                          ENDP

                  |L31.64|
                          DCD      CH_OFFSET
                  |L31.68|
                          DCD      0x40010000
                  |L31.72|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_SetTimerEvent||, CODE, READONLY, ALIGN=2

                  DrvTIMER_SetTimerEvent PROC
;;;555    /*---------------------------------------------------------------------------------------------------------*/
;;;556    int32_t DrvTIMER_SetTimerEvent(E_TIMER_CHANNEL ch, uint32_t uInterruptTicks, TIMER_CALLBACK pTimerCallback, uint32_t parameter)
000000  b5f8              PUSH     {r3-r7,lr}
;;;557    {
000002  4604              MOV      r4,r0
;;;558        volatile int32_t i;
;;;559        int32_t uTimerEventNo = 0;
000004  2500              MOVS     r5,#0
;;;560    
;;;561        switch (ch)
000006  2c00              CMP      r4,#0
000008  d006              BEQ      |L32.24|
00000a  2c01              CMP      r4,#1
00000c  d044              BEQ      |L32.152|
00000e  2c02              CMP      r4,#2
000010  d07a              BEQ      |L32.264|
000012  2c03              CMP      r4,#3
000014  d179              BNE      |L32.266|
000016  e0c1              B        |L32.412|
                  |L32.24|
;;;562        {
;;;563            case E_TMR0:
;;;564            {
;;;565                if (uTime0EventCount >= TIMER_EVENT_COUNT)
000018  4882              LDR      r0,|L32.548|
00001a  6800              LDR      r0,[r0,#0]  ; uTime0EventCount
00001c  2800              CMP      r0,#0
00001e  d001              BEQ      |L32.36|
;;;566                    return E_DRVTIMER_EVENT_FULL;
000020  4881              LDR      r0,|L32.552|
                  |L32.34|
;;;567    
;;;568                bIsSetTime0Event = TRUE;
;;;569                uTime0EventCount++;
;;;570                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;571                {
;;;572                    if (tTime0Event[i].active  == FALSE)
;;;573                    {
;;;574                        tTime0Event[i].active       = TRUE;
;;;575                        tTime0Event[i].initTick     = uInterruptTicks;
;;;576                        tTime0Event[i].curTick      = uInterruptTicks;
;;;577                        tTime0Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
;;;578                        tTime0Event[i].transParam   = parameter;
;;;579                        uTimerEventNo = i;
;;;580                        break;
;;;581                    }
;;;582                }
;;;583                break;
;;;584            }
;;;585    
;;;586            case E_TMR1:
;;;587            {
;;;588                if (uTime1EventCount >= TIMER_EVENT_COUNT)
;;;589                    return E_DRVTIMER_EVENT_FULL;
;;;590    
;;;591                bIsSetTime1Event = TRUE;
;;;592                uTime1EventCount++;
;;;593                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;594                {
;;;595                    if (tTime1Event[i].active   == FALSE)
;;;596                    {
;;;597                        tTime1Event[i].active       = TRUE;
;;;598                        tTime1Event[i].initTick     = uInterruptTicks;
;;;599                        tTime1Event[i].curTick      = uInterruptTicks;
;;;600                        tTime1Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
;;;601                        tTime1Event[i].transParam   = parameter;
;;;602                        uTimerEventNo = i;
;;;603                        break;
;;;604                    }
;;;605                }
;;;606                break;
;;;607            }
;;;608    
;;;609            case E_TMR2:
;;;610            {
;;;611                if (uTime2EventCount >= TIMER_EVENT_COUNT)
;;;612                    return E_DRVTIMER_EVENT_FULL;
;;;613    
;;;614                bIsSetTime2Event = TRUE;
;;;615                uTime2EventCount++;
;;;616                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;617                {
;;;618                    if (tTime2Event[i].active   == FALSE)
;;;619                    {
;;;620                        tTime2Event[i].active       = TRUE;
;;;621                        tTime2Event[i].initTick     = uInterruptTicks;
;;;622                        tTime2Event[i].curTick      = uInterruptTicks;
;;;623                        tTime2Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
;;;624                        tTime2Event[i].transParam   = parameter;
;;;625                        uTimerEventNo = i;
;;;626                        break;
;;;627                    }
;;;628                }
;;;629                break;
;;;630            }
;;;631    
;;;632            case E_TMR3:
;;;633            {
;;;634                if (uTime3EventCount >= TIMER_EVENT_COUNT)
;;;635                    return E_DRVTIMER_EVENT_FULL;
;;;636    
;;;637                bIsSetTime3Event = TRUE;
;;;638                uTime3EventCount++;
;;;639                for (i=0; i<TIMER_EVENT_COUNT; i++)
;;;640                {
;;;641                    if (tTime3Event[i].active   == FALSE)
;;;642                    {
;;;643                        tTime3Event[i].active       = TRUE;
;;;644                        tTime3Event[i].initTick     = uInterruptTicks;
;;;645                        tTime3Event[i].curTick      = uInterruptTicks;
;;;646                        tTime3Event[i].funPtr       = (TIMER_CALLBACK)pTimerCallback;
;;;647                        tTime3Event[i].transParam   = parameter;
;;;648                        uTimerEventNo = i;
;;;649                        break;
;;;650                    }
;;;651                }
;;;652                break;
;;;653            }
;;;654    
;;;655            default:
;;;656            {
;;;657                break;
;;;658            }
;;;659        }
;;;660    
;;;661        return uTimerEventNo;
;;;662    }
000022  bdf8              POP      {r3-r7,pc}
                  |L32.36|
000024  2001              MOVS     r0,#1                 ;568
000026  4e81              LDR      r6,|L32.556|
000028  6030              STR      r0,[r6,#0]            ;568  ; bIsSetTime0Event
00002a  487e              LDR      r0,|L32.548|
00002c  6800              LDR      r0,[r0,#0]            ;569  ; uTime0EventCount
00002e  1c40              ADDS     r0,r0,#1              ;569
000030  4e7c              LDR      r6,|L32.548|
000032  6030              STR      r0,[r6,#0]            ;569  ; uTime0EventCount
000034  2000              MOVS     r0,#0                 ;570
000036  9000              STR      r0,[sp,#0]            ;570
000038  e029              B        |L32.142|
                  |L32.58|
00003a  2614              MOVS     r6,#0x14              ;572
00003c  9800              LDR      r0,[sp,#0]            ;572
00003e  4370              MULS     r0,r6,r0              ;572
000040  4e7b              LDR      r6,|L32.560|
000042  5830              LDR      r0,[r6,r0]            ;572
000044  2800              CMP      r0,#0                 ;572
000046  d11f              BNE      |L32.136|
000048  2601              MOVS     r6,#1                 ;574
00004a  2714              MOVS     r7,#0x14              ;574
00004c  9800              LDR      r0,[sp,#0]            ;574
00004e  4378              MULS     r0,r7,r0              ;574
000050  4f77              LDR      r7,|L32.560|
000052  503e              STR      r6,[r7,r0]            ;574
000054  2614              MOVS     r6,#0x14              ;575
000056  9800              LDR      r0,[sp,#0]            ;575
000058  4370              MULS     r0,r6,r0              ;575
00005a  463e              MOV      r6,r7                 ;575
00005c  1980              ADDS     r0,r0,r6              ;575
00005e  6041              STR      r1,[r0,#4]            ;575
000060  2614              MOVS     r6,#0x14              ;576
000062  9800              LDR      r0,[sp,#0]            ;576
000064  4370              MULS     r0,r6,r0              ;576
000066  463e              MOV      r6,r7                 ;576
000068  1980              ADDS     r0,r0,r6              ;576
00006a  6081              STR      r1,[r0,#8]            ;576
00006c  2614              MOVS     r6,#0x14              ;577
00006e  9800              LDR      r0,[sp,#0]            ;577
000070  4370              MULS     r0,r6,r0              ;577
000072  463e              MOV      r6,r7                 ;577
000074  1980              ADDS     r0,r0,r6              ;577
000076  60c2              STR      r2,[r0,#0xc]          ;577
000078  2614              MOVS     r6,#0x14              ;578
00007a  9800              LDR      r0,[sp,#0]            ;578
00007c  4370              MULS     r0,r6,r0              ;578
00007e  463e              MOV      r6,r7                 ;578
000080  1980              ADDS     r0,r0,r6              ;578
000082  6103              STR      r3,[r0,#0x10]         ;578
000084  9d00              LDR      r5,[sp,#0]            ;579
000086  e005              B        |L32.148|
                  |L32.136|
000088  9800              LDR      r0,[sp,#0]            ;570
00008a  1c40              ADDS     r0,r0,#1              ;570
00008c  9000              STR      r0,[sp,#0]            ;570
                  |L32.142|
00008e  9800              LDR      r0,[sp,#0]            ;570
000090  2801              CMP      r0,#1                 ;570
000092  dbd2              BLT      |L32.58|
                  |L32.148|
000094  bf00              NOP                            ;580
000096  e0c2              B        |L32.542|
                  |L32.152|
000098  4866              LDR      r0,|L32.564|
00009a  6800              LDR      r0,[r0,#0]            ;588  ; uTime1EventCount
00009c  2800              CMP      r0,#0                 ;588
00009e  d001              BEQ      |L32.164|
0000a0  4861              LDR      r0,|L32.552|
0000a2  e7be              B        |L32.34|
                  |L32.164|
0000a4  2001              MOVS     r0,#1                 ;591
0000a6  4e64              LDR      r6,|L32.568|
0000a8  6030              STR      r0,[r6,#0]            ;591  ; bIsSetTime1Event
0000aa  4862              LDR      r0,|L32.564|
0000ac  6800              LDR      r0,[r0,#0]            ;592  ; uTime1EventCount
0000ae  1c40              ADDS     r0,r0,#1              ;592
0000b0  4e60              LDR      r6,|L32.564|
0000b2  6030              STR      r0,[r6,#0]            ;592  ; uTime1EventCount
0000b4  2000              MOVS     r0,#0                 ;593
0000b6  9000              STR      r0,[sp,#0]            ;593
0000b8  e02b              B        |L32.274|
                  |L32.186|
0000ba  2614              MOVS     r6,#0x14              ;595
0000bc  9800              LDR      r0,[sp,#0]            ;595
0000be  4370              MULS     r0,r6,r0              ;595
0000c0  4e5e              LDR      r6,|L32.572|
0000c2  5830              LDR      r0,[r6,r0]            ;595
0000c4  2800              CMP      r0,#0                 ;595
0000c6  d121              BNE      |L32.268|
0000c8  2601              MOVS     r6,#1                 ;597
0000ca  2714              MOVS     r7,#0x14              ;597
0000cc  9800              LDR      r0,[sp,#0]            ;597
0000ce  4378              MULS     r0,r7,r0              ;597
0000d0  4f5a              LDR      r7,|L32.572|
0000d2  503e              STR      r6,[r7,r0]            ;597
0000d4  2614              MOVS     r6,#0x14              ;598
0000d6  9800              LDR      r0,[sp,#0]            ;598
0000d8  4370              MULS     r0,r6,r0              ;598
0000da  463e              MOV      r6,r7                 ;598
0000dc  1980              ADDS     r0,r0,r6              ;598
0000de  6041              STR      r1,[r0,#4]            ;598
0000e0  2614              MOVS     r6,#0x14              ;599
0000e2  9800              LDR      r0,[sp,#0]            ;599
0000e4  4370              MULS     r0,r6,r0              ;599
0000e6  463e              MOV      r6,r7                 ;599
0000e8  1980              ADDS     r0,r0,r6              ;599
0000ea  6081              STR      r1,[r0,#8]            ;599
0000ec  2614              MOVS     r6,#0x14              ;600
0000ee  9800              LDR      r0,[sp,#0]            ;600
0000f0  4370              MULS     r0,r6,r0              ;600
0000f2  463e              MOV      r6,r7                 ;600
0000f4  1980              ADDS     r0,r0,r6              ;600
0000f6  60c2              STR      r2,[r0,#0xc]          ;600
0000f8  2614              MOVS     r6,#0x14              ;601
0000fa  9800              LDR      r0,[sp,#0]            ;601
0000fc  4370              MULS     r0,r6,r0              ;601
0000fe  463e              MOV      r6,r7                 ;601
000100  1980              ADDS     r0,r0,r6              ;601
000102  6103              STR      r3,[r0,#0x10]         ;601
000104  9d00              LDR      r5,[sp,#0]            ;602
000106  e007              B        |L32.280|
                  |L32.264|
000108  e008              B        |L32.284|
                  |L32.266|
00010a  e087              B        |L32.540|
                  |L32.268|
00010c  9800              LDR      r0,[sp,#0]            ;593
00010e  1c40              ADDS     r0,r0,#1              ;593
000110  9000              STR      r0,[sp,#0]            ;593
                  |L32.274|
000112  9800              LDR      r0,[sp,#0]            ;593
000114  2801              CMP      r0,#1                 ;593
000116  dbd0              BLT      |L32.186|
                  |L32.280|
000118  bf00              NOP                            ;603
00011a  e080              B        |L32.542|
                  |L32.284|
00011c  4848              LDR      r0,|L32.576|
00011e  6800              LDR      r0,[r0,#0]            ;611  ; uTime2EventCount
000120  2800              CMP      r0,#0                 ;611
000122  d001              BEQ      |L32.296|
000124  4840              LDR      r0,|L32.552|
000126  e77c              B        |L32.34|
                  |L32.296|
000128  2001              MOVS     r0,#1                 ;614
00012a  4e46              LDR      r6,|L32.580|
00012c  6030              STR      r0,[r6,#0]            ;614  ; bIsSetTime2Event
00012e  4844              LDR      r0,|L32.576|
000130  6800              LDR      r0,[r0,#0]            ;615  ; uTime2EventCount
000132  1c40              ADDS     r0,r0,#1              ;615
000134  4e42              LDR      r6,|L32.576|
000136  6030              STR      r0,[r6,#0]            ;615  ; uTime2EventCount
000138  2000              MOVS     r0,#0                 ;616
00013a  9000              STR      r0,[sp,#0]            ;616
00013c  e029              B        |L32.402|
                  |L32.318|
00013e  2614              MOVS     r6,#0x14              ;618
000140  9800              LDR      r0,[sp,#0]            ;618
000142  4370              MULS     r0,r6,r0              ;618
000144  4e40              LDR      r6,|L32.584|
000146  5830              LDR      r0,[r6,r0]            ;618
000148  2800              CMP      r0,#0                 ;618
00014a  d11f              BNE      |L32.396|
00014c  2601              MOVS     r6,#1                 ;620
00014e  2714              MOVS     r7,#0x14              ;620
000150  9800              LDR      r0,[sp,#0]            ;620
000152  4378              MULS     r0,r7,r0              ;620
000154  4f3c              LDR      r7,|L32.584|
000156  503e              STR      r6,[r7,r0]            ;620
000158  2614              MOVS     r6,#0x14              ;621
00015a  9800              LDR      r0,[sp,#0]            ;621
00015c  4370              MULS     r0,r6,r0              ;621
00015e  463e              MOV      r6,r7                 ;621
000160  1980              ADDS     r0,r0,r6              ;621
000162  6041              STR      r1,[r0,#4]            ;621
000164  2614              MOVS     r6,#0x14              ;622
000166  9800              LDR      r0,[sp,#0]            ;622
000168  4370              MULS     r0,r6,r0              ;622
00016a  463e              MOV      r6,r7                 ;622
00016c  1980              ADDS     r0,r0,r6              ;622
00016e  6081              STR      r1,[r0,#8]            ;622
000170  2614              MOVS     r6,#0x14              ;623
000172  9800              LDR      r0,[sp,#0]            ;623
000174  4370              MULS     r0,r6,r0              ;623
000176  463e              MOV      r6,r7                 ;623
000178  1980              ADDS     r0,r0,r6              ;623
00017a  60c2              STR      r2,[r0,#0xc]          ;623
00017c  2614              MOVS     r6,#0x14              ;624
00017e  9800              LDR      r0,[sp,#0]            ;624
000180  4370              MULS     r0,r6,r0              ;624
000182  463e              MOV      r6,r7                 ;624
000184  1980              ADDS     r0,r0,r6              ;624
000186  6103              STR      r3,[r0,#0x10]         ;624
000188  9d00              LDR      r5,[sp,#0]            ;625
00018a  e005              B        |L32.408|
                  |L32.396|
00018c  9800              LDR      r0,[sp,#0]            ;616
00018e  1c40              ADDS     r0,r0,#1              ;616
000190  9000              STR      r0,[sp,#0]            ;616
                  |L32.402|
000192  9800              LDR      r0,[sp,#0]            ;616
000194  2801              CMP      r0,#1                 ;616
000196  dbd2              BLT      |L32.318|
                  |L32.408|
000198  bf00              NOP                            ;626
00019a  e040              B        |L32.542|
                  |L32.412|
00019c  482b              LDR      r0,|L32.588|
00019e  6800              LDR      r0,[r0,#0]            ;634  ; uTime3EventCount
0001a0  2800              CMP      r0,#0                 ;634
0001a2  d001              BEQ      |L32.424|
0001a4  4820              LDR      r0,|L32.552|
0001a6  e73c              B        |L32.34|
                  |L32.424|
0001a8  2001              MOVS     r0,#1                 ;637
0001aa  4e29              LDR      r6,|L32.592|
0001ac  6030              STR      r0,[r6,#0]            ;637  ; bIsSetTime3Event
0001ae  4827              LDR      r0,|L32.588|
0001b0  6800              LDR      r0,[r0,#0]            ;638  ; uTime3EventCount
0001b2  1c40              ADDS     r0,r0,#1              ;638
0001b4  4e25              LDR      r6,|L32.588|
0001b6  6030              STR      r0,[r6,#0]            ;638  ; uTime3EventCount
0001b8  2000              MOVS     r0,#0                 ;639
0001ba  9000              STR      r0,[sp,#0]            ;639
0001bc  e029              B        |L32.530|
                  |L32.446|
0001be  2614              MOVS     r6,#0x14              ;641
0001c0  9800              LDR      r0,[sp,#0]            ;641
0001c2  4370              MULS     r0,r6,r0              ;641
0001c4  4e23              LDR      r6,|L32.596|
0001c6  5830              LDR      r0,[r6,r0]            ;641
0001c8  2800              CMP      r0,#0                 ;641
0001ca  d11f              BNE      |L32.524|
0001cc  2601              MOVS     r6,#1                 ;643
0001ce  2714              MOVS     r7,#0x14              ;643
0001d0  9800              LDR      r0,[sp,#0]            ;643
0001d2  4378              MULS     r0,r7,r0              ;643
0001d4  4f1f              LDR      r7,|L32.596|
0001d6  503e              STR      r6,[r7,r0]            ;643
0001d8  2614              MOVS     r6,#0x14              ;644
0001da  9800              LDR      r0,[sp,#0]            ;644
0001dc  4370              MULS     r0,r6,r0              ;644
0001de  463e              MOV      r6,r7                 ;644
0001e0  1980              ADDS     r0,r0,r6              ;644
0001e2  6041              STR      r1,[r0,#4]            ;644
0001e4  2614              MOVS     r6,#0x14              ;645
0001e6  9800              LDR      r0,[sp,#0]            ;645
0001e8  4370              MULS     r0,r6,r0              ;645
0001ea  463e              MOV      r6,r7                 ;645
0001ec  1980              ADDS     r0,r0,r6              ;645
0001ee  6081              STR      r1,[r0,#8]            ;645
0001f0  2614              MOVS     r6,#0x14              ;646
0001f2  9800              LDR      r0,[sp,#0]            ;646
0001f4  4370              MULS     r0,r6,r0              ;646
0001f6  463e              MOV      r6,r7                 ;646
0001f8  1980              ADDS     r0,r0,r6              ;646
0001fa  60c2              STR      r2,[r0,#0xc]          ;646
0001fc  2614              MOVS     r6,#0x14              ;647
0001fe  9800              LDR      r0,[sp,#0]            ;647
000200  4370              MULS     r0,r6,r0              ;647
000202  463e              MOV      r6,r7                 ;647
000204  1980              ADDS     r0,r0,r6              ;647
000206  6103              STR      r3,[r0,#0x10]         ;647
000208  9d00              LDR      r5,[sp,#0]            ;648
00020a  e005              B        |L32.536|
                  |L32.524|
00020c  9800              LDR      r0,[sp,#0]            ;639
00020e  1c40              ADDS     r0,r0,#1              ;639
000210  9000              STR      r0,[sp,#0]            ;639
                  |L32.530|
000212  9800              LDR      r0,[sp,#0]            ;639
000214  2801              CMP      r0,#1                 ;639
000216  dbd2              BLT      |L32.446|
                  |L32.536|
000218  bf00              NOP                            ;649
00021a  e000              B        |L32.542|
                  |L32.540|
00021c  bf00              NOP                            ;657
                  |L32.542|
00021e  bf00              NOP                            ;583
000220  4628              MOV      r0,r5                 ;661
000222  e6fe              B        |L32.34|
;;;663    
                          ENDP

                  |L32.548|
                          DCD      uTime0EventCount
                  |L32.552|
                          DCD      0xffff9704
                  |L32.556|
                          DCD      bIsSetTime0Event
                  |L32.560|
                          DCD      tTime0Event
                  |L32.564|
                          DCD      uTime1EventCount
                  |L32.568|
                          DCD      bIsSetTime1Event
                  |L32.572|
                          DCD      tTime1Event
                  |L32.576|
                          DCD      uTime2EventCount
                  |L32.580|
                          DCD      bIsSetTime2Event
                  |L32.584|
                          DCD      tTime2Event
                  |L32.588|
                          DCD      uTime3EventCount
                  |L32.592|
                          DCD      bIsSetTime3Event
                  |L32.596|
                          DCD      tTime3Event

                          AREA ||i.DrvTIMER_Start||, CODE, READONLY, ALIGN=2

                  DrvTIMER_Start PROC
;;;870    /*---------------------------------------------------------------------------------------------------------*/
;;;871    int32_t DrvTIMER_Start(E_TIMER_CHANNEL ch)
000000  4601              MOV      r1,r0
;;;872    {
;;;873    	TIMER_T * tTMR;
;;;874    
;;;875       	switch (ch)
000002  2900              CMP      r1,#0
000004  d006              BEQ      |L33.20|
000006  2901              CMP      r1,#1
000008  d005              BEQ      |L33.22|
00000a  2902              CMP      r1,#2
00000c  d004              BEQ      |L33.24|
00000e  2903              CMP      r1,#3
000010  d10f              BNE      |L33.50|
000012  e002              B        |L33.26|
                  |L33.20|
;;;876        {
;;;877            case E_TMR0:
;;;878            case E_TMR1:
000014  bf00              NOP      
                  |L33.22|
;;;879            case E_TMR2:
000016  bf00              NOP      
                  |L33.24|
;;;880    		case E_TMR3:
000018  bf00              NOP      
                  |L33.26|
;;;881            {
;;;882            	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);         
00001a  0088              LSLS     r0,r1,#2
00001c  4b06              LDR      r3,|L33.56|
00001e  5818              LDR      r0,[r3,r0]
000020  4b06              LDR      r3,|L33.60|
000022  18c2              ADDS     r2,r0,r3
;;;883                tTMR->TCSR.CEN = 1;
000024  6810              LDR      r0,[r2,#0]
000026  039b              LSLS     r3,r3,#14
000028  4398              BICS     r0,r0,r3
00002a  18c0              ADDS     r0,r0,r3
00002c  6010              STR      r0,[r2,#0]
;;;884                return E_SUCCESS ;
00002e  2000              MOVS     r0,#0
                  |L33.48|
;;;885            }
;;;886    
;;;887            default:
;;;888            {
;;;889                return E_DRVTIMER_CHANNEL ; 
;;;890            }
;;;891        }
;;;892    }
000030  4770              BX       lr
                  |L33.50|
000032  4803              LDR      r0,|L33.64|
000034  e7fc              B        |L33.48|
;;;893    
                          ENDP

000036  0000              DCW      0x0000
                  |L33.56|
                          DCD      CH_OFFSET
                  |L33.60|
                          DCD      0x40010000
                  |L33.64|
                          DCD      0xffff9701

                          AREA ||i.DrvTIMER_StartCounter||, CODE, READONLY, ALIGN=2

                  DrvTIMER_StartCounter PROC
;;;1176   /*---------------------------------------------------------------------------------------------------------*/
;;;1177   int32_t DrvTIMER_StartCounter(E_TIMER_CHANNEL ch)
000000  4602              MOV      r2,r0
;;;1178   {
;;;1179   	TIMER_T * tTMR;
;;;1180   
;;;1181      	switch (ch)
000002  2a00              CMP      r2,#0
000004  d006              BEQ      |L34.20|
000006  2a01              CMP      r2,#1
000008  d005              BEQ      |L34.22|
00000a  2a02              CMP      r2,#2
00000c  d004              BEQ      |L34.24|
00000e  2a03              CMP      r2,#3
000010  d11b              BNE      |L34.74|
000012  e002              B        |L34.26|
                  |L34.20|
;;;1182       {
;;;1183           case E_TMR0:
;;;1184           case E_TMR1:
000014  bf00              NOP      
                  |L34.22|
;;;1185           case E_TMR2:
000016  bf00              NOP      
                  |L34.24|
;;;1186   		case E_TMR3:
000018  bf00              NOP      
                  |L34.26|
;;;1187           {
;;;1188           	tTMR = (TIMER_T *)((uint32_t)TIMER0 + CH_OFFSET[ch]);   
00001a  0090              LSLS     r0,r2,#2
00001c  4b0c              LDR      r3,|L34.80|
00001e  5818              LDR      r0,[r3,r0]
000020  4b0c              LDR      r3,|L34.84|
000022  18c1              ADDS     r1,r0,r3
;;;1189               if (tTMR->TCSR.IE == 0)
000024  6808              LDR      r0,[r1,#0]
000026  0080              LSLS     r0,r0,#2
000028  0fc0              LSRS     r0,r0,#31
00002a  2800              CMP      r0,#0
00002c  d100              BNE      |L34.48|
;;;1190   				tTMR->TCMPR = 0;	// If use Polling Mode, do not configure Timer Compare Register. 
00002e  6048              STR      r0,[r1,#4]
                  |L34.48|
;;;1191   			tTMR->TCSR.CRST 	= 1;					
000030  6808              LDR      r0,[r1,#0]
000032  2301              MOVS     r3,#1
000034  069b              LSLS     r3,r3,#26
000036  4398              BICS     r0,r0,r3
000038  18c0              ADDS     r0,r0,r3
00003a  6008              STR      r0,[r1,#0]
;;;1192   			tTMR->TCSR.CEN 	    = 1;					
00003c  6808              LDR      r0,[r1,#0]
00003e  011b              LSLS     r3,r3,#4
000040  4398              BICS     r0,r0,r3
000042  18c0              ADDS     r0,r0,r3
000044  6008              STR      r0,[r1,#0]
;;;1193               return E_SUCCESS;
000046  2000              MOVS     r0,#0
                  |L34.72|
;;;1194           }
;;;1195   
;;;1196           default:
;;;1197           {
;;;1198               return E_DRVTIMER_CHANNEL ; 
;;;1199           }
;;;1200       }
;;;1201   }
000048  4770              BX       lr
                  |L34.74|
00004a  4803              LDR      r0,|L34.88|
00004c  e7fc              B        |L34.72|
;;;1202   
                          ENDP

00004e  0000              DCW      0x0000
                  |L34.80|
                          DCD      CH_OFFSET
                  |L34.84|
                          DCD      0x40010000
                  |L34.88|
                          DCD      0xffff9701

                          AREA ||i.DrvWDT_Close||, CODE, READONLY, ALIGN=2

                  DrvWDT_Close PROC
;;;1928   /*---------------------------------------------------------------------------------------------------------*/
;;;1929   void DrvWDT_Close(void)
000000  b508              PUSH     {r3,lr}
;;;1930   {
;;;1931       DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);      /* Stop WDT */
000002  2100              MOVS     r1,#0
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       DrvWDT_Ioctl
;;;1932       DrvWDT_Ioctl(E_WDT_IOC_DISABLE_INT, 0);     /* Disable WDT Interrupt */
00000a  2100              MOVS     r1,#0
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       DrvWDT_Ioctl
;;;1933       DrvWDT_Ioctl(E_WDT_IOC_DISABLE_WAKEUP, 0);  /* Disable WDT wakeup fuction */              
000012  2100              MOVS     r1,#0
000014  2005              MOVS     r0,#5
000016  f7fffffe          BL       DrvWDT_Ioctl
;;;1934       
;;;1935       /* Add delay loop to make sure the internal WDT status is stable then disable WDT engine clock */ 
;;;1936       if (DrvSYS_GetHCLKFreq() != __IRC10K)
00001a  f7fffffe          BL       DrvSYS_GetHCLKFreq
00001e  490a              LDR      r1,|L35.72|
000020  4288              CMP      r0,r1
000022  d009              BEQ      |L35.56|
;;;1937       {        
;;;1938           volatile uint32_t i=0x2000;
000024  2001              MOVS     r0,#1
000026  0340              LSLS     r0,r0,#13
000028  9000              STR      r0,[sp,#0]
;;;1939           while (i--);
00002a  bf00              NOP      
                  |L35.44|
00002c  9800              LDR      r0,[sp,#0]
00002e  1e41              SUBS     r1,r0,#1
000030  9100              STR      r1,[sp,#0]
000032  2800              CMP      r0,#0
000034  d1fa              BNE      |L35.44|
;;;1940       }
000036  bf00              NOP      
                  |L35.56|
;;;1941   
;;;1942       SYSCLK->APBCLK.WDT_EN = 0;
000038  4804              LDR      r0,|L35.76|
00003a  6880              LDR      r0,[r0,#8]
00003c  0840              LSRS     r0,r0,#1
00003e  0040              LSLS     r0,r0,#1
000040  4902              LDR      r1,|L35.76|
000042  6088              STR      r0,[r1,#8]
;;;1943   }
000044  bd08              POP      {r3,pc}
;;;1944   
                          ENDP

000046  0000              DCW      0x0000
                  |L35.72|
                          DCD      0x00002710
                  |L35.76|
                          DCD      0x50000200

                          AREA ||i.DrvWDT_InstallISR||, CODE, READONLY, ALIGN=2

                  DrvWDT_InstallISR PROC
;;;1957   /*---------------------------------------------------------------------------------------------------------*/
;;;1958   void DrvWDT_InstallISR(WDT_CALLBACK pvWDTISR)
000000  4904              LDR      r1,|L36.20|
;;;1959   {
;;;1960       WDT->WTCR.WTIE = 1;
000002  6809              LDR      r1,[r1,#0]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  3140              ADDS     r1,r1,#0x40
00000a  4a02              LDR      r2,|L36.20|
00000c  6011              STR      r1,[r2,#0]
;;;1961       fnCallBack_WDT = (WDT_CALLBACK)pvWDTISR;    
00000e  4902              LDR      r1,|L36.24|
000010  6008              STR      r0,[r1,#0]  ; fnCallBack_WDT
;;;1962   }
000012  4770              BX       lr
;;;1963   
                          ENDP

                  |L36.20|
                          DCD      0x40004000
                  |L36.24|
                          DCD      fnCallBack_WDT

                          AREA ||i.DrvWDT_Ioctl||, CODE, READONLY, ALIGN=2

                  DrvWDT_Ioctl PROC
;;;1992   /*---------------------------------------------------------------------------------------------------------*/
;;;1993   int32_t DrvWDT_Ioctl(E_WDT_CMD uWDTCmd, uint32_t uArgument)
000000  b570              PUSH     {r4-r6,lr}
;;;1994   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1995       switch (uWDTCmd)
000006  0023              MOVS     r3,r4
000008  f7fffffe          BL       __ARM_common_switch8
00000c  0a060e15          DCB      0x0a,0x06,0x0e,0x15
000010  242e363d          DCB      0x24,0x2e,0x36,0x3d
000014  454d5461          DCB      0x45,0x4d,0x54,0x61
;;;1996       {
;;;1997           case E_WDT_IOC_START_TIMER  :
;;;1998           {
;;;1999               WDT->WTCR.WTE = 1;
000018  482f              LDR      r0,|L37.216|
00001a  6800              LDR      r0,[r0,#0]
00001c  2180              MOVS     r1,#0x80
00001e  4388              BICS     r0,r0,r1
000020  3080              ADDS     r0,r0,#0x80
000022  492d              LDR      r1,|L37.216|
000024  6008              STR      r0,[r1,#0]
;;;2000               break ;
000026  e054              B        |L37.210|
;;;2001           }
;;;2002   
;;;2003           case E_WDT_IOC_STOP_TIMER :
;;;2004           {
;;;2005               WDT->WTCR.WTE = 0;
000028  482b              LDR      r0,|L37.216|
00002a  6800              LDR      r0,[r0,#0]
00002c  2180              MOVS     r1,#0x80
00002e  4388              BICS     r0,r0,r1
000030  4929              LDR      r1,|L37.216|
000032  6008              STR      r0,[r1,#0]
;;;2006               break ;
000034  e04d              B        |L37.210|
;;;2007           }
;;;2008   
;;;2009           case E_WDT_IOC_ENABLE_INT :
;;;2010           {
;;;2011               WDT->WTCR.WTIE = 1;
000036  4828              LDR      r0,|L37.216|
000038  6800              LDR      r0,[r0,#0]
00003a  2140              MOVS     r1,#0x40
00003c  4388              BICS     r0,r0,r1
00003e  3040              ADDS     r0,r0,#0x40
000040  4925              LDR      r1,|L37.216|
000042  6008              STR      r0,[r1,#0]
;;;2012               NVIC_SetPriority(WDT_IRQn, (1<<__NVIC_PRIO_BITS) - 2);
000044  2102              MOVS     r1,#2
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       NVIC_SetPriority
;;;2013               NVIC_EnableIRQ(WDT_IRQn); 
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       NVIC_EnableIRQ
;;;2014               break ;
000052  e03e              B        |L37.210|
;;;2015           }
;;;2016   
;;;2017           case E_WDT_IOC_DISABLE_INT :
;;;2018           {
;;;2019               WDT->WTCR.WTIE = 0;
000054  4820              LDR      r0,|L37.216|
000056  6800              LDR      r0,[r0,#0]
000058  2140              MOVS     r1,#0x40
00005a  4388              BICS     r0,r0,r1
00005c  491e              LDR      r1,|L37.216|
00005e  6008              STR      r0,[r1,#0]
;;;2020               NVIC_DisableIRQ(WDT_IRQn); 
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       NVIC_DisableIRQ
;;;2021               break ;
000066  e034              B        |L37.210|
;;;2022           }
;;;2023   
;;;2024           case E_WDT_IOC_ENABLE_WAKEUP :
;;;2025           {
;;;2026               WDT->WTCR.WTWKE = 1;            
000068  481b              LDR      r0,|L37.216|
00006a  6800              LDR      r0,[r0,#0]
00006c  2110              MOVS     r1,#0x10
00006e  4388              BICS     r0,r0,r1
000070  3010              ADDS     r0,r0,#0x10
000072  4919              LDR      r1,|L37.216|
000074  6008              STR      r0,[r1,#0]
;;;2027               break ;
000076  e02c              B        |L37.210|
;;;2028           }
;;;2029   
;;;2030           case E_WDT_IOC_DISABLE_WAKEUP :
;;;2031           {
;;;2032               WDT->WTCR.WTWKE = 0;            
000078  4817              LDR      r0,|L37.216|
00007a  6800              LDR      r0,[r0,#0]
00007c  2110              MOVS     r1,#0x10
00007e  4388              BICS     r0,r0,r1
000080  4915              LDR      r1,|L37.216|
000082  6008              STR      r0,[r1,#0]
;;;2033               break ;
000084  e025              B        |L37.210|
;;;2034           }
;;;2035   
;;;2036           case E_WDT_IOC_RESET_TIMER:
;;;2037           {
;;;2038               WDT->WTCR.WTR = 1;
000086  4814              LDR      r0,|L37.216|
000088  6800              LDR      r0,[r0,#0]
00008a  0840              LSRS     r0,r0,#1
00008c  0040              LSLS     r0,r0,#1
00008e  1c40              ADDS     r0,r0,#1
000090  4911              LDR      r1,|L37.216|
000092  6008              STR      r0,[r1,#0]
;;;2039               break ;
000094  e01d              B        |L37.210|
;;;2040           }
;;;2041   
;;;2042           case E_WDT_IOC_ENABLE_RESET_FUNC :
;;;2043           {
;;;2044               WDT->WTCR.WTRE = 1;
000096  4810              LDR      r0,|L37.216|
000098  6800              LDR      r0,[r0,#0]
00009a  2102              MOVS     r1,#2
00009c  4388              BICS     r0,r0,r1
00009e  1c80              ADDS     r0,r0,#2
0000a0  490d              LDR      r1,|L37.216|
0000a2  6008              STR      r0,[r1,#0]
;;;2045               break ;
0000a4  e015              B        |L37.210|
;;;2046           }
;;;2047   
;;;2048           case E_WDT_IOC_DISABLE_RESET_FUNC:
;;;2049           {
;;;2050               WDT->WTCR.WTRE = 0;
0000a6  480c              LDR      r0,|L37.216|
0000a8  6800              LDR      r0,[r0,#0]
0000aa  2102              MOVS     r1,#2
0000ac  4388              BICS     r0,r0,r1
0000ae  490a              LDR      r1,|L37.216|
0000b0  6008              STR      r0,[r1,#0]
;;;2051               break ;
0000b2  e00e              B        |L37.210|
;;;2052           }
;;;2053   
;;;2054           case E_WDT_IOC_SET_INTERVAL:
;;;2055           {
;;;2056               WDT->WTCR.WTIS = (E_WDT_INTERVAL)uArgument;
0000b4  4808              LDR      r0,|L37.216|
0000b6  6800              LDR      r0,[r0,#0]
0000b8  2107              MOVS     r1,#7
0000ba  0209              LSLS     r1,r1,#8
0000bc  4388              BICS     r0,r0,r1
0000be  0229              LSLS     r1,r5,#8
0000c0  2207              MOVS     r2,#7
0000c2  0212              LSLS     r2,r2,#8
0000c4  4011              ANDS     r1,r1,r2
0000c6  4308              ORRS     r0,r0,r1
0000c8  4903              LDR      r1,|L37.216|
0000ca  6008              STR      r0,[r1,#0]
;;;2057   
;;;2058               break ;
0000cc  e001              B        |L37.210|
;;;2059           }
;;;2060          
;;;2061           default :
;;;2062           {
;;;2063               return E_DRVWDT_CMD;
0000ce  4803              LDR      r0,|L37.220|
                  |L37.208|
;;;2064           }
;;;2065       }
;;;2066   
;;;2067       return E_SUCCESS;
;;;2068   }
0000d0  bd70              POP      {r4-r6,pc}
                  |L37.210|
0000d2  bf00              NOP                            ;2000
0000d4  2000              MOVS     r0,#0                 ;2067
0000d6  e7fb              B        |L37.208|
;;;2069   
                          ENDP

                  |L37.216|
                          DCD      0x40004000
                  |L37.220|
                          DCD      0xffff9705

                          AREA ||i.DrvWDT_Open||, CODE, READONLY, ALIGN=2

                  DrvWDT_Open PROC
;;;1899   /*---------------------------------------------------------------------------------------------------------*/
;;;1900   int32_t DrvWDT_Open(E_WDT_INTERVAL WDTlevel)
000000  b510              PUSH     {r4,lr}
;;;1901   {
000002  4604              MOV      r4,r0
;;;1902   	if ((SYS->REGWRPROT & 0x01) == 0)
000004  4810              LDR      r0,|L38.72|
000006  6800              LDR      r0,[r0,#0]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
00000c  2800              CMP      r0,#0
00000e  d101              BNE      |L38.20|
;;;1903       {
;;;1904           /* The protected Registers are locked */
;;;1905           return E_DRVWDT_OPEN;
000010  480e              LDR      r0,|L38.76|
                  |L38.18|
;;;1906       }
;;;1907   
;;;1908       SYSCLK->APBCLK.WDT_EN = 1;              /* Enable WatchDog Timer Clock */   
;;;1909        
;;;1910       DrvWDT_Ioctl(E_WDT_IOC_STOP_TIMER, 0);  /* Stop WDT first */
;;;1911   
;;;1912       WDT->WTCR.WTIS = WDTlevel;              /* Select WatchDog Timer Interval */
;;;1913   
;;;1914       return E_SUCCESS;
;;;1915   }
000012  bd10              POP      {r4,pc}
                  |L38.20|
000014  480e              LDR      r0,|L38.80|
000016  6880              LDR      r0,[r0,#8]            ;1908
000018  0840              LSRS     r0,r0,#1              ;1908
00001a  0040              LSLS     r0,r0,#1              ;1908
00001c  1c40              ADDS     r0,r0,#1              ;1908
00001e  490c              LDR      r1,|L38.80|
000020  6088              STR      r0,[r1,#8]            ;1908
000022  2100              MOVS     r1,#0                 ;1910
000024  2001              MOVS     r0,#1                 ;1910
000026  f7fffffe          BL       DrvWDT_Ioctl
00002a  480a              LDR      r0,|L38.84|
00002c  6800              LDR      r0,[r0,#0]            ;1912
00002e  2107              MOVS     r1,#7                 ;1912
000030  0209              LSLS     r1,r1,#8              ;1912
000032  4388              BICS     r0,r0,r1              ;1912
000034  0221              LSLS     r1,r4,#8              ;1912
000036  2207              MOVS     r2,#7                 ;1912
000038  0212              LSLS     r2,r2,#8              ;1912
00003a  4011              ANDS     r1,r1,r2              ;1912
00003c  4308              ORRS     r0,r0,r1              ;1912
00003e  4905              LDR      r1,|L38.84|
000040  6008              STR      r0,[r1,#0]            ;1912
000042  2000              MOVS     r0,#0                 ;1914
000044  e7e5              B        |L38.18|
;;;1916   
                          ENDP

000046  0000              DCW      0x0000
                  |L38.72|
                          DCD      0x50000100
                  |L38.76|
                          DCD      0xffff9706
                  |L38.80|
                          DCD      0x50000200
                  |L38.84|
                          DCD      0x40004000

                          AREA ||i.GetTimerClock||, CODE, READONLY, ALIGN=2

                  GetTimerClock PROC
;;;77     /*---------------------------------------------------------------------------------------------------------*/
;;;78     static uint32_t GetTimerClock(E_TIMER_CHANNEL ch)
000000  b51c              PUSH     {r2-r4,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80         volatile uint8_t u8ClockSrc;
;;;81         volatile uint32_t u32clk = 0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;82             
;;;83         if ((ch == E_TMR0) || (ch == E_TMR1) || (ch == E_TMR2) || (ch == E_TMR3))
000008  2c00              CMP      r4,#0
00000a  d005              BEQ      |L39.24|
00000c  2c01              CMP      r4,#1
00000e  d003              BEQ      |L39.24|
000010  2c02              CMP      r4,#2
000012  d001              BEQ      |L39.24|
000014  2c03              CMP      r4,#3
000016  d127              BNE      |L39.104|
                  |L39.24|
;;;84         {
;;;85             u8ClockSrc = (inpw(&SYSCLK->CLKSEL1) >> (8+(ch*4))) & 0x7;
000018  4816              LDR      r0,|L39.116|
00001a  6940              LDR      r0,[r0,#0x14]
00001c  00a1              LSLS     r1,r4,#2
00001e  3108              ADDS     r1,r1,#8
000020  40c8              LSRS     r0,r0,r1
000022  0741              LSLS     r1,r0,#29
000024  0f49              LSRS     r1,r1,#29
000026  9101              STR      r1,[sp,#4]
;;;86     
;;;87             if (u8ClockSrc == 0)           
000028  4668              MOV      r0,sp
00002a  7900              LDRB     r0,[r0,#4]
00002c  2800              CMP      r0,#0
00002e  d103              BNE      |L39.56|
;;;88             {
;;;89                 u32clk = DrvSYS_GetExtClockFreq() ;     /* Option 0: Get External Clock From DrvSYS Setting */
000030  f7fffffe          BL       DrvSYS_GetExtClockFreq
000034  9000              STR      r0,[sp,#0]
000036  e01a              B        |L39.110|
                  |L39.56|
;;;90             }
;;;91             else if(u8ClockSrc == 1)
000038  4668              MOV      r0,sp
00003a  7900              LDRB     r0,[r0,#4]
00003c  2801              CMP      r0,#1
00003e  d102              BNE      |L39.70|
;;;92             {
;;;93                 u32clk = __RTC_XTAL;                    /* Option 1: 32K */
000040  03c0              LSLS     r0,r0,#15
000042  9000              STR      r0,[sp,#0]
000044  e013              B        |L39.110|
                  |L39.70|
;;;94             }
;;;95             else if(u8ClockSrc == 2)
000046  4668              MOV      r0,sp
000048  7900              LDRB     r0,[r0,#4]
00004a  2802              CMP      r0,#2
00004c  d103              BNE      |L39.86|
;;;96             {
;;;97                 u32clk = DrvSYS_GetHCLKFreq();          /* Option 2: HCLK */
00004e  f7fffffe          BL       DrvSYS_GetHCLKFreq
000052  9000              STR      r0,[sp,#0]
000054  e00b              B        |L39.110|
                  |L39.86|
;;;98             }
;;;99             else if(u8ClockSrc == 7)
000056  4668              MOV      r0,sp
000058  7900              LDRB     r0,[r0,#4]
00005a  2807              CMP      r0,#7
00005c  d102              BNE      |L39.100|
;;;100            {
;;;101                u32clk = __IRC22M;                      /* Option 7: 22MHz*/
00005e  4806              LDR      r0,|L39.120|
000060  9000              STR      r0,[sp,#0]
000062  e004              B        |L39.110|
                  |L39.100|
;;;102            }else
;;;103            {
;;;104                return E_DRVTIMER_CLOCK_RATE;
000064  4805              LDR      r0,|L39.124|
                  |L39.102|
;;;105            }
;;;106        }
;;;107        else 
;;;108            return E_DRVTIMER_CHANNEL;
;;;109                
;;;110        return u32clk;
;;;111    }
000066  bd1c              POP      {r2-r4,pc}
                  |L39.104|
000068  4804              LDR      r0,|L39.124|
00006a  1e40              SUBS     r0,r0,#1              ;108
00006c  e7fb              B        |L39.102|
                  |L39.110|
00006e  9800              LDR      r0,[sp,#0]            ;110
000070  e7f9              B        |L39.102|
;;;112    
                          ENDP

000072  0000              DCW      0x0000
                  |L39.116|
                          DCD      0x50000200
                  |L39.120|
                          DCD      0x01518000
                  |L39.124|
                          DCD      0xffff9702

                          AREA ||i.NVIC_DisableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_DisableIRQ PROC
;;;809     */
;;;810    static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;811    {
;;;812      NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L40.16|
00000a  6011              STR      r1,[r2,#0]
;;;813    }
00000c  4770              BX       lr
;;;814    
                          ENDP

00000e  0000              DCW      0x0000
                  |L40.16|
                          DCD      0xe000e180

                          AREA ||i.NVIC_EnableIRQ||, CODE, READONLY, ALIGN=2

                  NVIC_EnableIRQ PROC
;;;796     */
;;;797    static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
000000  06c2              LSLS     r2,r0,#27
;;;798    {
;;;799      NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
000002  0ed2              LSRS     r2,r2,#27
000004  2101              MOVS     r1,#1
000006  4091              LSLS     r1,r1,r2
000008  4a01              LDR      r2,|L41.16|
00000a  6011              STR      r1,[r2,#0]
;;;800    }
00000c  4770              BX       lr
;;;801    
                          ENDP

00000e  0000              DCW      0x0000
                  |L41.16|
                          DCD      0xe000e100

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;866     */
;;;867    static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;868    {
;;;869      if(IRQn < 0) {
000002  2800              CMP      r0,#0
000004  da19              BGE      |L42.58|
;;;870        SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
000006  4a1a              LDR      r2,|L42.112|
000008  0703              LSLS     r3,r0,#28
00000a  0f1b              LSRS     r3,r3,#28
00000c  3b08              SUBS     r3,r3,#8
00000e  089b              LSRS     r3,r3,#2
000010  009b              LSLS     r3,r3,#2
000012  58d2              LDR      r2,[r2,r3]
000014  0783              LSLS     r3,r0,#30
000016  0edc              LSRS     r4,r3,#27
000018  23ff              MOVS     r3,#0xff
00001a  40a3              LSLS     r3,r3,r4
00001c  439a              BICS     r2,r2,r3
00001e  078b              LSLS     r3,r1,#30
000020  0e1b              LSRS     r3,r3,#24
000022  0784              LSLS     r4,r0,#30
000024  0ee4              LSRS     r4,r4,#27
000026  40a3              LSLS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
00002a  4b11              LDR      r3,|L42.112|
00002c  0704              LSLS     r4,r0,#28
00002e  0f24              LSRS     r4,r4,#28
000030  3c08              SUBS     r4,r4,#8
000032  08a4              LSRS     r4,r4,#2
000034  00a4              LSLS     r4,r4,#2
000036  511a              STR      r2,[r3,r4]
000038  e018              B        |L42.108|
                  |L42.58|
;;;871            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;872      else {
;;;873        NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
00003a  4a0e              LDR      r2,|L42.116|
00003c  2303              MOVS     r3,#3
00003e  021b              LSLS     r3,r3,#8
000040  18d2              ADDS     r2,r2,r3
000042  0883              LSRS     r3,r0,#2
000044  009b              LSLS     r3,r3,#2
000046  58d2              LDR      r2,[r2,r3]
000048  0783              LSLS     r3,r0,#30
00004a  0edc              LSRS     r4,r3,#27
00004c  23ff              MOVS     r3,#0xff
00004e  40a3              LSLS     r3,r3,r4
000050  439a              BICS     r2,r2,r3
000052  078b              LSLS     r3,r1,#30
000054  0e1b              LSRS     r3,r3,#24
000056  0784              LSLS     r4,r0,#30
000058  0ee4              LSRS     r4,r4,#27
00005a  40a3              LSLS     r3,r3,r4
00005c  431a              ORRS     r2,r2,r3
00005e  4b05              LDR      r3,|L42.116|
000060  2403              MOVS     r4,#3
000062  0224              LSLS     r4,r4,#8
000064  191b              ADDS     r3,r3,r4
000066  0884              LSRS     r4,r0,#2
000068  00a4              LSLS     r4,r4,#2
00006a  511a              STR      r2,[r3,r4]
                  |L42.108|
;;;874            (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
;;;875    }
00006c  bd10              POP      {r4,pc}
;;;876    
                          ENDP

00006e  0000              DCW      0x0000
                  |L42.112|
                          DCD      0xe000ed1c
                  |L42.116|
                          DCD      0xe000e100

                          AREA ||i.TMR0_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR0_IRQHandler PROC
;;;158    /*---------------------------------------------------------------------------------------------------------*/
;;;159    void TMR0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;160    {   
;;;161        if ((TIMER0->TCSR.IE == 1) && (TIMER0->TISR.TIF == 1))
000002  4823              LDR      r0,|L43.144|
000004  6800              LDR      r0,[r0,#0]
000006  0080              LSLS     r0,r0,#2
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L43.40|
00000e  4820              LDR      r0,|L43.144|
000010  6880              LDR      r0,[r0,#8]
000012  07c0              LSLS     r0,r0,#31
000014  0fc0              LSRS     r0,r0,#31
000016  2800              CMP      r0,#0
000018  d006              BEQ      |L43.40|
;;;162            TIMER0->TISR.TIF = 1;
00001a  481d              LDR      r0,|L43.144|
00001c  6880              LDR      r0,[r0,#8]
00001e  0840              LSRS     r0,r0,#1
000020  0040              LSLS     r0,r0,#1
000022  1c40              ADDS     r0,r0,#1
000024  491a              LDR      r1,|L43.144|
000026  6088              STR      r0,[r1,#8]
                  |L43.40|
;;;163    
;;;164        if ((TIMER0->TEXCON.TEXEN == 1) && (TIMER0->TEXCON.TEXIEN == 1) && (TIMER0->TEXISR.TEXIF == 1))
000028  4819              LDR      r0,|L43.144|
00002a  6940              LDR      r0,[r0,#0x14]
00002c  0700              LSLS     r0,r0,#28
00002e  0fc0              LSRS     r0,r0,#31
000030  2800              CMP      r0,#0
000032  d012              BEQ      |L43.90|
000034  4816              LDR      r0,|L43.144|
000036  6940              LDR      r0,[r0,#0x14]
000038  0680              LSLS     r0,r0,#26
00003a  0fc0              LSRS     r0,r0,#31
00003c  2800              CMP      r0,#0
00003e  d00c              BEQ      |L43.90|
000040  4813              LDR      r0,|L43.144|
000042  6980              LDR      r0,[r0,#0x18]
000044  07c0              LSLS     r0,r0,#31
000046  0fc0              LSRS     r0,r0,#31
000048  2800              CMP      r0,#0
00004a  d006              BEQ      |L43.90|
;;;165            TIMER0->TEXISR.TEXIF = 1;
00004c  4810              LDR      r0,|L43.144|
00004e  6980              LDR      r0,[r0,#0x18]
000050  0840              LSRS     r0,r0,#1
000052  0040              LSLS     r0,r0,#1
000054  1c40              ADDS     r0,r0,#1
000056  490e              LDR      r1,|L43.144|
000058  6188              STR      r0,[r1,#0x18]
                  |L43.90|
;;;166    
;;;167        uTimer0Tick++;
00005a  480e              LDR      r0,|L43.148|
00005c  6800              LDR      r0,[r0,#0]  ; uTimer0Tick
00005e  1c40              ADDS     r0,r0,#1
000060  490c              LDR      r1,|L43.148|
000062  6008              STR      r0,[r1,#0]  ; uTimer0Tick
;;;168    
;;;169        if (tTime0Event[0].active)
000064  480c              LDR      r0,|L43.152|
000066  6800              LDR      r0,[r0,#0]  ; tTime0Event
000068  2800              CMP      r0,#0
00006a  d010              BEQ      |L43.142|
;;;170        {
;;;171            tTime0Event[0].curTick--;
00006c  480a              LDR      r0,|L43.152|
00006e  6880              LDR      r0,[r0,#8]  ; tTime0Event
000070  1e40              SUBS     r0,r0,#1
000072  4909              LDR      r1,|L43.152|
000074  6088              STR      r0,[r1,#8]  ; tTime0Event
;;;172            if (tTime0Event[0].curTick == 0)
000076  4608              MOV      r0,r1
000078  6880              LDR      r0,[r0,#8]  ; tTime0Event
00007a  2800              CMP      r0,#0
00007c  d107              BNE      |L43.142|
;;;173            {
;;;174                (*tTime0Event[0].funPtr)(tTime0Event[0].transParam);
00007e  460a              MOV      r2,r1
000080  6910              LDR      r0,[r2,#0x10]  ; tTime0Event
000082  68d1              LDR      r1,[r2,#0xc]  ; tTime0Event
000084  4788              BLX      r1
;;;175                tTime0Event[0].curTick = tTime0Event[0].initTick;
000086  4804              LDR      r0,|L43.152|
000088  6840              LDR      r0,[r0,#4]  ; tTime0Event
00008a  4903              LDR      r1,|L43.152|
00008c  6088              STR      r0,[r1,#8]  ; tTime0Event
                  |L43.142|
;;;176            }
;;;177        }
;;;178    }
00008e  bd10              POP      {r4,pc}
;;;179    
                          ENDP

                  |L43.144|
                          DCD      0x40010000
                  |L43.148|
                          DCD      uTimer0Tick
                  |L43.152|
                          DCD      tTime0Event

                          AREA ||i.TMR1_EnableInt||, CODE, READONLY, ALIGN=2

                  TMR1_EnableInt PROC
;;;2069   
;;;2070   void TMR1_EnableInt(TIMER_CALLBACK pfncallback)
000000  4901              LDR      r1,|L44.8|
;;;2071   {
;;;2072   	g_pfnTMR1callback = pfncallback;
000002  6008              STR      r0,[r1,#0]  ; g_pfnTMR1callback
;;;2073   }
000004  4770              BX       lr
                          ENDP

000006  0000              DCW      0x0000
                  |L44.8|
                          DCD      g_pfnTMR1callback

                          AREA ||i.TMR1_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR1_IRQHandler PROC
;;;189    /*---------------------------------------------------------------------------------------------------------*/
;;;190    void TMR1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;191    {    
;;;192        if ((TIMER1->TCSR.IE == 1) && (TIMER1->TISR.TIF == 1))
000002  481a              LDR      r0,|L45.108|
000004  6a00              LDR      r0,[r0,#0x20]
000006  0080              LSLS     r0,r0,#2
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L45.40|
00000e  4817              LDR      r0,|L45.108|
000010  6a80              LDR      r0,[r0,#0x28]
000012  07c0              LSLS     r0,r0,#31
000014  0fc0              LSRS     r0,r0,#31
000016  2800              CMP      r0,#0
000018  d006              BEQ      |L45.40|
;;;193            TIMER1->TISR.TIF = 1;
00001a  4814              LDR      r0,|L45.108|
00001c  6a80              LDR      r0,[r0,#0x28]
00001e  0840              LSRS     r0,r0,#1
000020  0040              LSLS     r0,r0,#1
000022  1c40              ADDS     r0,r0,#1
000024  4911              LDR      r1,|L45.108|
000026  6288              STR      r0,[r1,#0x28]
                  |L45.40|
;;;194    
;;;195        if ((TIMER1->TEXCON.TEXEN == 1) && (TIMER1->TEXCON.TEXIEN == 1) && (TIMER1->TEXISR.TEXIF == 1))
000028  4810              LDR      r0,|L45.108|
00002a  6b40              LDR      r0,[r0,#0x34]
00002c  0700              LSLS     r0,r0,#28
00002e  0fc0              LSRS     r0,r0,#31
000030  2800              CMP      r0,#0
000032  d012              BEQ      |L45.90|
000034  480d              LDR      r0,|L45.108|
000036  6b40              LDR      r0,[r0,#0x34]
000038  0680              LSLS     r0,r0,#26
00003a  0fc0              LSRS     r0,r0,#31
00003c  2800              CMP      r0,#0
00003e  d00c              BEQ      |L45.90|
000040  480a              LDR      r0,|L45.108|
000042  6b80              LDR      r0,[r0,#0x38]
000044  07c0              LSLS     r0,r0,#31
000046  0fc0              LSRS     r0,r0,#31
000048  2800              CMP      r0,#0
00004a  d006              BEQ      |L45.90|
;;;196            TIMER1->TEXISR.TEXIF = 1;
00004c  4807              LDR      r0,|L45.108|
00004e  6b80              LDR      r0,[r0,#0x38]
000050  0840              LSRS     r0,r0,#1
000052  0040              LSLS     r0,r0,#1
000054  1c40              ADDS     r0,r0,#1
000056  4905              LDR      r1,|L45.108|
000058  6388              STR      r0,[r1,#0x38]
                  |L45.90|
;;;197    
;;;198    	if(g_pfnTMR1callback != NULL)
00005a  4805              LDR      r0,|L45.112|
00005c  6800              LDR      r0,[r0,#0]  ; g_pfnTMR1callback
00005e  2800              CMP      r0,#0
000060  d003              BEQ      |L45.106|
;;;199    	{
;;;200            g_pfnTMR1callback(0);
000062  2000              MOVS     r0,#0
000064  4902              LDR      r1,|L45.112|
000066  6809              LDR      r1,[r1,#0]  ; g_pfnTMR1callback
000068  4788              BLX      r1
                  |L45.106|
;;;201        }
;;;202        /*uTimer1Tick++;
;;;203    
;;;204        if (tTime1Event[0].active)
;;;205        {
;;;206            tTime1Event[0].curTick--;
;;;207            if (tTime1Event[0].curTick == 0)
;;;208            {
;;;209                (*tTime1Event[0].funPtr)(tTime1Event[0].transParam);
;;;210                tTime1Event[0].curTick = tTime1Event[0].initTick;
;;;211            }
;;;212        }*/
;;;213    }
00006a  bd10              POP      {r4,pc}
;;;214    
                          ENDP

                  |L45.108|
                          DCD      0x40010000
                  |L45.112|
                          DCD      g_pfnTMR1callback

                          AREA ||i.TMR2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR2_IRQHandler PROC
;;;224    /*---------------------------------------------------------------------------------------------------------*/
;;;225    void TMR2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;226    {    
;;;227        if ((TIMER2->TCSR.IE == 1) && (TIMER2->TISR.TIF == 1))
000002  4823              LDR      r0,|L46.144|
000004  6800              LDR      r0,[r0,#0]
000006  0080              LSLS     r0,r0,#2
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L46.40|
00000e  4820              LDR      r0,|L46.144|
000010  6880              LDR      r0,[r0,#8]
000012  07c0              LSLS     r0,r0,#31
000014  0fc0              LSRS     r0,r0,#31
000016  2800              CMP      r0,#0
000018  d006              BEQ      |L46.40|
;;;228            TIMER2->TISR.TIF = 1;
00001a  481d              LDR      r0,|L46.144|
00001c  6880              LDR      r0,[r0,#8]
00001e  0840              LSRS     r0,r0,#1
000020  0040              LSLS     r0,r0,#1
000022  1c40              ADDS     r0,r0,#1
000024  491a              LDR      r1,|L46.144|
000026  6088              STR      r0,[r1,#8]
                  |L46.40|
;;;229    
;;;230        if ((TIMER2->TEXCON.TEXEN == 1) && (TIMER2->TEXCON.TEXIEN == 1) && (TIMER2->TEXISR.TEXIF == 1))
000028  4819              LDR      r0,|L46.144|
00002a  6940              LDR      r0,[r0,#0x14]
00002c  0700              LSLS     r0,r0,#28
00002e  0fc0              LSRS     r0,r0,#31
000030  2800              CMP      r0,#0
000032  d012              BEQ      |L46.90|
000034  4816              LDR      r0,|L46.144|
000036  6940              LDR      r0,[r0,#0x14]
000038  0680              LSLS     r0,r0,#26
00003a  0fc0              LSRS     r0,r0,#31
00003c  2800              CMP      r0,#0
00003e  d00c              BEQ      |L46.90|
000040  4813              LDR      r0,|L46.144|
000042  6980              LDR      r0,[r0,#0x18]
000044  07c0              LSLS     r0,r0,#31
000046  0fc0              LSRS     r0,r0,#31
000048  2800              CMP      r0,#0
00004a  d006              BEQ      |L46.90|
;;;231            TIMER2->TEXISR.TEXIF = 1;
00004c  4810              LDR      r0,|L46.144|
00004e  6980              LDR      r0,[r0,#0x18]
000050  0840              LSRS     r0,r0,#1
000052  0040              LSLS     r0,r0,#1
000054  1c40              ADDS     r0,r0,#1
000056  490e              LDR      r1,|L46.144|
000058  6188              STR      r0,[r1,#0x18]
                  |L46.90|
;;;232    
;;;233        uTimer2Tick++;
00005a  480e              LDR      r0,|L46.148|
00005c  6800              LDR      r0,[r0,#0]  ; uTimer2Tick
00005e  1c40              ADDS     r0,r0,#1
000060  490c              LDR      r1,|L46.148|
000062  6008              STR      r0,[r1,#0]  ; uTimer2Tick
;;;234    
;;;235        if (tTime2Event[0].active)
000064  480c              LDR      r0,|L46.152|
000066  6800              LDR      r0,[r0,#0]  ; tTime2Event
000068  2800              CMP      r0,#0
00006a  d010              BEQ      |L46.142|
;;;236        {
;;;237            tTime2Event[0].curTick--;
00006c  480a              LDR      r0,|L46.152|
00006e  6880              LDR      r0,[r0,#8]  ; tTime2Event
000070  1e40              SUBS     r0,r0,#1
000072  4909              LDR      r1,|L46.152|
000074  6088              STR      r0,[r1,#8]  ; tTime2Event
;;;238            if (tTime2Event[0].curTick == 0)
000076  4608              MOV      r0,r1
000078  6880              LDR      r0,[r0,#8]  ; tTime2Event
00007a  2800              CMP      r0,#0
00007c  d107              BNE      |L46.142|
;;;239            {
;;;240                (*tTime2Event[0].funPtr)(tTime2Event[0].transParam);
00007e  460a              MOV      r2,r1
000080  6910              LDR      r0,[r2,#0x10]  ; tTime2Event
000082  68d1              LDR      r1,[r2,#0xc]  ; tTime2Event
000084  4788              BLX      r1
;;;241                tTime2Event[0].curTick = tTime2Event[0].initTick;
000086  4804              LDR      r0,|L46.152|
000088  6840              LDR      r0,[r0,#4]  ; tTime2Event
00008a  4903              LDR      r1,|L46.152|
00008c  6088              STR      r0,[r1,#8]  ; tTime2Event
                  |L46.142|
;;;242            }
;;;243        }
;;;244    }
00008e  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  |L46.144|
                          DCD      0x40110000
                  |L46.148|
                          DCD      uTimer2Tick
                  |L46.152|
                          DCD      tTime2Event

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                  TMR3_IRQHandler PROC
;;;255    /*---------------------------------------------------------------------------------------------------------*/
;;;256    void TMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;257    {
;;;258        if ((TIMER3->TCSR.IE == 1) && (TIMER3->TISR.TIF == 1))
000002  4823              LDR      r0,|L47.144|
000004  6a00              LDR      r0,[r0,#0x20]
000006  0080              LSLS     r0,r0,#2
000008  0fc0              LSRS     r0,r0,#31
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L47.40|
00000e  4820              LDR      r0,|L47.144|
000010  6a80              LDR      r0,[r0,#0x28]
000012  07c0              LSLS     r0,r0,#31
000014  0fc0              LSRS     r0,r0,#31
000016  2800              CMP      r0,#0
000018  d006              BEQ      |L47.40|
;;;259            TIMER3->TISR.TIF = 1;
00001a  481d              LDR      r0,|L47.144|
00001c  6a80              LDR      r0,[r0,#0x28]
00001e  0840              LSRS     r0,r0,#1
000020  0040              LSLS     r0,r0,#1
000022  1c40              ADDS     r0,r0,#1
000024  491a              LDR      r1,|L47.144|
000026  6288              STR      r0,[r1,#0x28]
                  |L47.40|
;;;260    
;;;261        if ((TIMER3->TEXCON.TEXEN == 1) && (TIMER3->TEXCON.TEXIEN == 1) && (TIMER3->TEXISR.TEXIF == 1))
000028  4819              LDR      r0,|L47.144|
00002a  6b40              LDR      r0,[r0,#0x34]
00002c  0700              LSLS     r0,r0,#28
00002e  0fc0              LSRS     r0,r0,#31
000030  2800              CMP      r0,#0
000032  d012              BEQ      |L47.90|
000034  4816              LDR      r0,|L47.144|
000036  6b40              LDR      r0,[r0,#0x34]
000038  0680              LSLS     r0,r0,#26
00003a  0fc0              LSRS     r0,r0,#31
00003c  2800              CMP      r0,#0
00003e  d00c              BEQ      |L47.90|
000040  4813              LDR      r0,|L47.144|
000042  6b80              LDR      r0,[r0,#0x38]
000044  07c0              LSLS     r0,r0,#31
000046  0fc0              LSRS     r0,r0,#31
000048  2800              CMP      r0,#0
00004a  d006              BEQ      |L47.90|
;;;262            TIMER3->TEXISR.TEXIF = 1;
00004c  4810              LDR      r0,|L47.144|
00004e  6b80              LDR      r0,[r0,#0x38]
000050  0840              LSRS     r0,r0,#1
000052  0040              LSLS     r0,r0,#1
000054  1c40              ADDS     r0,r0,#1
000056  490e              LDR      r1,|L47.144|
000058  6388              STR      r0,[r1,#0x38]
                  |L47.90|
;;;263    
;;;264        uTimer3Tick++;
00005a  480e              LDR      r0,|L47.148|
00005c  6800              LDR      r0,[r0,#0]  ; uTimer3Tick
00005e  1c40              ADDS     r0,r0,#1
000060  490c              LDR      r1,|L47.148|
000062  6008              STR      r0,[r1,#0]  ; uTimer3Tick
;;;265    
;;;266        if (tTime3Event[0].active)
000064  480c              LDR      r0,|L47.152|
000066  6800              LDR      r0,[r0,#0]  ; tTime3Event
000068  2800              CMP      r0,#0
00006a  d010              BEQ      |L47.142|
;;;267        {
;;;268            tTime3Event[0].curTick--;
00006c  480a              LDR      r0,|L47.152|
00006e  6880              LDR      r0,[r0,#8]  ; tTime3Event
000070  1e40              SUBS     r0,r0,#1
000072  4909              LDR      r1,|L47.152|
000074  6088              STR      r0,[r1,#8]  ; tTime3Event
;;;269            if (tTime3Event[0].curTick == 0)
000076  4608              MOV      r0,r1
000078  6880              LDR      r0,[r0,#8]  ; tTime3Event
00007a  2800              CMP      r0,#0
00007c  d107              BNE      |L47.142|
;;;270            {
;;;271                (*tTime3Event[0].funPtr)(tTime3Event[0].transParam);
00007e  460a              MOV      r2,r1
000080  6910              LDR      r0,[r2,#0x10]  ; tTime3Event
000082  68d1              LDR      r1,[r2,#0xc]  ; tTime3Event
000084  4788              BLX      r1
;;;272                tTime3Event[0].curTick = tTime3Event[0].initTick;
000086  4804              LDR      r0,|L47.152|
000088  6840              LDR      r0,[r0,#4]  ; tTime3Event
00008a  4903              LDR      r1,|L47.152|
00008c  6088              STR      r0,[r1,#8]  ; tTime3Event
                  |L47.142|
;;;273            }
;;;274        }
;;;275    }
00008e  bd10              POP      {r4,pc}
;;;276    
                          ENDP

                  |L47.144|
                          DCD      0x40110000
                  |L47.148|
                          DCD      uTimer3Tick
                  |L47.152|
                          DCD      tTime3Event

                          AREA ||i.WDT_IRQHandler||, CODE, READONLY, ALIGN=2

                  WDT_IRQHandler PROC
;;;1870   /*---------------------------------------------------------------------------------------------------------*/
;;;1871   void WDT_IRQHandler(void)
000000  b508              PUSH     {r3,lr}
;;;1872   {
;;;1873       volatile uint32_t uWakeupFlag;
;;;1874   
;;;1875       uWakeupFlag = WDT->WTCR.WTWKF;  /* Stored WDT wakeup flag */
000002  480a              LDR      r0,|L48.44|
000004  6800              LDR      r0,[r0,#0]
000006  0680              LSLS     r0,r0,#26
000008  0fc0              LSRS     r0,r0,#31
00000a  9000              STR      r0,[sp,#0]
;;;1876   
;;;1877       WDT->WTCR.WTIF = 1;             /* Clear the WDT INT Flag */
00000c  4807              LDR      r0,|L48.44|
00000e  6800              LDR      r0,[r0,#0]
000010  2108              MOVS     r1,#8
000012  4388              BICS     r0,r0,r1
000014  3008              ADDS     r0,r0,#8
000016  4905              LDR      r1,|L48.44|
000018  6008              STR      r0,[r1,#0]
;;;1878   
;;;1879       if (fnCallBack_WDT)        
00001a  4805              LDR      r0,|L48.48|
00001c  6800              LDR      r0,[r0,#0]  ; fnCallBack_WDT
00001e  2800              CMP      r0,#0
000020  d003              BEQ      |L48.42|
;;;1880       {
;;;1881           fnCallBack_WDT(uWakeupFlag);
000022  4903              LDR      r1,|L48.48|
000024  9800              LDR      r0,[sp,#0]
000026  6809              LDR      r1,[r1,#0]  ; fnCallBack_WDT
000028  4788              BLX      r1
                  |L48.42|
;;;1882       }
;;;1883   }
00002a  bd08              POP      {r3,pc}
;;;1884   
                          ENDP

                  |L48.44|
                          DCD      0x40004000
                  |L48.48|
                          DCD      fnCallBack_WDT

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        20
                  tTime1Event
                          %        20
                  tTime2Event
                          %        20
                  tTime3Event
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  CH_OFFSET
                          DCD      0x00000000
                          DCD      0x00000020
                          DCD      0x00100000
                          DCD      0x00100020

                          AREA ||.data||, DATA, ALIGN=2

                  g_pfnTMR1callback
                          DCD      0x00000000
                  bIsTimer0Initial
                          DCD      0x00000000
                  bIsTimer1Initial
                          DCD      0x00000000
                  bIsTimer2Initial
                          DCD      0x00000000
                  bIsTimer3Initial
                          DCD      0x00000000
                  bIsTimer0Used
                          DCD      0x00000000
                  bIsTimer1Used
                          DCD      0x00000000
                  bIsTimer2Used
                          DCD      0x00000000
                  bIsTimer3Used
                          DCD      0x00000000
                  bIsSetTime0Event
                          DCD      0x00000000
                  bIsSetTime1Event
                          DCD      0x00000000
                  bIsSetTime2Event
                          DCD      0x00000000
                  bIsSetTime3Event
                          DCD      0x00000000
                  uTimer0Tick
                          DCD      0x00000000
                  uTimer1Tick
                          DCD      0x00000000
                  uTimer2Tick
                          DCD      0x00000000
                  uTimer3Tick
                          DCD      0x00000000
                  uTime0EventCount
                          DCD      0x00000000
                  uTime1EventCount
                          DCD      0x00000000
                  uTime2EventCount
                          DCD      0x00000000
                  uTime3EventCount
                          DCD      0x00000000
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer1TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer2TickPerSecond
                          DCD      0x00000000
                  _sys_uTimer3TickPerSecond
                          DCD      0x00000000
                  u32EXTClockFreq
                          DCD      0x00b71b00
                  fnCallBack_WDT
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L295.24|
                  |L295.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L295.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L295.14|
                          ENDP

