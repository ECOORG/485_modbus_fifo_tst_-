; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mb.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\mb.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\BSP_lib\Inc\Driver -I.\CMSIS\CMOSupport -I.\CMSIS\NUC1xxSupport -I.\User\inc -I.\modbus\include -I.\modbus\MBport -I.\modbus\rtu -I"D:\Program Files\keil\ARM\RV31\INC" -I"D:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"D:\Program Files\keil\ARM\Inc\Nuvoton\NUC1xx" --omf_browse=.\obj\mb.crf modbus\mb.c]
                          THUMB

                          AREA ||i.eMBClose||, CODE, READONLY, ALIGN=2

                  eMBClose PROC
;;;272    eMBErrorCode
;;;273    eMBClose( void )
000000  b510              PUSH     {r4,lr}
;;;274    {
;;;275        eMBErrorCode    eStatus = MB_ENOERR;
000002  2400              MOVS     r4,#0
;;;276    
;;;277        if( eMBState == STATE_DISABLED )
000004  4807              LDR      r0,|L1.36|
000006  7800              LDRB     r0,[r0,#0]  ; eMBState
000008  2801              CMP      r0,#1
00000a  d107              BNE      |L1.28|
;;;278        {
;;;279            if( pvMBFrameCloseCur != NULL )
00000c  4806              LDR      r0,|L1.40|
00000e  6800              LDR      r0,[r0,#0]  ; pvMBFrameCloseCur
000010  2800              CMP      r0,#0
000012  d004              BEQ      |L1.30|
;;;280            {
;;;281                pvMBFrameCloseCur(  );
000014  4804              LDR      r0,|L1.40|
000016  6800              LDR      r0,[r0,#0]  ; pvMBFrameCloseCur
000018  4780              BLX      r0
00001a  e000              B        |L1.30|
                  |L1.28|
;;;282            }
;;;283        }
;;;284        else
;;;285        {
;;;286            eStatus = MB_EILLSTATE;
00001c  2406              MOVS     r4,#6
                  |L1.30|
;;;287        }
;;;288        return eStatus;
00001e  4620              MOV      r0,r4
;;;289    }
000020  bd10              POP      {r4,pc}
;;;290    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      eMBState
                  |L1.40|
                          DCD      pvMBFrameCloseCur

                          AREA ||i.eMBDisable||, CODE, READONLY, ALIGN=2

                  eMBDisable PROC
;;;309    eMBErrorCode
;;;310    eMBDisable( void )
000000  b510              PUSH     {r4,lr}
;;;311    {
;;;312        eMBErrorCode    eStatus;
;;;313    
;;;314        if( eMBState == STATE_ENABLED )
000002  480a              LDR      r0,|L2.44|
000004  7800              LDRB     r0,[r0,#0]  ; eMBState
000006  2800              CMP      r0,#0
000008  d107              BNE      |L2.26|
;;;315        {
;;;316            pvMBFrameStopCur(  );
00000a  4809              LDR      r0,|L2.48|
00000c  6800              LDR      r0,[r0,#0]  ; pvMBFrameStopCur
00000e  4780              BLX      r0
;;;317            eMBState = STATE_DISABLED;
000010  2001              MOVS     r0,#1
000012  4906              LDR      r1,|L2.44|
000014  7008              STRB     r0,[r1,#0]
;;;318            eStatus = MB_ENOERR;
000016  2400              MOVS     r4,#0
000018  e006              B        |L2.40|
                  |L2.26|
;;;319        }
;;;320        else if( eMBState == STATE_DISABLED )
00001a  4804              LDR      r0,|L2.44|
00001c  7800              LDRB     r0,[r0,#0]  ; eMBState
00001e  2801              CMP      r0,#1
000020  d101              BNE      |L2.38|
;;;321        {
;;;322            eStatus = MB_ENOERR;
000022  2400              MOVS     r4,#0
000024  e000              B        |L2.40|
                  |L2.38|
;;;323        }
;;;324        else
;;;325        {
;;;326            eStatus = MB_EILLSTATE;
000026  2406              MOVS     r4,#6
                  |L2.40|
;;;327        }
;;;328        return eStatus;
000028  4620              MOV      r0,r4
;;;329    }
00002a  bd10              POP      {r4,pc}
;;;330    
                          ENDP

                  |L2.44|
                          DCD      eMBState
                  |L2.48|
                          DCD      pvMBFrameStopCur

                          AREA ||i.eMBEnable||, CODE, READONLY, ALIGN=2

                  eMBEnable PROC
;;;291    eMBErrorCode
;;;292    eMBEnable( void )
000000  b510              PUSH     {r4,lr}
;;;293    {
;;;294        eMBErrorCode    eStatus = MB_ENOERR;
000002  2400              MOVS     r4,#0
;;;295    
;;;296        if( eMBState == STATE_DISABLED )
000004  4806              LDR      r0,|L3.32|
000006  7800              LDRB     r0,[r0,#0]  ; eMBState
000008  2801              CMP      r0,#1
00000a  d106              BNE      |L3.26|
;;;297        {
;;;298            /* Activate the protocol stack. */
;;;299            pvMBFrameStartCur(  );
00000c  4805              LDR      r0,|L3.36|
00000e  6800              LDR      r0,[r0,#0]  ; pvMBFrameStartCur
000010  4780              BLX      r0
;;;300            eMBState = STATE_ENABLED;
000012  2000              MOVS     r0,#0
000014  4902              LDR      r1,|L3.32|
000016  7008              STRB     r0,[r1,#0]
000018  e000              B        |L3.28|
                  |L3.26|
;;;301        }
;;;302        else
;;;303        {
;;;304            eStatus = MB_EILLSTATE;
00001a  2406              MOVS     r4,#6
                  |L3.28|
;;;305        }
;;;306        return eStatus;
00001c  4620              MOV      r0,r4
;;;307    }
00001e  bd10              POP      {r4,pc}
;;;308    
                          ENDP

                  |L3.32|
                          DCD      eMBState
                  |L3.36|
                          DCD      pvMBFrameStartCur

                          AREA ||i.eMBInit||, CODE, READONLY, ALIGN=2

                  eMBInit PROC
;;;129    eMBErrorCode
;;;130    eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
000000  b5f8              PUSH     {r3-r7,lr}
;;;131    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;132        eMBErrorCode    eStatus = MB_ENOERR;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;133    
;;;134        /* check preconditions */
;;;135        if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
00000e  2c00              CMP      r4,#0
000010  d003              BEQ      |L4.26|
;;;136            ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
000012  2c01              CMP      r4,#1
000014  db01              BLT      |L4.26|
000016  2cf7              CMP      r4,#0xf7
000018  dd02              BLE      |L4.32|
                  |L4.26|
;;;137        {
;;;138            eStatus = MB_EINVAL;
00001a  2002              MOVS     r0,#2
00001c  9000              STR      r0,[sp,#0]
00001e  e037              B        |L4.144|
                  |L4.32|
;;;139        }
;;;140        else
;;;141        {
;;;142            ucMBAddress = ucSlaveAddress;
000020  481c              LDR      r0,|L4.148|
000022  7004              STRB     r4,[r0,#0]
;;;143    
;;;144            switch ( eMode )
000024  2d00              CMP      r5,#0
000026  d120              BNE      |L4.106|
;;;145            {
;;;146    #if MB_RTU_ENABLED > 0
;;;147            case MB_RTU:
;;;148                pvMBFrameStartCur = eMBRTUStart;
000028  481b              LDR      r0,|L4.152|
00002a  491c              LDR      r1,|L4.156|
00002c  6008              STR      r0,[r1,#0]  ; pvMBFrameStartCur
;;;149                pvMBFrameStopCur = eMBRTUStop;
00002e  481c              LDR      r0,|L4.160|
000030  491c              LDR      r1,|L4.164|
000032  6008              STR      r0,[r1,#0]  ; pvMBFrameStopCur
;;;150                peMBFrameSendCur = eMBRTUSend;
000034  481c              LDR      r0,|L4.168|
000036  491d              LDR      r1,|L4.172|
000038  6008              STR      r0,[r1,#0]  ; peMBFrameSendCur
;;;151                peMBFrameReceiveCur = eMBRTUReceive;
00003a  481d              LDR      r0,|L4.176|
00003c  491d              LDR      r1,|L4.180|
00003e  6008              STR      r0,[r1,#0]  ; peMBFrameReceiveCur
;;;152                pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
000040  2000              MOVS     r0,#0
000042  491d              LDR      r1,|L4.184|
000044  6008              STR      r0,[r1,#0]  ; pvMBFrameCloseCur
;;;153                pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
000046  481d              LDR      r0,|L4.188|
000048  491d              LDR      r1,|L4.192|
00004a  6008              STR      r0,[r1,#0]  ; pxMBFrameCBByteReceived
;;;154                pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
00004c  481d              LDR      r0,|L4.196|
00004e  491e              LDR      r1,|L4.200|
000050  6008              STR      r0,[r1,#0]  ; pxMBFrameCBTransmitterEmpty
;;;155                pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
000052  481e              LDR      r0,|L4.204|
000054  491e              LDR      r1,|L4.208|
000056  6008              STR      r0,[r1,#0]  ; pxMBPortCBTimerExpired
;;;156    
;;;157                eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
000058  463a              MOV      r2,r7
00005a  4631              MOV      r1,r6
00005c  480d              LDR      r0,|L4.148|
00005e  7800              LDRB     r0,[r0,#0]  ; ucMBAddress
000060  9b06              LDR      r3,[sp,#0x18]
000062  f7fffffe          BL       eMBRTUInit
000066  9000              STR      r0,[sp,#0]
;;;158                break;
000068  e002              B        |L4.112|
                  |L4.106|
;;;159    #endif
;;;160    #if MB_ASCII_ENABLED > 0
;;;161            case MB_ASCII:
;;;162                pvMBFrameStartCur = eMBASCIIStart;
;;;163                pvMBFrameStopCur = eMBASCIIStop;
;;;164                peMBFrameSendCur = eMBASCIISend;
;;;165                peMBFrameReceiveCur = eMBASCIIReceive;
;;;166                pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
;;;167                pxMBFrameCBByteReceived = xMBASCIIReceiveFSM;
;;;168                pxMBFrameCBTransmitterEmpty = xMBASCIITransmitFSM;
;;;169                pxMBPortCBTimerExpired = xMBASCIITimerT1SExpired;
;;;170    
;;;171                eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
;;;172                break;
;;;173    #endif
;;;174            default:
;;;175                eStatus = MB_EINVAL;
00006a  2002              MOVS     r0,#2
00006c  9000              STR      r0,[sp,#0]
00006e  bf00              NOP                            ;144
                  |L4.112|
000070  bf00              NOP                            ;158
;;;176            }
;;;177    
;;;178            if( eStatus == MB_ENOERR )
000072  9800              LDR      r0,[sp,#0]
000074  2800              CMP      r0,#0
000076  d10b              BNE      |L4.144|
;;;179            {
;;;180                if( !xMBPortEventInit(  ) )
000078  f7fffffe          BL       xMBPortEventInit
00007c  2800              CMP      r0,#0
00007e  d102              BNE      |L4.134|
;;;181                {
;;;182                    /* port dependent event module initalization failed. */
;;;183                    eStatus = MB_EPORTERR;
000080  2003              MOVS     r0,#3
000082  9000              STR      r0,[sp,#0]
000084  e004              B        |L4.144|
                  |L4.134|
;;;184                }
;;;185                else
;;;186                {
;;;187                    eMBCurrentMode = eMode;
000086  4813              LDR      r0,|L4.212|
000088  7005              STRB     r5,[r0,#0]
;;;188                    eMBState = STATE_DISABLED;
00008a  2001              MOVS     r0,#1
00008c  4912              LDR      r1,|L4.216|
00008e  7008              STRB     r0,[r1,#0]
                  |L4.144|
;;;189                }
;;;190            }
;;;191        }
;;;192        return eStatus;
000090  9800              LDR      r0,[sp,#0]
;;;193    }
000092  bdf8              POP      {r3-r7,pc}
;;;194    
                          ENDP

                  |L4.148|
                          DCD      ucMBAddress
                  |L4.152|
                          DCD      eMBRTUStart
                  |L4.156|
                          DCD      pvMBFrameStartCur
                  |L4.160|
                          DCD      eMBRTUStop
                  |L4.164|
                          DCD      pvMBFrameStopCur
                  |L4.168|
                          DCD      eMBRTUSend
                  |L4.172|
                          DCD      peMBFrameSendCur
                  |L4.176|
                          DCD      eMBRTUReceive
                  |L4.180|
                          DCD      peMBFrameReceiveCur
                  |L4.184|
                          DCD      pvMBFrameCloseCur
                  |L4.188|
                          DCD      xMBRTUReceiveFSM
                  |L4.192|
                          DCD      pxMBFrameCBByteReceived
                  |L4.196|
                          DCD      xMBRTUTransmitFSM
                  |L4.200|
                          DCD      pxMBFrameCBTransmitterEmpty
                  |L4.204|
                          DCD      xMBRTUTimerT35Expired
                  |L4.208|
                          DCD      pxMBPortCBTimerExpired
                  |L4.212|
                          DCD      eMBCurrentMode
                  |L4.216|
                          DCD      eMBState

                          AREA ||i.eMBPoll||, CODE, READONLY, ALIGN=2

                  eMBPoll PROC
;;;331    eMBErrorCode
;;;332    eMBPoll( void )
000000  b538              PUSH     {r3-r5,lr}
;;;333    {
;;;334        static UCHAR   *ucMBFrame;
;;;335        static UCHAR    ucRcvAddress;
;;;336        static UCHAR    ucFunctionCode;
;;;337        static USHORT   usLength;
;;;338        static eMBException eException;
;;;339    
;;;340        int             i;
;;;341        eMBErrorCode    eStatus = MB_ENOERR;
000002  2500              MOVS     r5,#0
;;;342        eMBEventType    eEvent;
;;;343    
;;;344        /* Check if the protocol stack is ready. */
;;;345        if( eMBState != STATE_ENABLED )
000004  4845              LDR      r0,|L5.284|
000006  7800              LDRB     r0,[r0,#0]  ; eMBState
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L5.16|
;;;346        {
;;;347            return MB_EILLSTATE;
00000c  2006              MOVS     r0,#6
                  |L5.14|
;;;348        }
;;;349    
;;;350        /* Check if there is a event available. If not return control to caller.
;;;351         * Otherwise we will handle the event. */
;;;352        if( xMBPortEventGet( &eEvent ) == TRUE )
;;;353        {
;;;354            switch ( eEvent )
;;;355            {
;;;356            case EV_READY:
;;;357                break;
;;;358    
;;;359            case EV_FRAME_RECEIVED:
;;;360                eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
;;;361                if( eStatus == MB_ENOERR )
;;;362                {
;;;363                    /* Check if the frame is for us. If not ignore the frame. */
;;;364                    if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
;;;365                    {
;;;366                        ( void )xMBPortEventPost( EV_EXECUTE );
;;;367                    }
;;;368                }
;;;369                break;
;;;370    
;;;371            case EV_EXECUTE:
;;;372                ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
;;;373                eException = MB_EX_ILLEGAL_FUNCTION;
;;;374                for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
;;;375                {
;;;376                    /* No more function handlers registered. Abort. */
;;;377                    if( xFuncHandlers[i].ucFunctionCode == 0 )
;;;378                    {
;;;379                        break;
;;;380                    }
;;;381                    else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
;;;382                    {
;;;383                        eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
;;;384                        break;
;;;385                    }
;;;386                }
;;;387    
;;;388                /* If the request was not sent to the broadcast address we
;;;389                 * return a reply. */
;;;390                if( ucRcvAddress != MB_ADDRESS_BROADCAST )
;;;391                {
;;;392                    if( eException != MB_EX_NONE )
;;;393                    {
;;;394                        /* An exception occured. Build an error frame. */
;;;395                        usLength = 0;
;;;396                        ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
;;;397                        ucMBFrame[usLength++] = eException;
;;;398                    }
;;;399                    if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
;;;400                    {
;;;401                        vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
;;;402                    }                
;;;403                    eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
;;;404                }
;;;405                break;
;;;406    
;;;407            case EV_FRAME_SENT:
;;;408                break;
;;;409            }
;;;410        }
;;;411        return MB_ENOERR;
;;;412    }
00000e  bd38              POP      {r3-r5,pc}
                  |L5.16|
000010  4668              MOV      r0,sp                 ;352
000012  f7fffffe          BL       xMBPortEventGet
000016  2801              CMP      r0,#1                 ;352
000018  d17d              BNE      |L5.278|
00001a  4668              MOV      r0,sp                 ;354
00001c  7800              LDRB     r0,[r0,#0]            ;354
00001e  2800              CMP      r0,#0                 ;354
000020  d006              BEQ      |L5.48|
000022  2801              CMP      r0,#1                 ;354
000024  d005              BEQ      |L5.50|
000026  2802              CMP      r0,#2                 ;354
000028  d01a              BEQ      |L5.96|
00002a  2803              CMP      r0,#3                 ;354
00002c  d172              BNE      |L5.276|
00002e  e070              B        |L5.274|
                  |L5.48|
000030  e070              B        |L5.276|
                  |L5.50|
000032  4a3b              LDR      r2,|L5.288|
000034  493b              LDR      r1,|L5.292|
000036  483c              LDR      r0,|L5.296|
000038  4b3c              LDR      r3,|L5.300|
00003a  681b              LDR      r3,[r3,#0]            ;360  ; peMBFrameReceiveCur
00003c  4798              BLX      r3                    ;360
00003e  4605              MOV      r5,r0                 ;360
000040  2d00              CMP      r5,#0                 ;361
000042  d10c              BNE      |L5.94|
000044  4838              LDR      r0,|L5.296|
000046  7800              LDRB     r0,[r0,#0]            ;364  ; ucRcvAddress
000048  4939              LDR      r1,|L5.304|
00004a  7809              LDRB     r1,[r1,#0]            ;364  ; ucMBAddress
00004c  4288              CMP      r0,r1                 ;364
00004e  d003              BEQ      |L5.88|
000050  4835              LDR      r0,|L5.296|
000052  7800              LDRB     r0,[r0,#0]            ;364  ; ucRcvAddress
000054  2800              CMP      r0,#0                 ;364
000056  d102              BNE      |L5.94|
                  |L5.88|
000058  2002              MOVS     r0,#2                 ;366
00005a  f7fffffe          BL       xMBPortEventPost
                  |L5.94|
00005e  e059              B        |L5.276|
                  |L5.96|
000060  4830              LDR      r0,|L5.292|
000062  6800              LDR      r0,[r0,#0]            ;372  ; ucMBFrame
000064  7800              LDRB     r0,[r0,#0]            ;372
000066  4933              LDR      r1,|L5.308|
000068  7008              STRB     r0,[r1,#0]            ;372
00006a  2001              MOVS     r0,#1                 ;373
00006c  4932              LDR      r1,|L5.312|
00006e  7008              STRB     r0,[r1,#0]            ;373
000070  2400              MOVS     r4,#0                 ;374
000072  e018              B        |L5.166|
                  |L5.116|
000074  00e0              LSLS     r0,r4,#3              ;377
000076  4931              LDR      r1,|L5.316|
000078  5c08              LDRB     r0,[r1,r0]            ;377
00007a  2800              CMP      r0,#0                 ;377
00007c  d100              BNE      |L5.128|
00007e  e014              B        |L5.170|
                  |L5.128|
000080  00e0              LSLS     r0,r4,#3              ;381
000082  492e              LDR      r1,|L5.316|
000084  5c08              LDRB     r0,[r1,r0]            ;381
000086  492b              LDR      r1,|L5.308|
000088  7809              LDRB     r1,[r1,#0]            ;381  ; ucFunctionCode
00008a  4288              CMP      r0,r1                 ;381
00008c  d10a              BNE      |L5.164|
00008e  00e0              LSLS     r0,r4,#3              ;383
000090  492a              LDR      r1,|L5.316|
000092  1840              ADDS     r0,r0,r1              ;383
000094  4922              LDR      r1,|L5.288|
000096  6842              LDR      r2,[r0,#4]            ;383
000098  4822              LDR      r0,|L5.292|
00009a  6800              LDR      r0,[r0,#0]            ;383  ; ucMBFrame
00009c  4790              BLX      r2                    ;383
00009e  4926              LDR      r1,|L5.312|
0000a0  7008              STRB     r0,[r1,#0]            ;383
0000a2  e002              B        |L5.170|
                  |L5.164|
0000a4  1c64              ADDS     r4,r4,#1              ;374
                  |L5.166|
0000a6  2c10              CMP      r4,#0x10              ;374
0000a8  dbe4              BLT      |L5.116|
                  |L5.170|
0000aa  bf00              NOP                            ;379
0000ac  481e              LDR      r0,|L5.296|
0000ae  7800              LDRB     r0,[r0,#0]            ;390  ; ucRcvAddress
0000b0  2800              CMP      r0,#0                 ;390
0000b2  d02c              BEQ      |L5.270|
0000b4  4820              LDR      r0,|L5.312|
0000b6  7800              LDRB     r0,[r0,#0]            ;392  ; eException
0000b8  2800              CMP      r0,#0                 ;392
0000ba  d019              BEQ      |L5.240|
0000bc  2000              MOVS     r0,#0                 ;395
0000be  4918              LDR      r1,|L5.288|
0000c0  8008              STRH     r0,[r1,#0]            ;395
0000c2  481c              LDR      r0,|L5.308|
0000c4  7800              LDRB     r0,[r0,#0]            ;396  ; ucFunctionCode
0000c6  2180              MOVS     r1,#0x80              ;396
0000c8  4308              ORRS     r0,r0,r1              ;396
0000ca  4915              LDR      r1,|L5.288|
0000cc  880a              LDRH     r2,[r1,#0]            ;396  ; usLength
0000ce  8809              LDRH     r1,[r1,#0]            ;396  ; usLength
0000d0  1c49              ADDS     r1,r1,#1              ;396
0000d2  4b13              LDR      r3,|L5.288|
0000d4  8019              STRH     r1,[r3,#0]            ;396
0000d6  4913              LDR      r1,|L5.292|
0000d8  6809              LDR      r1,[r1,#0]            ;396  ; ucMBFrame
0000da  5488              STRB     r0,[r1,r2]            ;396
0000dc  4816              LDR      r0,|L5.312|
0000de  7802              LDRB     r2,[r0,#0]            ;397  ; eException
0000e0  4618              MOV      r0,r3                 ;397
0000e2  8801              LDRH     r1,[r0,#0]            ;397  ; usLength
0000e4  8800              LDRH     r0,[r0,#0]            ;397  ; usLength
0000e6  1c40              ADDS     r0,r0,#1              ;397
0000e8  8018              STRH     r0,[r3,#0]            ;397
0000ea  480e              LDR      r0,|L5.292|
0000ec  6800              LDR      r0,[r0,#0]            ;397  ; ucMBFrame
0000ee  5442              STRB     r2,[r0,r1]            ;397
                  |L5.240|
0000f0  4813              LDR      r0,|L5.320|
0000f2  7800              LDRB     r0,[r0,#0]            ;399  ; eMBCurrentMode
0000f4  2801              CMP      r0,#1                 ;399
0000f6  d100              BNE      |L5.250|
0000f8  bf00              NOP                            ;399
                  |L5.250|
0000fa  4809              LDR      r0,|L5.288|
0000fc  8802              LDRH     r2,[r0,#0]            ;403  ; usLength
0000fe  4809              LDR      r0,|L5.292|
000100  6801              LDR      r1,[r0,#0]            ;403  ; ucMBFrame
000102  480b              LDR      r0,|L5.304|
000104  7800              LDRB     r0,[r0,#0]            ;403  ; ucMBAddress
000106  4b0f              LDR      r3,|L5.324|
000108  681b              LDR      r3,[r3,#0]            ;403  ; peMBFrameSendCur
00010a  4798              BLX      r3                    ;403
00010c  4605              MOV      r5,r0                 ;403
                  |L5.270|
00010e  e001              B        |L5.276|
000110  e001              B        |L5.278|
                  |L5.274|
000112  bf00              NOP                            ;408
                  |L5.276|
000114  bf00              NOP                            ;357
                  |L5.278|
000116  2000              MOVS     r0,#0                 ;411
000118  e779              B        |L5.14|
                          ENDP

00011a  0000              DCW      0x0000
                  |L5.284|
                          DCD      eMBState
                  |L5.288|
                          DCD      usLength
                  |L5.292|
                          DCD      ucMBFrame
                  |L5.296|
                          DCD      ucRcvAddress
                  |L5.300|
                          DCD      peMBFrameReceiveCur
                  |L5.304|
                          DCD      ucMBAddress
                  |L5.308|
                          DCD      ucFunctionCode
                  |L5.312|
                          DCD      eException
                  |L5.316|
                          DCD      xFuncHandlers
                  |L5.320|
                          DCD      eMBCurrentMode
                  |L5.324|
                          DCD      peMBFrameSendCur

                          AREA ||i.eMBRegisterCB||, CODE, READONLY, ALIGN=2

                  eMBRegisterCB PROC
;;;225    eMBErrorCode
;;;226    eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
000000  b5f8              PUSH     {r3-r7,lr}
;;;227    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;228        int             i;
;;;229        eMBErrorCode    eStatus;
;;;230    
;;;231        if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
000006  2d00              CMP      r5,#0
000008  dd3b              BLE      |L6.130|
00000a  2d7f              CMP      r5,#0x7f
00000c  dc39              BGT      |L6.130|
;;;232        {
;;;233            ENTER_CRITICAL_SECTION(  );
00000e  f7fffffe          BL       EnterCriticalSection
;;;234            if( pxHandler != NULL )
000012  2e00              CMP      r6,#0
000014  d01e              BEQ      |L6.84|
;;;235            {
;;;236                for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
000016  2400              MOVS     r4,#0
000018  e012              B        |L6.64|
                  |L6.26|
;;;237                {
;;;238                    if( ( xFuncHandlers[i].pxHandler == NULL ) ||
00001a  00e0              LSLS     r0,r4,#3
00001c  491a              LDR      r1,|L6.136|
00001e  1840              ADDS     r0,r0,r1
000020  6840              LDR      r0,[r0,#4]
000022  2800              CMP      r0,#0
000024  d004              BEQ      |L6.48|
;;;239                        ( xFuncHandlers[i].pxHandler == pxHandler ) )
000026  00e0              LSLS     r0,r4,#3
000028  1840              ADDS     r0,r0,r1
00002a  6840              LDR      r0,[r0,#4]
00002c  42b0              CMP      r0,r6
00002e  d106              BNE      |L6.62|
                  |L6.48|
;;;240                    {
;;;241                        xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
000030  00e0              LSLS     r0,r4,#3
000032  4915              LDR      r1,|L6.136|
000034  540d              STRB     r5,[r1,r0]
;;;242                        xFuncHandlers[i].pxHandler = pxHandler;
000036  00e0              LSLS     r0,r4,#3
000038  1840              ADDS     r0,r0,r1
00003a  6046              STR      r6,[r0,#4]
;;;243                        break;
00003c  e002              B        |L6.68|
                  |L6.62|
00003e  1c64              ADDS     r4,r4,#1              ;236
                  |L6.64|
000040  2c10              CMP      r4,#0x10              ;236
000042  dbea              BLT      |L6.26|
                  |L6.68|
000044  bf00              NOP      
;;;244                    }
;;;245                }
;;;246                eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
000046  2c10              CMP      r4,#0x10
000048  d001              BEQ      |L6.78|
00004a  2000              MOVS     r0,#0
00004c  e000              B        |L6.80|
                  |L6.78|
00004e  2004              MOVS     r0,#4
                  |L6.80|
000050  4607              MOV      r7,r0
000052  e013              B        |L6.124|
                  |L6.84|
;;;247            }
;;;248            else
;;;249            {
;;;250                for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
000054  2400              MOVS     r4,#0
000056  e00d              B        |L6.116|
                  |L6.88|
;;;251                {
;;;252                    if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
000058  00e0              LSLS     r0,r4,#3
00005a  490b              LDR      r1,|L6.136|
00005c  5c08              LDRB     r0,[r1,r0]
00005e  42a8              CMP      r0,r5
000060  d107              BNE      |L6.114|
;;;253                    {
;;;254                        xFuncHandlers[i].ucFunctionCode = 0;
000062  2000              MOVS     r0,#0
000064  00e1              LSLS     r1,r4,#3
000066  4a08              LDR      r2,|L6.136|
000068  5450              STRB     r0,[r2,r1]
;;;255                        xFuncHandlers[i].pxHandler = NULL;
00006a  00e1              LSLS     r1,r4,#3
00006c  1889              ADDS     r1,r1,r2
00006e  6048              STR      r0,[r1,#4]
;;;256                        break;
000070  e002              B        |L6.120|
                  |L6.114|
000072  1c64              ADDS     r4,r4,#1              ;250
                  |L6.116|
000074  2c10              CMP      r4,#0x10              ;250
000076  dbef              BLT      |L6.88|
                  |L6.120|
000078  bf00              NOP      
;;;257                    }
;;;258                }
;;;259                /* Remove can't fail. */
;;;260                eStatus = MB_ENOERR;
00007a  2700              MOVS     r7,#0
                  |L6.124|
;;;261            }
;;;262            EXIT_CRITICAL_SECTION(  );
00007c  f7fffffe          BL       ExitCriticalSection
000080  e000              B        |L6.132|
                  |L6.130|
;;;263        }
;;;264        else
;;;265        {
;;;266            eStatus = MB_EINVAL;
000082  2702              MOVS     r7,#2
                  |L6.132|
;;;267        }
;;;268        return eStatus;
000084  4638              MOV      r0,r7
;;;269    }
000086  bdf8              POP      {r3-r7,pc}
;;;270    
                          ENDP

                  |L6.136|
                          DCD      xFuncHandlers

                          AREA ||.data||, DATA, ALIGN=2

                  ucMBAddress
000000  00                DCB      0x00
                  eMBCurrentMode
000001  00                DCB      0x00
                  eMBState
000002  0200              DCB      0x02,0x00
                  peMBFrameSendCur
                          DCD      0x00000000
                  pvMBFrameStartCur
                          DCD      0x00000000
                  pvMBFrameStopCur
                          DCD      0x00000000
                  peMBFrameReceiveCur
                          DCD      0x00000000
                  pvMBFrameCloseCur
                          DCD      0x00000000
                  pxMBFrameCBByteReceived
                          DCD      0x00000000
                  pxMBFrameCBTransmitterEmpty
                          DCD      0x00000000
                  pxMBPortCBTimerExpired
                          DCD      0x00000000
                  pxMBFrameCBReceiveFSMCur
                          DCD      0x00000000
                  pxMBFrameCBTransmitFSMCur
                          DCD      0x00000000
                  xFuncHandlers
00002c  11000000          DCB      0x11,0x00,0x00,0x00
                          DCD      eMBFuncReportSlaveID
000034  04000000          DCB      0x04,0x00,0x00,0x00
                          DCD      eMBFuncReadInputRegister
00003c  03000000          DCB      0x03,0x00,0x00,0x00
                          DCD      eMBFuncReadHoldingRegister
000044  10000000          DCB      0x10,0x00,0x00,0x00
                          DCD      eMBFuncWriteMultipleHoldingRegister
00004c  06000000          DCB      0x06,0x00,0x00,0x00
                          DCD      eMBFuncWriteHoldingRegister
000054  17000000          DCB      0x17,0x00,0x00,0x00
                          DCD      eMBFuncReadWriteMultipleHoldingRegister
00005c  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      eMBFuncReadCoils
000064  05000000          DCB      0x05,0x00,0x00,0x00
                          DCD      eMBFuncWriteCoil
00006c  0f000000          DCB      0x0f,0x00,0x00,0x00
                          DCD      eMBFuncWriteMultipleCoils
000074  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      eMBFuncReadDiscreteInputs
                          %        48
                  ucMBFrame
                          DCD      0x00000000
                  ucRcvAddress
0000b0  00                DCB      0x00
                  ucFunctionCode
0000b1  00                DCB      0x00
                  usLength
0000b2  0000              DCB      0x00,0x00
                  eException
0000b4  00                DCB      0x00
