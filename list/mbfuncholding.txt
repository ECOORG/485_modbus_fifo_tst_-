; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mbfuncholding.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\mbfuncholding.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\BSP_lib\Inc\Driver -I.\CMSIS\CMOSupport -I.\CMSIS\NUC1xxSupport -I.\User\inc -I.\modbus\include -I.\modbus\MBport -I.\modbus\rtu -I"D:\Program Files\keil\ARM\RV31\INC" -I"D:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"D:\Program Files\keil\ARM\Inc\Nuvoton\NUC1xx" --omf_browse=.\obj\mbfuncholding.crf modbus\functions\mbfuncholding.c]
                          THUMB

                          AREA ||i.eMBFuncReadHoldingRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncReadHoldingRegister PROC
;;;169    eMBException
;;;170    eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
000000  b5fe              PUSH     {r1-r7,lr}
;;;171    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;172        USHORT          usRegAddress;
;;;173        USHORT          usRegCount;
;;;174        UCHAR          *pucFrameCur;
;;;175    
;;;176        eMBException    eStatus = MB_EX_NONE;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;177        eMBErrorCode    eRegStatus;
;;;178    
;;;179        if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
00000a  8820              LDRH     r0,[r4,#0]
00000c  2805              CMP      r0,#5
00000e  d138              BNE      |L1.130|
;;;180        {
;;;181            usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
000010  7868              LDRB     r0,[r5,#1]
000012  0200              LSLS     r0,r0,#8
000014  9002              STR      r0,[sp,#8]
;;;182            usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
000016  78a8              LDRB     r0,[r5,#2]
000018  9902              LDR      r1,[sp,#8]
00001a  4308              ORRS     r0,r0,r1
00001c  9002              STR      r0,[sp,#8]
;;;183            usRegAddress++;
00001e  9802              LDR      r0,[sp,#8]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  9002              STR      r0,[sp,#8]
;;;184    
;;;185            usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
000026  78e8              LDRB     r0,[r5,#3]
000028  0206              LSLS     r6,r0,#8
;;;186            usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
00002a  792e              LDRB     r6,[r5,#4]
;;;187    
;;;188            /* Check if the number of registers to read is valid. If not
;;;189             * return Modbus illegal data value exception. 
;;;190             */
;;;191            if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
00002c  2e01              CMP      r6,#1
00002e  db25              BLT      |L1.124|
000030  2e7d              CMP      r6,#0x7d
000032  dc23              BGT      |L1.124|
;;;192            {
;;;193                /* Set the current PDU data pointer to the beginning. */
;;;194                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
000034  462f              MOV      r7,r5
;;;195                *usLen = MB_PDU_FUNC_OFF;
000036  2000              MOVS     r0,#0
000038  8020              STRH     r0,[r4,#0]
;;;196    
;;;197                /* First byte contains the function code. */
;;;198                *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
00003a  2003              MOVS     r0,#3
00003c  7038              STRB     r0,[r7,#0]
00003e  1c7f              ADDS     r7,r7,#1
;;;199                *usLen += 1;
000040  8820              LDRH     r0,[r4,#0]
000042  1c40              ADDS     r0,r0,#1
000044  8020              STRH     r0,[r4,#0]
;;;200    
;;;201                /* Second byte in the response contain the number of bytes. */
;;;202                *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
000046  0670              LSLS     r0,r6,#25
000048  0e00              LSRS     r0,r0,#24
00004a  7038              STRB     r0,[r7,#0]
00004c  1c7f              ADDS     r7,r7,#1
;;;203                *usLen += 1;
00004e  8820              LDRH     r0,[r4,#0]
000050  1c40              ADDS     r0,r0,#1
000052  8020              STRH     r0,[r4,#0]
;;;204    
;;;205                /* Make callback to fill the buffer. */
;;;206                eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
000054  2300              MOVS     r3,#0
000056  4632              MOV      r2,r6
000058  4638              MOV      r0,r7
00005a  9902              LDR      r1,[sp,#8]
00005c  f7fffffe          BL       eMBRegHoldingCB
000060  9000              STR      r0,[sp,#0]
;;;207                /* If an error occured convert it into a Modbus exception. */
;;;208                if( eRegStatus != MB_ENOERR )
000062  9800              LDR      r0,[sp,#0]
000064  2800              CMP      r0,#0
000066  d004              BEQ      |L1.114|
;;;209                {
;;;210                    eStatus = prveMBError2Exception( eRegStatus );
000068  9800              LDR      r0,[sp,#0]
00006a  f7fffffe          BL       prveMBError2Exception
00006e  9001              STR      r0,[sp,#4]
000070  e009              B        |L1.134|
                  |L1.114|
;;;211                }
;;;212                else
;;;213                {
;;;214                    *usLen += usRegCount * 2;
000072  8820              LDRH     r0,[r4,#0]
000074  0071              LSLS     r1,r6,#1
000076  1840              ADDS     r0,r0,r1
000078  8020              STRH     r0,[r4,#0]
00007a  e004              B        |L1.134|
                  |L1.124|
;;;215                }
;;;216            }
;;;217            else
;;;218            {
;;;219                eStatus = MB_EX_ILLEGAL_DATA_VALUE;
00007c  2003              MOVS     r0,#3
00007e  9001              STR      r0,[sp,#4]
000080  e001              B        |L1.134|
                  |L1.130|
;;;220            }
;;;221        }
;;;222        else
;;;223        {
;;;224            /* Can't be a valid request because the length is incorrect. */
;;;225            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
000082  2003              MOVS     r0,#3
000084  9001              STR      r0,[sp,#4]
                  |L1.134|
;;;226        }
;;;227        return eStatus;
000086  9801              LDR      r0,[sp,#4]
;;;228    }
000088  bdfe              POP      {r1-r7,pc}
;;;229    
                          ENDP


                          AREA ||i.eMBFuncReadWriteMultipleHoldingRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncReadWriteMultipleHoldingRegister PROC
;;;234    eMBException
;;;235    eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
000000  b5f0              PUSH     {r4-r7,lr}
;;;236    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;237        USHORT          usRegReadAddress;
;;;238        USHORT          usRegReadCount;
;;;239        USHORT          usRegWriteAddress;
;;;240        USHORT          usRegWriteCount;
;;;241        UCHAR           ucRegWriteByteCount;
;;;242        UCHAR          *pucFrameCur;
;;;243    
;;;244        eMBException    eStatus = MB_EX_NONE;
000008  2000              MOVS     r0,#0
00000a  9002              STR      r0,[sp,#8]
;;;245        eMBErrorCode    eRegStatus;
;;;246    
;;;247        if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
00000c  8828              LDRH     r0,[r5,#0]
00000e  280a              CMP      r0,#0xa
000010  db63              BLT      |L2.218|
;;;248        {
;;;249            usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
000012  7860              LDRB     r0,[r4,#1]
000014  0200              LSLS     r0,r0,#8
000016  9006              STR      r0,[sp,#0x18]
;;;250            usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
000018  78a0              LDRB     r0,[r4,#2]
00001a  9906              LDR      r1,[sp,#0x18]
00001c  4308              ORRS     r0,r0,r1
00001e  9006              STR      r0,[sp,#0x18]
;;;251            usRegReadAddress++;
000020  9806              LDR      r0,[sp,#0x18]
000022  1c40              ADDS     r0,r0,#1
000024  b280              UXTH     r0,r0
000026  9006              STR      r0,[sp,#0x18]
;;;252    
;;;253            usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
000028  78e0              LDRB     r0,[r4,#3]
00002a  0206              LSLS     r6,r0,#8
;;;254            usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
00002c  7920              LDRB     r0,[r4,#4]
00002e  4306              ORRS     r6,r6,r0
;;;255    
;;;256            usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
000030  7960              LDRB     r0,[r4,#5]
000032  0200              LSLS     r0,r0,#8
000034  9005              STR      r0,[sp,#0x14]
;;;257            usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
000036  79a0              LDRB     r0,[r4,#6]
000038  9905              LDR      r1,[sp,#0x14]
00003a  4308              ORRS     r0,r0,r1
00003c  9005              STR      r0,[sp,#0x14]
;;;258            usRegWriteAddress++;
00003e  9805              LDR      r0,[sp,#0x14]
000040  1c40              ADDS     r0,r0,#1
000042  b280              UXTH     r0,r0
000044  9005              STR      r0,[sp,#0x14]
;;;259    
;;;260            usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
000046  79e0              LDRB     r0,[r4,#7]
000048  0207              LSLS     r7,r0,#8
;;;261            usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
00004a  7a20              LDRB     r0,[r4,#8]
00004c  4307              ORRS     r7,r7,r0
;;;262    
;;;263            ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
00004e  7a60              LDRB     r0,[r4,#9]
000050  9004              STR      r0,[sp,#0x10]
;;;264    
;;;265            if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
000052  2e01              CMP      r6,#1
000054  db3f              BLT      |L2.214|
000056  2e7d              CMP      r6,#0x7d
000058  dc3d              BGT      |L2.214|
;;;266                ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
00005a  2f01              CMP      r7,#1
00005c  db3b              BLT      |L2.214|
00005e  2f79              CMP      r7,#0x79
000060  dc39              BGT      |L2.214|
;;;267                ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
000062  0079              LSLS     r1,r7,#1
000064  9804              LDR      r0,[sp,#0x10]
000066  4281              CMP      r1,r0
000068  d135              BNE      |L2.214|
;;;268            {
;;;269                /* Make callback to update the register values. */
;;;270                eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
00006a  2301              MOVS     r3,#1
00006c  463a              MOV      r2,r7
00006e  4620              MOV      r0,r4
000070  300a              ADDS     r0,r0,#0xa
000072  9905              LDR      r1,[sp,#0x14]
000074  f7fffffe          BL       eMBRegHoldingCB
000078  9001              STR      r0,[sp,#4]
;;;271                                              usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
;;;272    
;;;273                if( eRegStatus == MB_ENOERR )
00007a  9801              LDR      r0,[sp,#4]
00007c  2800              CMP      r0,#0
00007e  d122              BNE      |L2.198|
;;;274                {
;;;275                    /* Set the current PDU data pointer to the beginning. */
;;;276                    pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
000080  9403              STR      r4,[sp,#0xc]
;;;277                    *usLen = MB_PDU_FUNC_OFF;
000082  8028              STRH     r0,[r5,#0]
;;;278    
;;;279                    /* First byte contains the function code. */
;;;280                    *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
000084  2017              MOVS     r0,#0x17
000086  9c03              LDR      r4,[sp,#0xc]
000088  7020              STRB     r0,[r4,#0]
00008a  9c03              LDR      r4,[sp,#0xc]
00008c  1c60              ADDS     r0,r4,#1
00008e  9003              STR      r0,[sp,#0xc]
;;;281                    *usLen += 1;
000090  8828              LDRH     r0,[r5,#0]
000092  1c40              ADDS     r0,r0,#1
000094  8028              STRH     r0,[r5,#0]
;;;282    
;;;283                    /* Second byte in the response contain the number of bytes. */
;;;284                    *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
000096  0670              LSLS     r0,r6,#25
000098  0e01              LSRS     r1,r0,#24
00009a  9803              LDR      r0,[sp,#0xc]
00009c  7001              STRB     r1,[r0,#0]
00009e  9803              LDR      r0,[sp,#0xc]
0000a0  1c40              ADDS     r0,r0,#1
0000a2  9003              STR      r0,[sp,#0xc]
;;;285                    *usLen += 1;
0000a4  8828              LDRH     r0,[r5,#0]
0000a6  1c40              ADDS     r0,r0,#1
0000a8  8028              STRH     r0,[r5,#0]
;;;286    
;;;287                    /* Make the read callback. */
;;;288                    eRegStatus =
0000aa  2300              MOVS     r3,#0
0000ac  4632              MOV      r2,r6
0000ae  9906              LDR      r1,[sp,#0x18]
0000b0  9803              LDR      r0,[sp,#0xc]
0000b2  f7fffffe          BL       eMBRegHoldingCB
0000b6  9001              STR      r0,[sp,#4]
;;;289                        eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
;;;290                    if( eRegStatus == MB_ENOERR )
0000b8  9801              LDR      r0,[sp,#4]
0000ba  2800              CMP      r0,#0
0000bc  d103              BNE      |L2.198|
;;;291                    {
;;;292                        *usLen += 2 * usRegReadCount;
0000be  8828              LDRH     r0,[r5,#0]
0000c0  0071              LSLS     r1,r6,#1
0000c2  1840              ADDS     r0,r0,r1
0000c4  8028              STRH     r0,[r5,#0]
                  |L2.198|
;;;293                    }
;;;294                }
;;;295                if( eRegStatus != MB_ENOERR )
0000c6  9801              LDR      r0,[sp,#4]
0000c8  2800              CMP      r0,#0
0000ca  d006              BEQ      |L2.218|
;;;296                {
;;;297                    eStatus = prveMBError2Exception( eRegStatus );
0000cc  9801              LDR      r0,[sp,#4]
0000ce  f7fffffe          BL       prveMBError2Exception
0000d2  9002              STR      r0,[sp,#8]
0000d4  e001              B        |L2.218|
                  |L2.214|
;;;298                }
;;;299            }
;;;300            else
;;;301            {
;;;302                eStatus = MB_EX_ILLEGAL_DATA_VALUE;
0000d6  2003              MOVS     r0,#3
0000d8  9002              STR      r0,[sp,#8]
                  |L2.218|
;;;303            }
;;;304        }
;;;305        return eStatus;
0000da  9802              LDR      r0,[sp,#8]
;;;306    }
0000dc  b007              ADD      sp,sp,#0x1c
0000de  bdf0              POP      {r4-r7,pc}
;;;307    
                          ENDP


                          AREA ||i.eMBFuncWriteHoldingRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncWriteHoldingRegister PROC
;;;76     eMBException
;;;77     eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
000000  b5f8              PUSH     {r3-r7,lr}
;;;78     {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
;;;79         USHORT          usRegAddress;
;;;80         eMBException    eStatus = MB_EX_NONE;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;81         eMBErrorCode    eRegStatus;
;;;82     
;;;83         if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
00000a  8838              LDRH     r0,[r7,#0]
00000c  2805              CMP      r0,#5
00000e  d113              BNE      |L3.56|
;;;84         {
;;;85             usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
000010  7860              LDRB     r0,[r4,#1]
000012  0205              LSLS     r5,r0,#8
;;;86             usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
000014  78a0              LDRB     r0,[r4,#2]
000016  4305              ORRS     r5,r5,r0
;;;87             usRegAddress++;
000018  1c68              ADDS     r0,r5,#1
00001a  b285              UXTH     r5,r0
;;;88     
;;;89             /* Make callback to update the value. */
;;;90             eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
00001c  2301              MOVS     r3,#1
00001e  461a              MOV      r2,r3
000020  4629              MOV      r1,r5
000022  1ce0              ADDS     r0,r4,#3
000024  f7fffffe          BL       eMBRegHoldingCB
000028  4606              MOV      r6,r0
;;;91                                           usRegAddress, 1, MB_REG_WRITE );
;;;92     
;;;93             /* If an error occured convert it into a Modbus exception. */
;;;94             if( eRegStatus != MB_ENOERR )
00002a  2e00              CMP      r6,#0
00002c  d006              BEQ      |L3.60|
;;;95             {
;;;96                 eStatus = prveMBError2Exception( eRegStatus );
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       prveMBError2Exception
000034  9000              STR      r0,[sp,#0]
000036  e001              B        |L3.60|
                  |L3.56|
;;;97             }
;;;98         }
;;;99         else
;;;100        {
;;;101            /* Can't be a valid request because the length is incorrect. */
;;;102            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
000038  2003              MOVS     r0,#3
00003a  9000              STR      r0,[sp,#0]
                  |L3.60|
;;;103        }
;;;104        return eStatus;
00003c  9800              LDR      r0,[sp,#0]
;;;105    }
00003e  bdf8              POP      {r3-r7,pc}
;;;106    #endif
                          ENDP


                          AREA ||i.eMBFuncWriteMultipleHoldingRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncWriteMultipleHoldingRegister PROC
;;;109    eMBException
;;;110    eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
000000  b5fe              PUSH     {r1-r7,lr}
;;;111    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;112        USHORT          usRegAddress;
;;;113        USHORT          usRegCount;
;;;114        UCHAR           ucRegByteCount;
;;;115    
;;;116        eMBException    eStatus = MB_EX_NONE;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;117        eMBErrorCode    eRegStatus;
;;;118    
;;;119        if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
00000a  8830              LDRH     r0,[r6,#0]
00000c  2806              CMP      r0,#6
00000e  db29              BLT      |L4.100|
;;;120        {
;;;121            usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
000010  7860              LDRB     r0,[r4,#1]
000012  0207              LSLS     r7,r0,#8
;;;122            usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
000014  78a0              LDRB     r0,[r4,#2]
000016  4307              ORRS     r7,r7,r0
;;;123            usRegAddress++;
000018  1c78              ADDS     r0,r7,#1
00001a  b287              UXTH     r7,r0
;;;124    
;;;125            usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
00001c  78e0              LDRB     r0,[r4,#3]
00001e  0205              LSLS     r5,r0,#8
;;;126            usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
000020  7920              LDRB     r0,[r4,#4]
000022  4305              ORRS     r5,r5,r0
;;;127    
;;;128            ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
000024  7960              LDRB     r0,[r4,#5]
000026  9002              STR      r0,[sp,#8]
;;;129    
;;;130            if( ( usRegCount >= 1 ) &&
000028  2d01              CMP      r5,#1
00002a  db18              BLT      |L4.94|
;;;131                ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
00002c  2d78              CMP      r5,#0x78
00002e  dc16              BGT      |L4.94|
;;;132                ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
000030  0668              LSLS     r0,r5,#25
000032  0e01              LSRS     r1,r0,#24
000034  9802              LDR      r0,[sp,#8]
000036  4281              CMP      r1,r0
000038  d111              BNE      |L4.94|
;;;133            {
;;;134                /* Make callback to update the register values. */
;;;135                eRegStatus =
00003a  2301              MOVS     r3,#1
00003c  462a              MOV      r2,r5
00003e  4639              MOV      r1,r7
000040  1da0              ADDS     r0,r4,#6
000042  f7fffffe          BL       eMBRegHoldingCB
000046  9000              STR      r0,[sp,#0]
;;;136                    eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
;;;137                                     usRegAddress, usRegCount, MB_REG_WRITE );
;;;138    
;;;139                /* If an error occured convert it into a Modbus exception. */
;;;140                if( eRegStatus != MB_ENOERR )
000048  9800              LDR      r0,[sp,#0]
00004a  2800              CMP      r0,#0
00004c  d004              BEQ      |L4.88|
;;;141                {
;;;142                    eStatus = prveMBError2Exception( eRegStatus );
00004e  9800              LDR      r0,[sp,#0]
000050  f7fffffe          BL       prveMBError2Exception
000054  9001              STR      r0,[sp,#4]
000056  e007              B        |L4.104|
                  |L4.88|
;;;143                }
;;;144                else
;;;145                {
;;;146                    /* The response contains the function code, the starting
;;;147                     * address and the quantity of registers. We reuse the
;;;148                     * old values in the buffer because they are still valid.
;;;149                     */
;;;150                    *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
000058  2005              MOVS     r0,#5
00005a  8030              STRH     r0,[r6,#0]
00005c  e004              B        |L4.104|
                  |L4.94|
;;;151                }
;;;152            }
;;;153            else
;;;154            {
;;;155                eStatus = MB_EX_ILLEGAL_DATA_VALUE;
00005e  2003              MOVS     r0,#3
000060  9001              STR      r0,[sp,#4]
000062  e001              B        |L4.104|
                  |L4.100|
;;;156            }
;;;157        }
;;;158        else
;;;159        {
;;;160            /* Can't be a valid request because the length is incorrect. */
;;;161            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
000064  2003              MOVS     r0,#3
000066  9001              STR      r0,[sp,#4]
                  |L4.104|
;;;162        }
;;;163        return eStatus;
000068  9801              LDR      r0,[sp,#4]
;;;164    }
00006a  bdfe              POP      {r1-r7,pc}
;;;165    #endif
                          ENDP

