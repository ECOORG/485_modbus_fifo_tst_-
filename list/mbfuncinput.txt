; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\mbfuncinput.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\mbfuncinput.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\BSP_lib\Inc\Driver -I.\CMSIS\CMOSupport -I.\CMSIS\NUC1xxSupport -I.\User\inc -I.\modbus\include -I.\modbus\MBport -I.\modbus\rtu -I"D:\Program Files\keil\ARM\RV31\INC" -I"D:\Program Files\keil\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"D:\Program Files\keil\ARM\Inc\Nuvoton\NUC1xx" --omf_browse=.\obj\mbfuncinput.crf modbus\functions\mbfuncinput.c]
                          THUMB

                          AREA ||i.eMBFuncReadInputRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncReadInputRegister PROC
;;;58     eMBException
;;;59     eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
000000  b5fe              PUSH     {r1-r7,lr}
;;;60     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;61         USHORT          usRegAddress;
;;;62         USHORT          usRegCount;
;;;63         UCHAR          *pucFrameCur;
;;;64     
;;;65         eMBException    eStatus = MB_EX_NONE;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
;;;66         eMBErrorCode    eRegStatus;
;;;67     
;;;68         if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
00000a  8820              LDRH     r0,[r4,#0]
00000c  2805              CMP      r0,#5
00000e  d138              BNE      |L1.130|
;;;69         {
;;;70             usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
000010  7868              LDRB     r0,[r5,#1]
000012  0200              LSLS     r0,r0,#8
000014  9002              STR      r0,[sp,#8]
;;;71             usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
000016  78a8              LDRB     r0,[r5,#2]
000018  9902              LDR      r1,[sp,#8]
00001a  4308              ORRS     r0,r0,r1
00001c  9002              STR      r0,[sp,#8]
;;;72             usRegAddress++;
00001e  9802              LDR      r0,[sp,#8]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  9002              STR      r0,[sp,#8]
;;;73     
;;;74             usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
000026  78e8              LDRB     r0,[r5,#3]
000028  0206              LSLS     r6,r0,#8
;;;75             usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
00002a  7928              LDRB     r0,[r5,#4]
00002c  4306              ORRS     r6,r6,r0
;;;76     
;;;77             /* Check if the number of registers to read is valid. If not
;;;78              * return Modbus illegal data value exception. 
;;;79              */
;;;80             if( ( usRegCount >= 1 )
00002e  2e01              CMP      r6,#1
000030  db24              BLT      |L1.124|
;;;81                 && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
000032  2e7d              CMP      r6,#0x7d
000034  da22              BGE      |L1.124|
;;;82             {
;;;83                 /* Set the current PDU data pointer to the beginning. */
;;;84                 pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
000036  462f              MOV      r7,r5
;;;85                 *usLen = MB_PDU_FUNC_OFF;
000038  2000              MOVS     r0,#0
00003a  8020              STRH     r0,[r4,#0]
;;;86     
;;;87                 /* First byte contains the function code. */
;;;88                 *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
00003c  2004              MOVS     r0,#4
00003e  7038              STRB     r0,[r7,#0]
000040  1c7f              ADDS     r7,r7,#1
;;;89                 *usLen += 1;
000042  8820              LDRH     r0,[r4,#0]
000044  1c40              ADDS     r0,r0,#1
000046  8020              STRH     r0,[r4,#0]
;;;90     
;;;91                 /* Second byte in the response contain the number of bytes. */
;;;92                 *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
000048  0670              LSLS     r0,r6,#25
00004a  0e00              LSRS     r0,r0,#24
00004c  7038              STRB     r0,[r7,#0]
00004e  1c7f              ADDS     r7,r7,#1
;;;93                 *usLen += 1;
000050  8820              LDRH     r0,[r4,#0]
000052  1c40              ADDS     r0,r0,#1
000054  8020              STRH     r0,[r4,#0]
;;;94     
;;;95                 eRegStatus =
000056  4632              MOV      r2,r6
000058  4638              MOV      r0,r7
00005a  9902              LDR      r1,[sp,#8]
00005c  f7fffffe          BL       eMBRegInputCB
000060  9000              STR      r0,[sp,#0]
;;;96                     eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
;;;97     
;;;98                 /* If an error occured convert it into a Modbus exception. */
;;;99                 if( eRegStatus != MB_ENOERR )
000062  9800              LDR      r0,[sp,#0]
000064  2800              CMP      r0,#0
000066  d004              BEQ      |L1.114|
;;;100                {
;;;101                    eStatus = prveMBError2Exception( eRegStatus );
000068  9800              LDR      r0,[sp,#0]
00006a  f7fffffe          BL       prveMBError2Exception
00006e  9001              STR      r0,[sp,#4]
000070  e009              B        |L1.134|
                  |L1.114|
;;;102                }
;;;103                else
;;;104                {
;;;105                    *usLen += usRegCount * 2;
000072  8820              LDRH     r0,[r4,#0]
000074  0071              LSLS     r1,r6,#1
000076  1840              ADDS     r0,r0,r1
000078  8020              STRH     r0,[r4,#0]
00007a  e004              B        |L1.134|
                  |L1.124|
;;;106                }
;;;107            }
;;;108            else
;;;109            {
;;;110                eStatus = MB_EX_ILLEGAL_DATA_VALUE;
00007c  2003              MOVS     r0,#3
00007e  9001              STR      r0,[sp,#4]
000080  e001              B        |L1.134|
                  |L1.130|
;;;111            }
;;;112        }
;;;113        else
;;;114        {
;;;115            /* Can't be a valid read input register request because the length
;;;116             * is incorrect. */
;;;117            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
000082  2003              MOVS     r0,#3
000084  9001              STR      r0,[sp,#4]
                  |L1.134|
;;;118        }
;;;119        return eStatus;
000086  9801              LDR      r0,[sp,#4]
;;;120    }
000088  bdfe              POP      {r1-r7,pc}
;;;121    
                          ENDP

