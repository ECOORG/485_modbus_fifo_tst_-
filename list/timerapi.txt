; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\timerapi.o --asm_dir=.\list\ --list_dir=.\list\ --depend=.\obj\timerapi.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\BSP_lib\Inc\Driver -I.\CMSIS\CMOSupport -I.\CMSIS\NUC1xxSupport -I.\User\inc -I"D:\Program Files\keil\ARM\RV31\INC" -I"D:\Program Files\keil\ARM\CMSIS\Include" -I"D:\Program Files\keil\ARM\Inc\Nuvoton\NUC1xx" --omf_browse=.\obj\timerapi.crf User\src\TimerAPI.c]
                          THUMB

                          AREA ||i.ResetTimer0Relay||, CODE, READONLY, ALIGN=2

                  ResetTimer0Relay PROC
;;;56     }
;;;57     void ResetTimer0Relay(DELAY_TNO DelayTxx)
000000  2100              MOVS     r1,#0
;;;58     {
;;;59     	Timer0Relay.TimerRelayArray[DelayTxx] 	= 0;
000002  4a08              LDR      r2,|L1.36|
000004  5411              STRB     r1,[r2,r0]
;;;60     	if(Timer0Delay[DelayTxx].active == TRUE){
000006  00c1              LSLS     r1,r0,#3
000008  4a07              LDR      r2,|L1.40|
00000a  5851              LDR      r1,[r2,r1]
00000c  2901              CMP      r1,#1
00000e  d108              BNE      |L1.34|
;;;61     		Timer0Delay[DelayTxx].active = FALSE;
000010  2100              MOVS     r1,#0
000012  00c2              LSLS     r2,r0,#3
000014  4b04              LDR      r3,|L1.40|
000016  5099              STR      r1,[r3,r2]
;;;62     		uTimer0DelayCnt--;
000018  4904              LDR      r1,|L1.44|
00001a  6809              LDR      r1,[r1,#0]  ; uTimer0DelayCnt
00001c  1e49              SUBS     r1,r1,#1
00001e  4a03              LDR      r2,|L1.44|
000020  6011              STR      r1,[r2,#0]  ; uTimer0DelayCnt
                  |L1.34|
;;;63     	}
;;;64     }
000022  4770              BX       lr
;;;65     
                          ENDP

                  |L1.36|
                          DCD      Timer0Relay
                  |L1.40|
                          DCD      Timer0Delay
                  |L1.44|
                          DCD      uTimer0DelayCnt

                          AREA ||i.Timer0CallBack||, CODE, READONLY, ALIGN=2

                  Timer0CallBack PROC
;;;17     }
;;;18     void Timer0CallBack(u32bit data)
000000  b538              PUSH     {r3-r5,lr}
;;;19     {
000002  4604              MOV      r4,r0
;;;20     	u32bit volatile i;
;;;21     	for(i = 0; i < TIMER0_DELAY_COUNT; i++){
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  e025              B        |L2.86|
                  |L2.10|
;;;22     		if(Timer0Delay[i].active == TRUE){
00000a  9800              LDR      r0,[sp,#0]
00000c  00c0              LSLS     r0,r0,#3
00000e  4917              LDR      r1,|L2.108|
000010  5808              LDR      r0,[r1,r0]
000012  2801              CMP      r0,#1
000014  d11c              BNE      |L2.80|
;;;23     			Timer0Delay[i].curTick--;
000016  9900              LDR      r1,[sp,#0]
000018  00c9              LSLS     r1,r1,#3
00001a  4a14              LDR      r2,|L2.108|
00001c  1889              ADDS     r1,r1,r2
00001e  1d08              ADDS     r0,r1,#4
000020  6849              LDR      r1,[r1,#4]
000022  1e49              SUBS     r1,r1,#1
000024  6001              STR      r1,[r0,#0]
;;;24     			if(Timer0Delay[i].curTick == 0){
000026  9800              LDR      r0,[sp,#0]
000028  00c0              LSLS     r0,r0,#3
00002a  4611              MOV      r1,r2
00002c  1840              ADDS     r0,r0,r1
00002e  6840              LDR      r0,[r0,#4]
000030  2800              CMP      r0,#0
000032  d10d              BNE      |L2.80|
;;;25     				Timer0Relay.TimerRelayArray[i] = 1;
000034  2001              MOVS     r0,#1
000036  490e              LDR      r1,|L2.112|
000038  9a00              LDR      r2,[sp,#0]
00003a  5488              STRB     r0,[r1,r2]
;;;26     				uTimer0DelayCnt--;
00003c  480d              LDR      r0,|L2.116|
00003e  6800              LDR      r0,[r0,#0]  ; uTimer0DelayCnt
000040  1e40              SUBS     r0,r0,#1
000042  490c              LDR      r1,|L2.116|
000044  6008              STR      r0,[r1,#0]  ; uTimer0DelayCnt
;;;27     				Timer0Delay[i].active = FALSE;
000046  2000              MOVS     r0,#0
000048  9900              LDR      r1,[sp,#0]
00004a  00c9              LSLS     r1,r1,#3
00004c  4a07              LDR      r2,|L2.108|
00004e  5050              STR      r0,[r2,r1]
                  |L2.80|
000050  9800              LDR      r0,[sp,#0]            ;21
000052  1c40              ADDS     r0,r0,#1              ;21
000054  9000              STR      r0,[sp,#0]            ;21
                  |L2.86|
000056  9800              LDR      r0,[sp,#0]            ;21
000058  2810              CMP      r0,#0x10              ;21
00005a  d3d6              BCC      |L2.10|
;;;28     			}
;;;29     		}
;;;30     	}
;;;31     	if(uTimer0DelayCnt == 0){
00005c  4805              LDR      r0,|L2.116|
00005e  6800              LDR      r0,[r0,#0]  ; uTimer0DelayCnt
000060  2800              CMP      r0,#0
000062  d101              BNE      |L2.104|
;;;32     		Timer0Close();
000064  f7fffffe          BL       Timer0Close
                  |L2.104|
;;;33     	}
;;;34     }
000068  bd38              POP      {r3-r5,pc}
;;;35     void Timer0Init(void)
                          ENDP

00006a  0000              DCW      0x0000
                  |L2.108|
                          DCD      Timer0Delay
                  |L2.112|
                          DCD      Timer0Relay
                  |L2.116|
                          DCD      uTimer0DelayCnt

                          AREA ||i.Timer0Close||, CODE, READONLY, ALIGN=2

                  Timer0Close PROC
;;;11     
;;;12     void Timer0Close(void)
000000  b510              PUSH     {r4,lr}
;;;13     {
;;;14     	DrvTIMER_ClearTimerEvent(E_TMR0,0);
000002  2100              MOVS     r1,#0
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       DrvTIMER_ClearTimerEvent
;;;15     	DrvTIMER_Close(E_TMR0);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       DrvTIMER_Close
;;;16     	bIsSetTime0Delay = FALSE;
000010  2000              MOVS     r0,#0
000012  4901              LDR      r1,|L3.24|
000014  6008              STR      r0,[r1,#0]  ; bIsSetTime0Delay
;;;17     }
000016  bd10              POP      {r4,pc}
;;;18     void Timer0CallBack(u32bit data)
                          ENDP

                  |L3.24|
                          DCD      bIsSetTime0Delay

                          AREA ||i.Timer0Init||, CODE, READONLY, ALIGN=2

                  Timer0Init PROC
;;;34     }
;;;35     void Timer0Init(void)
000000  b510              PUSH     {r4,lr}
;;;36     {
;;;37     	if(bIsSetTime0Delay == FALSE){
000002  480a              LDR      r0,|L4.44|
000004  6800              LDR      r0,[r0,#0]  ; bIsSetTime0Delay
000006  2800              CMP      r0,#0
000008  d10f              BNE      |L4.42|
;;;38     		DrvTIMER_Init();									//定时器初始化
00000a  f7fffffe          BL       DrvTIMER_Init
;;;39     		DrvTIMER_Open(E_TMR0,10000,E_PERIODIC_MODE);		//启动定时器0,1ms,周期模式
00000e  2201              MOVS     r2,#1
000010  4907              LDR      r1,|L4.48|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       DrvTIMER_Open
;;;40     		DrvTIMER_SetTimerEvent(E_TMR0,10,Timer0CallBack,0);	//装载TMR0事件
000018  2300              MOVS     r3,#0
00001a  4a06              LDR      r2,|L4.52|
00001c  210a              MOVS     r1,#0xa
00001e  4618              MOV      r0,r3
000020  f7fffffe          BL       DrvTIMER_SetTimerEvent
;;;41     		bIsSetTime0Delay = TRUE;
000024  2001              MOVS     r0,#1
000026  4901              LDR      r1,|L4.44|
000028  6008              STR      r0,[r1,#0]  ; bIsSetTime0Delay
                  |L4.42|
;;;42     	}
;;;43     }
00002a  bd10              POP      {r4,pc}
;;;44     u32bit Timer0SetDelay(DELAY_TNO DelayTxx,u32bit nTick)		//ms
                          ENDP

                  |L4.44|
                          DCD      bIsSetTime0Delay
                  |L4.48|
                          DCD      0x00002710
                  |L4.52|
                          DCD      Timer0CallBack

                          AREA ||i.Timer0SetDelay||, CODE, READONLY, ALIGN=2

                  Timer0SetDelay PROC
;;;43     }
;;;44     u32bit Timer0SetDelay(DELAY_TNO DelayTxx,u32bit nTick)		//ms
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;46     	if(uTimer0DelayCnt >= TIMER0_DELAY_COUNT)
000006  480f              LDR      r0,|L5.68|
000008  6800              LDR      r0,[r0,#0]  ; uTimer0DelayCnt
00000a  2810              CMP      r0,#0x10
00000c  d301              BCC      |L5.18|
;;;47     		return E_DRVTIMER_DELAY_FULL;
00000e  480e              LDR      r0,|L5.72|
                  |L5.16|
;;;48     	uTimer0DelayCnt++;
;;;49     	if (Timer0Delay[DelayTxx].active  == FALSE){
;;;50     		Timer0Delay[DelayTxx].active       = TRUE;
;;;51     		Timer0Delay[DelayTxx].curTick      = nTick;
;;;52     		Timer0Relay.TimerRelayArray[DelayTxx] = 0;
;;;53     	}
;;;54     	Timer0Init();
;;;55     	return E_SUCCESS;
;;;56     }
000010  bd70              POP      {r4-r6,pc}
                  |L5.18|
000012  480c              LDR      r0,|L5.68|
000014  6800              LDR      r0,[r0,#0]            ;48  ; uTimer0DelayCnt
000016  1c40              ADDS     r0,r0,#1              ;48
000018  490a              LDR      r1,|L5.68|
00001a  6008              STR      r0,[r1,#0]            ;48  ; uTimer0DelayCnt
00001c  00e0              LSLS     r0,r4,#3              ;49
00001e  490b              LDR      r1,|L5.76|
000020  5808              LDR      r0,[r1,r0]            ;49
000022  2800              CMP      r0,#0                 ;49
000024  d10a              BNE      |L5.60|
000026  2001              MOVS     r0,#1                 ;50
000028  00e1              LSLS     r1,r4,#3              ;50
00002a  4a08              LDR      r2,|L5.76|
00002c  5050              STR      r0,[r2,r1]            ;50
00002e  00e0              LSLS     r0,r4,#3              ;51
000030  4611              MOV      r1,r2                 ;51
000032  1840              ADDS     r0,r0,r1              ;51
000034  6045              STR      r5,[r0,#4]            ;51
000036  2000              MOVS     r0,#0                 ;52
000038  4905              LDR      r1,|L5.80|
00003a  5508              STRB     r0,[r1,r4]            ;52
                  |L5.60|
00003c  f7fffffe          BL       Timer0Init
000040  2000              MOVS     r0,#0                 ;55
000042  e7e5              B        |L5.16|
;;;57     void ResetTimer0Relay(DELAY_TNO DelayTxx)
                          ENDP

                  |L5.68|
                          DCD      uTimer0DelayCnt
                  |L5.72|
                          DCD      0xffff9707
                  |L5.76|
                          DCD      Timer0Delay
                  |L5.80|
                          DCD      Timer0Relay

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Timer0Relay
                          %        20
                  Timer0Delay
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  uTimer0DelayCnt
                          DCD      0x00000000
                  bIsSetTime0Delay
                          DCD      0x00000000
